[
  {
    "objectID": "python-geoespacial/unidad_1b_soluciones.html",
    "href": "python-geoespacial/unidad_1b_soluciones.html",
    "title": "5  ACP 166: Datos abiertos para ciudades resilientes",
    "section": "",
    "text": "5.0.1 Unidad 1B: Fundamentos de GIS en Python",
    "crumbs": [
      "Python Geoespacial",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>ACP 166: Datos abiertos para ciudades resilientes</span>"
    ]
  },
  {
    "objectID": "python-geoespacial/unidad_1b_soluciones.html#sección-1-datos-vectoriales",
    "href": "python-geoespacial/unidad_1b_soluciones.html#sección-1-datos-vectoriales",
    "title": "5  ACP 166: Datos abiertos para ciudades resilientes",
    "section": "5.1 Sección 1: Datos Vectoriales",
    "text": "5.1 Sección 1: Datos Vectoriales\n\n5.1.1 1.1: Módulos y constantes\nPara comenzar tenemos que importar los módulos que vamos a usar. Cada módulo corresponde a una funcionalidad que usamos en este análisis. Por ejemplo, geopandas para la manipulación de datos vectoriales en Python.\n\n\nMostrar código\n# ! pip install geopandas rioxarray rasterstats owslib matplotlib numpy planetary-computer pystac-client odc-stac\n\n\n\n\nMostrar código\nimport matplotlib.pyplot as plt\nfrom io import StringIO\nimport geopandas as gpd\nimport requests\nimport os\nimport numpy as np\nfrom io import BytesIO\nfrom owslib.wfs import WebFeatureService\nimport rioxarray\nfrom rasterstats import zonal_stats\nimport matplotlib.pyplot as plt\nimport matplotlib.colors as mcolors\nimport numpy as np\nimport planetary_computer\nimport pystac_client\nfrom odc.stac import load\n\n\nLuego definimos nuestros CRS (sistemas de referencia de coordenadas). Usamos dos: EPSG 5348 (Posgar 7 para La Plata), que se mide en metros para los análisis específicos, y EPSG 4326, el sistema estándar de longitud y latitud para las consultas de los API.\n\n\nMostrar código\nUSE_CRS = \"EPSG:5348\"  # POSGAR 2007 / Argentina 4\nWGS84_CRS = \"EPSG:4326\"  # para los API\n\n\n\n\n5.1.2 1.2: Importar datos de partidos\nImportamos los datos desde un WFS (Web Feature Service), un servidor donde se encuentran los datos de ARBA en formato vectorial. Conectamos mediante owslib e importamos los datos de todos los departamentos en la provincia de Buenos Aires.\nLos leemos mediante geopandas (GPD) y los convertimos a la proyección EPSG 5348.\n\n\nMostrar código\n# Cargar partidos desde el servicio WFS de ARBA GeoServer\nif os.path.exists(\"pba_partidos.geojson\"):\n    partidos = gpd.read_file(\"pba_partidos.geojson\")\nelse:\n    # Conectar al servicio WFS (Web Feature Service)\n    wfs_url = \"https://geo.arba.gov.ar/geoserver/idera/wfs\"\n    wfs = WebFeatureService(url=wfs_url, version=\"2.0.0\")\n    \n    # Solicitar la capa de Departamento (partidos)\n    response = wfs.getfeature(\n        typename=\"idera:Departamento\",\n        srsname=\"EPSG:5347\"  # CRS original\n    )\n    \n    # Convertir respuesta WFS a GeoDataFrame\n    partidos = gpd.read_file(BytesIO(response.read()))\n    \n    # Guardar en caché para uso futuro\n    partidos.to_file(\"pba_partidos.geojson\", driver=\"GeoJSON\")\n\n# Reproyectar al CRS de trabajo\npartidos = partidos.to_crs(USE_CRS)\n\n\nPodemos ver las primeras 5 observaciones en partidos mediante .head()…\n\n\nMostrar código\npartidos.head()\n\n\n\n\n\n\n\n\n\ngml_id\ncca\ncde\nfna\ngna\nnam\nsag\nara3\narl\ngeometry\n\n\n\n\n0\nDepartamento.546\n131\n06760\nPartido de San Miguel\nPartido\nSan Miguel\nARBA\n82.06\n82.80\nMULTIPOLYGON (((6343805.512 6177880.325, 63420...\n\n\n1\nDepartamento.433\n004\n06035\nPartido de Avellaneda\nPartido\nAvellaneda\nARBA\n57.27\n52.48\nMULTIPOLYGON (((6374002.895 6164551.5, 6374068...\n\n\n2\nDepartamento.434\n090\n06686\nPartido de Rojas\nPartido\nRojas\nARBA\n2060.72\n1978.87\nMULTIPOLYGON (((6128472.001 6214278.169, 61285...\n\n\n3\nDepartamento.435\n046\n06364\nPartido de General Rodríguez\nPartido\nGeneral Rodríguez\nARBA\n365.40\n360.14\nMULTIPOLYGON (((6327496.29 6167316.466, 632748...\n\n\n4\nDepartamento.485\n031\n06266\nPartido de Exaltación de la Cruz\nPartido\nExaltación de la Cruz\nARBA\n636.36\n634.17\nMULTIPOLYGON (((6286757.47 6218024.36, 6286781...\n\n\n\n\n\n\n\n…y mapearlos de manera básica con .plot(). Van a ver que los datos incluyen todos los partidos de la provincia de Buenos Aires, mucho más de lo que necesitamos.\n\n\nMostrar código\npartidos.plot()\n\n\n\n\n\n\n\n\n\nLos datos de partidos tienen varios atributos: código del departamento, nombre del departamento y geometría. Para sacar solo los datos del Partido de La Plata, podemos filtrarlos por la observación donde la columna “fna” corresponde a “Partido de La Plata”.\n\n\nMostrar código\n# TODO: filtrar partidos por la columna \"fna\" para la observación \"Partido de La Plata\"\n# el geodataframe resultante tiene que llamarse \"la_plata\"\nla_plata = partidos[partidos[\"fna\"] == \"Partido de La Plata\"]\n\n\n\n\nMostrar código\n# TODO: mostrar las primeras 5 observaciones de la_plata\nla_plata.head()\n\n\n\n\n\n\n\n\n\ngml_id\ncca\ncde\nfna\ngna\nnam\nsag\nara3\narl\ngeometry\n\n\n\n\n22\nDepartamento.496\n055\n06441\nPartido de La Plata\nPartido\nLa Plata\nARBA\n892.63\n942.23\nMULTIPOLYGON (((6395811.772 6128078.545, 63970...\n\n\n\n\n\n\n\nSin embargo, al mapearlo vemos que incluye no solo la zona urbana sino también una isla que es técnicamente parte del partido.\n\n\nMostrar código\nla_plata.plot(figsize=(12, 12)) # asi adjustamos el tamaño de la figura\n\n\n\n\n\n\n\n\n\nAl examinar el tipo de geometría, vemos que tenemos un multipolígono. La geometría puede ser un punto, una línea, un polígono o un multipolígono (las formas más comunes).\n\n\nMostrar código\n# TODO: imprimí el tipo de geometría de la_plata\nprint(la_plata.geometry.iloc[0].geom_type)\n\n\nMultiPolygon\n\n\nQueremos eliminar la isla porque no corresponde a nuestro análisis. Extraemos la geometría más grande de las dos. Esto es específico de nuestro análisis—no necesitan hacerlo normalmente.\n\n\nMostrar código\n# Obtener la geometría principal y mantener solo el polígono más grande\n# Esto elimina pequeñas islas que aparecen en los datos\nla_plata = la_plata.copy()\nmain_geom = la_plata.geometry.iloc[0]\nla_plata.loc[la_plata.index[0], \"geometry\"] = max(main_geom.geoms, key=lambda p: p.area)\n\n\nAl chequear la geometría nuevamente, vemos que ahora es un polígono simple y aparece únicamente el partido de La Plata sin la isla.\n\n\nMostrar código\n# TODO: imprimí (de nuevo) el tipo de geometría de la_plata\nprint(la_plata.geometry.iloc[0].geom_type)\n\n\nPolygon\n\n\n\n\nMostrar código\n# TODO: ploteá la_plata con un tamaño de figura de 12x12\nla_plata.plot(figsize=(12, 12))\n\n\n\n\n\n\n\n\n\n\n\n5.1.3 1.3: Datos de cuencas\nImportamos las cuencas de la Provincia de Buenos Aires desde un servidor de ArcGIS que contiene los datos más recientes (2023).\n\n\nMostrar código\n# Cargar cuencas de Buenos Aires desde caché o ArcGIS REST API\nif os.path.exists(\"cuencas_buenos_aires.geojson\"):\n    cuencas = gpd.read_file(\"cuencas_buenos_aires.geojson\")\nelse:\n    # Parámetros para consultar todas las features en formato GeoJSON\n    params = {\"where\": \"1=1\", \"outFields\": \"*\", \"f\": \"geojson\"}\n\n    # Consultar el servicio de cuencas de Buenos Aires (2023)\n    cuencas_response = requests.get(\n        \"https://services1.arcgis.com/atxllciEI8CHWvwW/ArcGIS/rest/services/Cuencas_BuenosAires_2023/FeatureServer/0/query\", \n        params=params\n    )\n    \n    # Guardar respuesta en caché para uso futuro\n    with open(\"cuencas_buenos_aires.geojson\", \"w\", encoding=\"utf-8\") as f:\n        f.write(cuencas_response.text)\n\n    # Cargar los datos desde la respuesta\n    cuencas = gpd.read_file(StringIO(cuencas_response.text))\n\n\n\n\nMostrar código\n# TODO: reproyectar las cuencas a USE_CRS\ncuencas = cuencas.to_crs(USE_CRS)\n\n\nAl mapearlas, corresponden a la provincia completa.\n\n\nMostrar código\n# TODO: ploteá la_plata con un tamaño de figura dd 10x10\ncuencas.plot(figsize=(10, 10))\n\n\n\n\n\n\n\n\n\n\n\nMostrar código\n# TODO: imprimí las primeras 5 observaciones de cuencas\ncuencas.head()\n\n\n\n\n\n\n\n\n\nFID\nShape_Leng\nCuenca\nSistema\nSubcuenca\nRegiónHí\nSuperficie\nFuenteEdic\nObservacio\nJurisdicci\nFechaEdici\nPorcentaje\nShape__Area\nShape__Length\ngeometry\n\n\n\n\n0\n1\n64739.954408\nCuenca Río Arrecifes\nREGION NORESTE\n\n\n7681,344444792\nCOHIFE - Comisión Mapa de cuencas\n\nBuenos Aires\n1696906800000\n100.000000\n0.007466\n0.533819\nMULTIPOLYGON (((6268131.732 6256973.822, 62681...\n\n\n1\n2\n262235.241263\nCuenca Río Arrecifes\nREGION NORESTE\n\n\n82870,3624883858\nCOHIFE - Comisión Mapa de cuencas\n\nBuenos Aires\n1696906800000\n100.000000\n0.080610\n2.168381\nMULTIPOLYGON (((6213496.653 6264169.857, 62134...\n\n\n2\n3\n594892.298067\nCuenca Río Arrecifes\nREGION NORESTE\n\n\n238690,056943605\nCOHIFE - Comisión Mapa de cuencas\n\nBuenos Aires\n1696906800000\n85.608089\n0.232548\n4.902046\nMULTIPOLYGON (((6156795.443 6232763.779, 61568...\n\n\n3\n4\n331224.014317\nCuenca Río Arrecifes\nREGION NORESTE\n\n\n194549,510611065\nCOHIFE - Comisión Mapa de cuencas\n\nBuenos Aires\n1696906800000\n100.000000\n0.189737\n2.716846\nMULTIPOLYGON (((6264237.019 6251011.577, 62642...\n\n\n4\n5\n148503.122930\nCuenca Río Arrecifes\nREGION NORESTE\n\n\n33652,5242803464\nCOHIFE - Comisión Mapa de cuencas\n\nBuenos Aires\n1696906800000\n100.000000\n0.032931\n1.218285\nPOLYGON ((6158735.927 6188394.083, 6158735.816...\n\n\n\n\n\n\n\n¿Cómo filtramos estas cuencas para incluir solo la zona de La Plata? Podríamos filtrar por atributos, pero tendríamos que saber el nombre exacto de cada cuenca.\nOtra opción es realizar una intersección espacial: filtramos solamente las geometrías que intersectan con la zona de La Plata.\nExisten varias maneras de hacer intersecciones geoespaciales usando spatial predicates (predicados espaciales): las que tocan la zona, las que están completamente dentro, las que están fuera, etc. Pueden consultar la documentación para más información.\nAquí analizamos cada cuenca que está dentro o toca el partido de La Plata, y creamos un mapa con las cuencas superpuestas.\n\n\nMostrar código\n# Filtrar cuencas que intersectan con La Plata (preserva las geometrías completas de las cuencas)\ncuencas = cuencas[cuencas.intersects(la_plata.geometry.union_all())]\n\n\n\n\nMostrar código\n# TODO: ploteá cuencas como capa base y la_plata como contorno negro punteado y sin relleno, todo en un solo gráfico de tamaño\nax = cuencas.plot(figsize=(12, 12))\nla_plata.plot(ax=ax, edgecolor='black', linestyle='--', linewidth=2, facecolor='none')\n\n\n\n\n\n\n\n\n\n\n\n5.1.4 1.4: Cuestiones analíticas\n¿Cuáles son las cuencas que intersectan con La Plata y cuántas hay?\n\n\nMostrar código\n# TODO: imprimí el número de observaciones de cuencas\ncuencas.shape\n\n\n(10, 15)\n\n\n\n\nMostrar código\n# TODO: imprimí todas las observaciones de cuencas\ncuencas\n\n\n\n\n\n\n\n\n\nFID\nShape_Leng\nCuenca\nSistema\nSubcuenca\nRegiónHí\nSuperficie\nFuenteEdic\nObservacio\nJurisdicci\nFechaEdici\nPorcentaje\nShape__Area\nShape__Length\ngeometry\n\n\n\n\n32\n33\n19236.244516\nCuenca Arroyo Rodriguez-Don Carlos\nREGION NORESTE\n\nVertiente Río de La Plata y Samborombón\n887,068225196789\nCOHIFE - Comisión Mapa de cuencas\n\nBuenos Aires\n1696906800000\n100.0\n0.000871\n0.150773\nPOLYGON ((6407121.684 6137599.948, 6407055.463...\n\n\n34\n35\n39820.331396\nCuenca Arroyo del Gato\nREGION NORESTE\n\nVertiente Río de La Plata y Samborombón\n5273,32277290421\nCOHIFE - Comisión Mapa de cuencas\n\nBuenos Aires\n1696906800000\n100.0\n0.005181\n0.317383\nPOLYGON ((6413898.815 6133667.85, 6413925.461 ...\n\n\n35\n36\n43000.322580\nCuenca Arroyo del Gato\nREGION NORESTE\n\nVertiente Río de La Plata y Samborombón\n4271,19872965366\nCOHIFE - Comisión Mapa de cuencas\n\nBuenos Aires\n1696906800000\n100.0\n0.004197\n0.345024\nPOLYGON ((6409320.586 6139510.939, 6409310.476...\n\n\n36\n37\n38674.846450\nCuenca Arroyo Rodriguez-Don Carlos\nREGION NORESTE\n\nVertiente Río de La Plata y Samborombón\n3286,50875162584\nCOHIFE - Comisión Mapa de cuencas\n\nBuenos Aires\n1696906800000\n100.0\n0.003229\n0.302683\nPOLYGON ((6405838.386 6140621.104, 6405831.584...\n\n\n38\n39\n49909.960338\nCuenca Arroyo Martín-Carnaval\nREGION NORESTE\n\nVertiente Río de La Plata y Samborombón\n8009,03092658122\nCOHIFE - Comisión Mapa de cuencas\n\nBuenos Aires\n1696906800000\n100.0\n0.007868\n0.403494\nPOLYGON ((6399462.032 6143111.659, 6399475.211...\n\n\n53\n54\n46705.062925\nCuenca Arroyo Pereyra\nREGION NORESTE\n\nVertiente Río de La Plata y Samborombón\n6058,43053467506\nCOHIFE - Comisión Mapa de cuencas\n\nBuenos Aires\n1696906800000\n100.0\n0.005949\n0.375855\nPOLYGON ((6399462.032 6143111.659, 6399389.256...\n\n\n54\n55\n133540.695640\nCuenca Arroyo El Pescado\nREGION NORESTE\n\nVertiente Río de La Plata y Samborombón\n35801,0766550378\nCOHIFE - Comisión Mapa de cuencas\n\nBuenos Aires\n1696906800000\n100.0\n0.035204\n1.093985\nPOLYGON ((6434443.863 6135013.288, 6434453.92 ...\n\n\n72\n73\n196378.882637\nArea de Bañados\nREGION NORESTE\n\nVertiente Río de La Plata y Samborombón\n44765,3597785269\nCOHIFE - Comisión Mapa de cuencas\n\nBuenos Aires\n1696906800000\n100.0\n0.043929\n1.624145\nPOLYGON ((6430875.128 6137122.557, 6430140.185...\n\n\n83\n84\n539510.943789\nCuenca Río Samborombón\nREGION NORESTE\n\nVertiente Río de La Plata y Samborombón\n564984,698530456\nCOHIFE - Comisión Mapa de cuencas\n\nBuenos Aires\n1696906800000\n100.0\n0.557467\n4.467349\nPOLYGON ((6379880.019 6137071.96, 6379888.632 ...\n\n\n129\n130\n32606.204061\nCuenca A° Maldonado\nREGION NORESTE\n\nVertiente Río de La Plata y Samborombón\n3580,67937557204\nCOHIFE - Comisión Mapa de cuencas\n\nBuenos Aires\n1696906800000\n100.0\n0.003518\n0.266847\nPOLYGON ((6417851.324 6129322.069, 6417844.749...\n\n\n\n\n\n\n\nPara saber el área en metros cuadrados de cada zona, calculamos el área y ordenamos los resultados de mayor a menor.\n\n\nMostrar código\n# TODO: agregar una columna con el área en metros cuadrados \ncuencas['area_m'] = cuencas.geometry.area\n\n# TODO: ordenar las observaciones por área de mayor a menor\ncuencas = cuencas.sort_values('area_m', ascending=False)\n\n# TODO: mostrar las primeras 5 observaciones de cuencas\ncuencas[['Cuenca', 'area_m']]\n\n\n/home/nissim/Documents/dev/fulbright/ciut-riesgo/.venv/lib/python3.12/site-packages/geopandas/geodataframe.py:1819: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  super().__setitem__(key, value)\n\n\n\n\n\n\n\n\n\nCuenca\narea_m\n\n\n\n\n83\nCuenca Río Samborombón\n5.626548e+09\n\n\n72\nArea de Bañados\n4.457880e+08\n\n\n54\nCuenca Arroyo El Pescado\n3.564201e+08\n\n\n38\nCuenca Arroyo Martín-Carnaval\n7.978092e+07\n\n\n53\nCuenca Arroyo Pereyra\n6.035630e+07\n\n\n34\nCuenca Arroyo del Gato\n5.251302e+07\n\n\n35\nCuenca Arroyo del Gato\n4.253879e+07\n\n\n129\nCuenca A° Maldonado\n3.565223e+07\n\n\n36\nCuenca Arroyo Rodriguez-Don Carlos\n3.273456e+07\n\n\n32\nCuenca Arroyo Rodriguez-Don Carlos\n8.834710e+06",
    "crumbs": [
      "Python Geoespacial",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>ACP 166: Datos abiertos para ciudades resilientes</span>"
    ]
  },
  {
    "objectID": "python-geoespacial/unidad_1b_soluciones.html#sección-2-datos-raster",
    "href": "python-geoespacial/unidad_1b_soluciones.html#sección-2-datos-raster",
    "title": "5  ACP 166: Datos abiertos para ciudades resilientes",
    "section": "5.2 Sección 2: Datos raster",
    "text": "5.2 Sección 2: Datos raster\n\n5.2.1 2.1 Modelo digital de superficie\nTrabajamos con datos de DSM (Modelo Digital de Superficie) que provienen de Copernicus (Agencia Espacial Europea) almacenados en Open Land Map.\nUsamos un Cloud Optimized GeoTIFF (GeoTIFF Optimizado para la Nube), un formato diseñado para facilitar el trabajo en la nube, junto con el módulo rioxarray para importar solamente los datos necesarios de manera eficaz. En lugar de importar todos los datos globales (varios terabytes), importamos únicamente nuestra área de interés mediante lazy loading (carga perezosa). Esto significa que no descargamos los datos hasta haberlos filtrado, usando así solamente la memoria y poder computacional esencial.\n\n\nMostrar código\n# 1. Conectar al catálogo de Microsoft Planetary Computer\n# Planetary Computer es una plataforma que provee acceso gratuito a datasets globales\ncatalog = pystac_client.Client.open(\n    \"https://planetarycomputer.microsoft.com/api/stac/v1\",\n    modifier=planetary_computer.sign_inplace,  # Firma automáticamente las solicitudes\n)\n\n# 2. Reproyectar las cuencas al CRS del raster (EPSG:4326)\n# Necesitamos esto para buscar los datos correctos en el catálogo\ncuencas_4326 = cuencas.to_crs(\"EPSG:4326\")\n\n# 3. Obtener el bounding box (caja delimitadora) de nuestras cuencas\n# bbox define el área geográfica de interés: [min_x, min_y, max_x, max_y]\nbbox = cuencas_4326.total_bounds\n\n# 4. Buscar el Modelo Digital de Superficie (DSM) de Copernicus para nuestra área\n# cop-dem-glo-30 es el mismo dataset global de elevación que usábamos de OpenLandMap\nsearch = catalog.search(\n    collections=[\"cop-dem-glo-30\"],  # Copernicus DEM Global 30m\n    bbox=bbox,  # Limitamos la búsqueda a nuestro área de interés\n)\n\n# Obtener los items (archivos) que cubren nuestra área\nitems = list(search.items())\n\n# 5. Cargar el DSM usando chunks para procesamiento eficiente en memoria\n# odc.stac.load descarga y ensambla automáticamente los tiles necesarios\ndsm = load(\n    items,\n    bbox=bbox,\n    chunks={\"x\": 1024, \"y\": 1024},  # Procesamiento por bloques para eficiencia\n)\n\n# 6. Extraer la banda de elevación y convertir a DataArray para usar con rioxarray\n# El resultado de load() es un Dataset; necesitamos el DataArray de elevación\ndsm = dsm[\"data\"].squeeze()  # squeeze() elimina dimensiones extra\n\n# 7. Recortar el raster a las geometrías exactas de las cuencas\ndsm_clipped = dsm.rio.clip(cuencas_4326.geometry)\n\n# 8. Reproyectar el área recortada al CRS de trabajo (POSGAR 7)\n# Esto es más eficiente porque reproyectamos solo el área de interés\ndsm_clipped_reproj = dsm_clipped.rio.reproject(dst_crs=USE_CRS)\n\n\nLos datos de elevación son un ejemplo de datos continuos, lo que significa que los valores pueden tomar cualquier número dentro de un rango (incluyendo decimales). Estos valores se almacenan como floats (números de punto flotante) en vez de enteros, permitiendo representar mediciones precisas como 15.7 metros o 23.42 metros de elevación.\n\n\nMostrar código\n# TODO: ploteá dsm_clipped_reproj con .plot(), robust=True y cmap='terrain'\ndsm_clipped_reproj.plot(robust=True, cmap='terrain', figsize=(12, 12))\n\n\n\n\n\n\n\n\n\nPara conocer la distribución de valores (promedio, máximo, mínimo, mediano), podemos crear un histograma.\n\n\nMostrar código\n# TODO: imprimí los valores minimo, maximo, mediano y promedio de dsm_clipped_reproj\nprint(f\"Min: {dsm_clipped_reproj.min().values}, Max: {dsm_clipped_reproj.max().values}, Median: {dsm_clipped_reproj.median().values}, Mean: {dsm_clipped_reproj.mean().values}\")\n\n\nMin: -4.3202924728393555, Max: 56.864131927490234, Median: 14.23167085647583, Mean: 14.652371406555176\n\n\n\n\nMostrar código\n# TODO: Crea un histograma de los valores de elevación usando dsm_clipped_reproj.plot.hist() con 50 bins\n# Agrega etiquetas para los ejes x ('Elevación (m)') y y ('Frecuencia'), y un título descriptivo\ndsm_clipped_reproj.plot.hist(bins=50)\nplt.xlabel('Elevación (m)')\nplt.ylabel('Frecuencia')\nplt.title('Distribución de Valores de Elevación')\nplt.show()\n\n\n\n\n\n\n\n\n\nPara saber cómo varían los valores en las distintas cuencas, usamos estadística zonal, calculando el mínimo, máximo, mediano y promedio por cuenca. Podemos crear un gráfico para visualizar, por ejemplo, cuál cuenca tiene la elevación promedio más baja o la mediana más alta.\n\n\nMostrar código\n# Crear una copia independiente de cuencas para evitar modificar el original\ncuencas = cuencas.copy()\n\n# Extraer estadísticas de elevación (min, mean, median, max) para cada polígono de cuenca\nstats = zonal_stats(\n    cuencas,                      # Polígonos de las cuencas\n    dsm_clipped_reproj.values,    # Valores del raster (sin [0])\n    affine=dsm_clipped_reproj.rio.transform(),  # Transformación geoespacial del raster\n    stats=['min', 'mean', 'median', 'max'],  # Estadísticas a calcular\n    nodata=np.nan                 # Valor a ignorar (NoData)\n)\n\n# Agregar las estadísticas calculadas como nuevas columnas en el GeoDataFrame\ncuencas['dsm_min'] = [s['min'] for s in stats]\ncuencas['dsm_mean'] = [s['mean'] for s in stats]\ncuencas['dsm_median'] = [s['median'] for s in stats]\ncuencas['dsm_max'] = [s['max'] for s in stats]\n\n# Mostrar columnas seleccionadas con información de cuencas y estadísticas de elevación\ncuencas[[\"Cuenca\", \"Sistema\", \"Subcuenca\", \"RegiónHí\", \"dsm_min\", \"dsm_mean\", \"dsm_median\", \"dsm_max\"]]\n\n\n\n\n\n\n\n\n\nCuenca\nSistema\nSubcuenca\nRegiónHí\ndsm_min\ndsm_mean\ndsm_median\ndsm_max\n\n\n\n\n83\nCuenca Río Samborombón\nREGION NORESTE\n\nVertiente Río de La Plata y Samborombón\n0.000000\n15.002222\n14.440168\n56.864132\n\n\n72\nArea de Bañados\nREGION NORESTE\n\nVertiente Río de La Plata y Samborombón\n-3.647730\n5.941934\n3.415808\n37.641655\n\n\n54\nCuenca Arroyo El Pescado\nREGION NORESTE\n\nVertiente Río de La Plata y Samborombón\n0.000000\n14.736844\n15.591372\n47.508526\n\n\n38\nCuenca Arroyo Martín-Carnaval\nREGION NORESTE\n\nVertiente Río de La Plata y Samborombón\n1.560721\n21.881409\n22.887115\n52.470333\n\n\n53\nCuenca Arroyo Pereyra\nREGION NORESTE\n\nVertiente Río de La Plata y Samborombón\n2.410506\n22.778730\n23.634939\n44.905403\n\n\n34\nCuenca Arroyo del Gato\nREGION NORESTE\n\nVertiente Río de La Plata y Samborombón\n2.931544\n19.543804\n20.404808\n52.557846\n\n\n35\nCuenca Arroyo del Gato\nREGION NORESTE\n\nVertiente Río de La Plata y Samborombón\n-4.320292\n19.691474\n20.535738\n41.652542\n\n\n129\nCuenca A° Maldonado\nREGION NORESTE\n\nVertiente Río de La Plata y Samborombón\n1.640185\n17.657394\n18.716934\n36.001190\n\n\n36\nCuenca Arroyo Rodriguez-Don Carlos\nREGION NORESTE\n\nVertiente Río de La Plata y Samborombón\n3.994384\n21.402138\n21.700775\n39.326633\n\n\n32\nCuenca Arroyo Rodriguez-Don Carlos\nREGION NORESTE\n\nVertiente Río de La Plata y Samborombón\n-1.119239\n16.013293\n16.204729\n32.383595\n\n\n\n\n\n\n\n\n\nMostrar código\n# TODO: Crea un gráfico de barras de la elevación mediana por cuenca:\n# - Usa cuencas.plot(kind='bar', x='Cuenca', y='dsm_median', figsize=(12, 6), legend=False)\n# - Agrega etiquetas: plt.xlabel('Cuenca') y plt.ylabel('Elevación Mediana (m)')\n# - Rota las etiquetas del eje x: plt.xticks(rotation=45, ha='right')\ncuencas.plot(kind='bar', x='Cuenca', y='dsm_median', figsize=(12, 6), legend=False)\nplt.xlabel('Cuenca')\nplt.ylabel('Elevación Mediana (m)')\nplt.xticks(rotation=45, ha='right')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n5.2.2 2.2: Cobertura del suelo\nLos datos anteriores eran continuos (float, números con decimales). Los rasters también pueden tener datos categóricos, codificados con números enteros que representan categorías.\nImportamos datos de cobertura del suelo del proyecto MapBiomas, que tiene información de Argentina desde 1998 hasta 2022. Son los datos más confiables a 30 metros de resolución disponibles actualmente.\n\n\nMostrar código\n# TODO: Cargar y procesar el raster de cobertura del suelo MapBiomas 2022\n# Sigue el MISMO PATRÓN que usamos para el DSM arriba\n\n# 1. Define la URL del raster como suelo_2022_ruta\nsuelo_2022_ruta = \"https://storage.googleapis.com/mapbiomas-public/initiatives/argentina/collection-1/coverage/argentina_coverage_2022.tif\"\n\n# 2. Abre el raster con rioxarray y chunks de 1024x1024\nsuelo_2022 = rioxarray.open_rasterio(\n    suelo_2022_ruta,\n    chunks={\"x\": 1024, \"y\": 1024},\n)\n\n# 3. Recorta PRIMERO en el CRS nativo del raster (EPSG:4326) y guarda el resultado en suelo_2022_clipped\nsuelo_2022_clipped = suelo_2022.rio.clip(\n    cuencas_4326.geometry.values, \n    from_disk=True,\n)\n\n# 4. Reproyecta el área recortada al USE_CRS de trabajo (POSGAR 7) y guarda el resultado final en suelo_2022\nsuelo_2022 = suelo_2022_clipped.rio.reproject(dst_crs=USE_CRS)\n\n\n\n\nMostrar código\n# Enmascarar valores NoData (255) para excluirlos de la visualización\n# MapBiomas usa 255 como NoData además del NoData estándar\nsuelo_2022_masked = suelo_2022.where(\n    (suelo_2022 != suelo_2022.rio.nodata) & (suelo_2022 != 255)\n)\n\n\nAl plotearlos inicialmente, no es evidente a qué corresponde cada valor.\n\n\nMostrar código\n# TODO: ploteá suelo_2022_masked con .plot()\nsuelo_2022_masked.plot()\n\n\n\n\n\n\n\n\n\nLes proporciono un diccionario del proyecto MapBiomas que traduce entre valores numéricos, categorías y colores. Con esto podemos mapear los datos correctamente.\nAhora vemos un mapa coherente de la cobertura del suelo: zonas urbanizadas, agrícolas, naturales y cuerpos de agua. Discutan con un compañero si los datos parecen lógicos y si pueden identificar el casco urbano, City Bell, Berisso y Ensenada.\n\n\nMostrar código\n# Definir categorías de cobertura del suelo con sus IDs y colores MapBiomas\ncategorias = {\n    'Leñosa cerrada': {'ids': [3], 'color': '#1f8d49'},\n    'Leñosa abierta': {'ids': [4], 'color': '#7dc975'},\n    'Leñosa dispersa': {'ids': [45], 'color': '#807a40'},\n    'Leñosa inundable': {'ids': [6], 'color': '#026975'},\n    'Vegetación no leñosa inundable': {'ids': [11], 'color': '#519799'},\n    'Pastizal': {'ids': [12], 'color': '#d6bc74'},\n    'Estepa': {'ids': [63], 'color': '#ebf8b5'},\n    'Pastura': {'ids': [15], 'color': '#edde8e'},\n    'Agricultura': {'ids': [18], 'color': '#e974ed'},\n    'Plantación forestal': {'ids': [9], 'color': '#7a5900'},\n    'Cultivo arbustivo': {'ids': [36], 'color': '#d082de'},\n    'Mosaico agropecuario': {'ids': [21], 'color': '#ffefc3'},\n    'Área sin vegetación': {'ids': [22], 'color': '#d4271e'},\n    'Río, lago u océano': {'ids': [33], 'color': '#2532e4'},\n    'Hielo y nieve en superficie': {'ids': [34], 'color': '#93dfe6'},\n    'No observado': {'ids': [27], 'color': '#ffffff'}\n}\n\n# Obtener los IDs únicos presentes en los datos\nvalores_unicos = np.unique(suelo_2022_masked.values[~np.isnan(suelo_2022_masked.values)]).astype(int)\nids_presentes = set(valores_unicos)\n\n# Filtrar solo las categorías que aparecen en nuestros datos\ncategorias_presentes = {\n    nombre: info \n    for nombre, info in categorias.items()\n    if any(id in ids_presentes for id in info['ids'])\n}\n\n# Crear mapa de colores: asignar cada ID de píxel a su color correspondiente\ncolores_por_id = {}\nfor info in categorias.values():\n    for id_pixel in info['ids']:\n        colores_por_id[id_pixel] = info['color']\n\n# Construir el colormap para matplotlib\nids_ordenados = sorted(colores_por_id.keys())\ncmap = mcolors.ListedColormap([colores_por_id[i] for i in ids_ordenados])\nnorm = mcolors.BoundaryNorm(ids_ordenados, cmap.N)\n\n# Visualizar el raster de cobertura del suelo\nfig, ax = plt.subplots(figsize=(20, 20))\n\nsuelo_2022_masked.plot(\n    ax=ax,\n    cmap=cmap,\n    norm=norm,\n    add_colorbar=False\n)\n\n# Crear leyenda solo con las categorías presentes\nleyenda = [\n    plt.Rectangle((0,0), 1, 1, facecolor=info['color'], label=nombre) \n    for nombre, info in categorias_presentes.items()\n]\n\nax.legend(handles=leyenda, loc='lower center', bbox_to_anchor=(0.5, -0.1), \n          ncol=3, frameon=False)\n\nplt.title('Cobertura del Suelo - MapBiomas 2022')\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nPodemos analizar la distribución calculando el porcentaje de cada clase de cobertura.\n\n\nMostrar código\n# Analizar la distribución de cobertura del suelo en toda el área de estudio\n\n# Paso 1: Extraer valores del raster y eliminar NoData\nvalores = suelo_2022_masked.values.flatten()\nvalores = valores[~np.isnan(valores)]\nprint(f\"Total de píxeles válidos: {len(valores):,}\")\nprint(f\"Rango de valores: {valores.min():.0f} - {valores.max():.0f}\")\n\n\nTotal de píxeles válidos: 22,224,274\nRango de valores: 0 - 33\n\n\n\n\nMostrar código\n# Paso 2: Contar píxeles de cada ID único\nids_unicos, conteos = np.unique(valores, return_counts=True)\nprint(f\"\\nIDs únicos encontrados: {ids_unicos}\")\nprint(f\"Conteo por ID:\")\nfor id_pixel, conteo in zip(ids_unicos, conteos):\n    print(f\"  ID {id_pixel}: {conteo:,} píxeles\")\n\n\n\nIDs únicos encontrados: [ 0.  3.  4.  9. 11. 12. 15. 18. 22. 33.]\nConteo por ID:\n  ID 0.0: 12,667,423 píxeles\n  ID 3.0: 132,117 píxeles\n  ID 4.0: 123,848 píxeles\n  ID 9.0: 57,940 píxeles\n  ID 11.0: 408,544 píxeles\n  ID 12.0: 5,256,181 píxeles\n  ID 15.0: 3,017,618 píxeles\n  ID 18.0: 271,637 píxeles\n  ID 22.0: 274,195 píxeles\n  ID 33.0: 14,771 píxeles\n\n\n\n\nMostrar código\n# Paso 3: Agrupar IDs por categoría de cobertura\nconteos_por_categoria = {}\nfor nombre, info in categorias.items():\n    # Sumar píxeles de todos los IDs que pertenecen a esta categoría\n    total = sum(conteos[ids_unicos == id_pixel][0] if id_pixel in ids_unicos else 0 \n                for id_pixel in info['ids'])\n    if total &gt; 0:\n        conteos_por_categoria[nombre] = {\n            'conteo': total,\n            'color': info['color']\n        }\n\nprint(f\"\\nCategorías encontradas: {len(conteos_por_categoria)}\")\nfor nombre, datos in conteos_por_categoria.items():\n    print(f\"  {nombre}: {datos['conteo']:,} píxeles\")\n\n\n\nCategorías encontradas: 9\n  Leñosa cerrada: 132,117 píxeles\n  Leñosa abierta: 123,848 píxeles\n  Vegetación no leñosa inundable: 408,544 píxeles\n  Pastizal: 5,256,181 píxeles\n  Pastura: 3,017,618 píxeles\n  Agricultura: 271,637 píxeles\n  Plantación forestal: 57,940 píxeles\n  Área sin vegetación: 274,195 píxeles\n  Río, lago u océano: 14,771 píxeles\n\n\n\n\nMostrar código\n# Paso 4: Calcular porcentajes\ntotal_pixeles = sum(cat['conteo'] for cat in conteos_por_categoria.values())\nfor nombre in conteos_por_categoria:\n    porcentaje = (conteos_por_categoria[nombre]['conteo'] / total_pixeles) * 100\n    conteos_por_categoria[nombre]['porcentaje'] = porcentaje\n\nprint(f\"\\nDistribución porcentual:\")\nfor nombre, datos in conteos_por_categoria.items():\n    print(f\"  {nombre}: {datos['porcentaje']:.2f}%\")\n\n\n\nDistribución porcentual:\n  Leñosa cerrada: 1.38%\n  Leñosa abierta: 1.30%\n  Vegetación no leñosa inundable: 4.27%\n  Pastizal: 55.00%\n  Pastura: 31.58%\n  Agricultura: 2.84%\n  Plantación forestal: 0.61%\n  Área sin vegetación: 2.87%\n  Río, lago u océano: 0.15%\n\n\n\n\nMostrar código\n# Paso 5: Ordenar de mayor a menor porcentaje para visualización\ncategorias_ordenadas = sorted(conteos_por_categoria.items(), \n                               key=lambda x: x[1]['porcentaje'], \n                               reverse=True)\n\nprint(\"\\nTop 5 coberturas más frecuentes:\")\nfor i, (nombre, datos) in enumerate(categorias_ordenadas[:5], 1):\n    print(f\"{i}. {nombre}: {datos['porcentaje']:.2f}%\")\n\n\n\nTop 5 coberturas más frecuentes:\n1. Pastizal: 55.00%\n2. Pastura: 31.58%\n3. Vegetación no leñosa inundable: 4.27%\n4. Área sin vegetación: 2.87%\n5. Agricultura: 2.84%\n\n\n\n\nMostrar código\n# Crear gráfico de barras horizontal\nfig, ax = plt.subplots(figsize=(12, 8))\n\nnombres = [cat[0] for cat in categorias_ordenadas]\nporcentajes = [cat[1]['porcentaje'] for cat in categorias_ordenadas]\ncolores = [cat[1]['color'] for cat in categorias_ordenadas]\n\nbarras = ax.barh(nombres, porcentajes, color=colores, edgecolor='black')\n\nax.set_xlabel('Porcentaje (%)', fontsize=12)\nax.set_ylabel('Tipo de Cobertura', fontsize=12)\nax.set_title('Distribución de Cobertura del Suelo - La Plata (MapBiomas 2022)', \n             fontsize=14, fontweight='bold')\nax.grid(True, alpha=0.3, axis='x')\n\n# Agregar etiquetas de porcentaje en las barras\nfor barra, pct in zip(barras, porcentajes):\n    ax.text(pct + 0.5, barra.get_y() + barra.get_height()/2, \n            f'{pct:.1f}%', va='center', fontsize=10)\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nFinalmente, hacemos estadísticas zonales para extraer la clase dominante y segunda clase dominante por cuenca.\n\n\nMostrar código\n# Analizar la cobertura del suelo dominante por cuenca usando estadísticas zonales\n\n# Paso 1: Crear mapeo de IDs de píxel a categorías\npixel_a_categoria = {}\nfor nombre, info in categorias.items():\n    for id_pixel in info['ids']:\n        pixel_a_categoria[id_pixel] = nombre\n\nprint(f\"Mapeo creado para {len(pixel_a_categoria)} IDs de píxel\")\nprint(f\"Ejemplo: ID 3 → {pixel_a_categoria.get(3)}\")\n\n\nMapeo creado para 16 IDs de píxel\nEjemplo: ID 3 → Leñosa cerrada\n\n\n\n\nMostrar código\n# Paso 2: Calcular estadísticas zonales categóricas\n# Esto cuenta cuántos píxeles de cada clase hay en cada cuenca\nestadisticas_cuencas = zonal_stats(\n    cuencas,\n    suelo_2022_masked.values[0],\n    affine=suelo_2022_masked.rio.transform(),\n    categorical=True,  # Contar píxeles por categoría\n    nodata=0  # MapBiomas usa 0 para NoData\n)\n\nprint(f\"\\nEstadísticas calculadas para {len(estadisticas_cuencas)} cuencas\")\nprint(f\"\\nEjemplo de resultado para la primera cuenca:\")\nprint(f\"  IDs presentes: {list(estadisticas_cuencas[0].keys())}\")\nprint(f\"  Conteos: {list(estadisticas_cuencas[0].values())}\")\n\n\n\nEstadísticas calculadas para 10 cuencas\n\nEjemplo de resultado para la primera cuenca:\n  IDs presentes: [3.0, 4.0, 9.0, 11.0, 12.0, 15.0, 18.0, 22.0, 33.0]\n  Conteos: [36326, 70874, 24574, 384685, 4473355, 2708555, 223092, 52982, 4363]\n\n\n\n\nMostrar código\n# Paso 4: Identificar cobertura dominante y segunda más común por cuenca\ncobertura_dominante = []\ncobertura_secundaria = []\n\nfor estadisticas in estadisticas_cuencas:\n    if estadisticas:\n        # Ordenar por conteo de píxeles (mayor a menor)\n        clases_ordenadas = sorted(estadisticas.items(), key=lambda x: x[1], reverse=True)\n        \n        # Obtener clase dominante (primera)\n        id_dominante = clases_ordenadas[0][0]\n        clase_dominante = pixel_a_categoria.get(id_dominante, 'Desconocido')\n        cobertura_dominante.append(clase_dominante)\n        \n        # Obtener segunda clase más común\n        if len(clases_ordenadas) &gt; 1:\n            id_secundario = clases_ordenadas[1][0]\n            clase_secundaria = pixel_a_categoria.get(id_secundario, 'Desconocido')\n            cobertura_secundaria.append(clase_secundaria)\n        else:\n            cobertura_secundaria.append('N/A')\n    else:\n        cobertura_dominante.append('Sin Datos')\n        cobertura_secundaria.append('Sin Datos')\n\nprint(f\"\\nCoberturas identificadas:\")\nprint(f\"  Dominantes únicas: {set(cobertura_dominante)}\")\nprint(f\"  Secundarias únicas: {set(cobertura_secundaria)}\")\n\n\n\nCoberturas identificadas:\n  Dominantes únicas: {'Pastizal', 'Área sin vegetación'}\n  Secundarias únicas: {'Pastizal', 'Pastura', 'Área sin vegetación', 'Leñosa cerrada'}\n\n\n\n\nMostrar código\n# Paso 5: Agregar resultados al GeoDataFrame y ordenar por área\ncuencas['cobertura_dominante'] = cobertura_dominante\ncuencas['cobertura_secundaria'] = cobertura_secundaria\ncuencas = cuencas.sort_values('area_m', ascending=False)\n\nprint(\"\\nResultados por cuenca (ordenadas por área):\")\ncuencas[[\"Cuenca\", \"Sistema\", \"Subcuenca\", \"RegiónHí\", \"area_m\", 'cobertura_dominante', 'cobertura_secundaria']]\n\n\n\nResultados por cuenca (ordenadas por área):\n\n\n\n\n\n\n\n\n\nCuenca\nSistema\nSubcuenca\nRegiónHí\narea_m\ncobertura_dominante\ncobertura_secundaria\n\n\n\n\n83\nCuenca Río Samborombón\nREGION NORESTE\n\nVertiente Río de La Plata y Samborombón\n5.643661e+09\nPastizal\nPastura\n\n\n72\nArea de Bañados\nREGION NORESTE\n\nVertiente Río de La Plata y Samborombón\n4.471614e+08\nPastizal\nÁrea sin vegetación\n\n\n54\nCuenca Arroyo El Pescado\nREGION NORESTE\n\nVertiente Río de La Plata y Samborombón\n3.574595e+08\nPastizal\nPastura\n\n\n38\nCuenca Arroyo Martín-Carnaval\nREGION NORESTE\n\nVertiente Río de La Plata y Samborombón\n8.003825e+07\nPastizal\nPastura\n\n\n53\nCuenca Arroyo Pereyra\nREGION NORESTE\n\nVertiente Río de La Plata y Samborombón\n6.055430e+07\nPastizal\nLeñosa cerrada\n\n\n34\nCuenca Arroyo del Gato\nREGION NORESTE\n\nVertiente Río de La Plata y Samborombón\n5.267390e+07\nÁrea sin vegetación\nPastizal\n\n\n35\nCuenca Arroyo del Gato\nREGION NORESTE\n\nVertiente Río de La Plata y Samborombón\n4.267169e+07\nPastizal\nÁrea sin vegetación\n\n\n129\nCuenca A° Maldonado\nREGION NORESTE\n\nVertiente Río de La Plata y Samborombón\n3.575884e+07\nPastizal\nÁrea sin vegetación\n\n\n36\nCuenca Arroyo Rodriguez-Don Carlos\nREGION NORESTE\n\nVertiente Río de La Plata y Samborombón\n3.283828e+07\nPastizal\nPastura\n\n\n32\nCuenca Arroyo Rodriguez-Don Carlos\nREGION NORESTE\n\nVertiente Río de La Plata y Samborombón\n8.862363e+06\nPastizal\nPastura\n\n\n\n\n\n\n\nLa próxima semana seguimos con análisis más profundos y operaciones más complejas, incorporando más fuentes de Argentina y globales para profundizar en el análisis de datos geoespaciales aplicados a los riesgos climáticos.",
    "crumbs": [
      "Python Geoespacial",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>ACP 166: Datos abiertos para ciudades resilientes</span>"
    ]
  },
  {
    "objectID": "riesgo-climatico/exposicion.html",
    "href": "riesgo-climatico/exposicion.html",
    "title": "7  Exposición",
    "section": "",
    "text": "Mostrar código\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport rasterstats\nfrom rasterio.features import rasterize\n\n\nimport rioxarray\n\n\nUSE_CRS = \"EPSG:5347\" # posgar para esperanza\nTRANSFORM = \"\"\nSHAPE = \"\"\nNODATA = 0\nDTYPE = int\nALL_TOUCHED = False\n\n\n\n\nMostrar código\ndatos_censales = gpd.read_parquet(\n    \"/home/nissim/Documents/dev/fulbright/ciut-redatam/datos_censales_2022_geo.parquet\"\n)\n\ndatos_censales = datos_censales.to_crs(USE_CRS)\n\n\n\n\nMostrar código\nfrom io import BytesIO, StringIO\nfrom owslib.wfs import WebFeatureService\n\ndef wfs_to_gdf(\n    wfs_url: str, layer_name: str, srs: str = \"EPSG:4326\"\n) -&gt; gpd.GeoDataFrame:\n    \"\"\"\n    Descarga una capa WFS y la devuelve como GeoDataFrame.\n\n    Args:\n        wfs_url (str): URL del servicio WFS.\n        layer_name (str): Nombre de la capa (typename).\n        srs (str): Código EPSG del sistema de referencia de coordenadas.\n\n    Returns:\n        gpd.GeoDataFrame: Capa descargada como GeoDataFrame.\n    \"\"\"\n    wfs = WebFeatureService(url=wfs_url, version=\"2.0.0\")\n    response = wfs.getfeature(typename=layer_name, srsname=srs)\n    gdf = gpd.read_file(BytesIO(response.read()))\n    return gdf\n\n\n\n\nMostrar código\n# Clean base URL (remove all WFS parameters)\nbase_url = \"https://wms.ign.gob.ar/geoserver/ign/ows\"\n\n# Use the function with proper parameters\nmunis = wfs_to_gdf(\n    wfs_url=base_url,\n    layer_name=\"ign:municipio\", \n    srs=\"EPSG:4326\"\n)\n\n\n\n\nMostrar código\nesperanza = munis[munis['nam'] == 'Esperanza']\nesperanza = esperanza.to_crs(USE_CRS)\n\n\n\n\nMostrar código\nesperanza.plot()\n\n\n\n\n\n\n\n\n\n\n\nMostrar código\ndatos_censales_esperanza = datos_censales.clip(esperanza)\n\n\n\n\nMostrar código\ndatos_censales_esperanza.plot()\n\n\n\n\n\n\n\n\n\n\n\nMostrar código\n# Load GHSL data with dask chunking for memory efficiency\nghsl = rioxarray.open_rasterio(\n    \"/home/nissim/Documents/dev/fulbright/ciut-riesgo/notebooks/data/GHS_POP_E2025_GLOBE_R2023A_54009_100_V1_0_R13_C13/GHS_POP_E2025_GLOBE_R2023A_54009_100_V1_0_R13_C13.tif\",\n    chunks={\"x\": 1024, \"y\": 1024},  # Adjust chunk size based on your memory constraints\n)\n\n# Reproject to your target CRS with streaming\nghsl = ghsl.rio.reproject(dst_crs=USE_CRS)\n\n# Clip GHSL data to ONLY the Partido de La Plata boundaries\n# This will remove any GHSL data outside the partido\nghsl_clipped = ghsl.rio.clip(\n    [esperanza.geometry.iloc[0]],  # Use the actual La Plata partido geometry\n    from_disk=True,  # Process from disk to avoid loading entire dataset into memory\n)\n\n\n\n\nMostrar código\n# Mask values &lt;= 0, replacing them with NaN\nghsl_masked = ghsl_clipped.where(ghsl_clipped &gt; 0)\nghsl_masked.plot()\n\n\n\n\n\n\n\n\n\n\n\nMostrar código\n# Step 1: Calculate the total GHSL population per barrio popular using zonal statistics\n\n# Convert to the format expected by rasterstats\ngeometries = [geom for geom in datos_censales_esperanza.geometry]\n\n# Use rasterstats for vectorized zonal statistics\nstats = rasterstats.zonal_stats(\n    geometries,\n    ghsl_clipped.values[0],  # rasterstats expects 2D array\n    affine=ghsl_clipped.rio.transform(),\n    stats=[\"sum\"],\n    nodata=ghsl_clipped.rio.nodata,\n)\n\n# Extract the sum values\nghsl_totals = [stat[\"sum\"] if stat[\"sum\"] is not None else 0 for stat in stats]\n\n\n\n\nMostrar código\n# Add the GHSL population estimates as a new column\ndatos_censales_esperanza[\"ghsl_pop_est\"] = ghsl_totals\n\n\n# Get the reference raster properties from GHSL data\nreference_raster = ghsl_clipped\nreference_transform = reference_raster.rio.transform()\nreference_crs = reference_raster.rio.crs\nreference_shape = reference_raster.shape[1:]  # Get 2D shape (height, width)\n\n\n# Prepare geometries and values for rasterization\ngeometries_ghsl = [\n    (geom, value)\n    for geom, value in zip(\n        datos_censales_esperanza.geometry, datos_censales_esperanza[\"ghsl_pop_est\"]\n    )\n]\ngeometries_pop = [\n    (geom, value)\n    for geom, value in zip(\n        datos_censales_esperanza.geometry, datos_censales_esperanza[\"POB_TOT_P\"]\n    )\n]\n\n\n\n\nMostrar código\n# Create GHSL population raster\nghsl_pop_raster = rasterize(\n    geometries_ghsl,\n    out_shape=reference_shape,\n    transform=reference_transform,\n    fill=0,\n    dtype=np.float32,\n    all_touched=True,\n)\n\n# Create pop aproximadas raster\npop_raster = rasterize(\n    geometries_pop,\n    out_shape=reference_shape,\n    transform=reference_transform,\n    fill=0,\n    dtype=np.float32,\n    all_touched=True,\n)\n\n\n# Step 1: Divide original GHSL by the barrio-level GHSL to get fractional population\n# Use masking to avoid division on invalid cells\nmask = (ghsl_clipped.values[0] != -200) & (ghsl_pop_raster &gt; 0.1)\nghsl_fractional = np.full_like(ghsl_clipped.values[0], -200, dtype=np.float64)\nghsl_fractional[mask] = ghsl_clipped.values[0][mask] / ghsl_pop_raster[mask]\n\n# Step 2: Multiply fractional population by pop aproximadas to get downscaled data\nmask2 = (ghsl_fractional != -200) & (pop_raster &gt; 0)\npop_downscaled = np.full_like(ghsl_clipped.values[0], -200, dtype=np.float64)\npop_downscaled[mask2] = ghsl_fractional[mask2] * pop_raster[mask2]\n\n# Verify the results - exclude -200 from range calculations\nghsl_valid = ghsl_clipped.values[0] != -200\nfractional_valid = ghsl_fractional != -200\ndownscaled_valid = pop_downscaled != -200\n\n\n\n\nMostrar código\n# Calculate total from downscaled data (excluding nodata values)\ndownscaled_total = pop_downscaled[pop_downscaled != -200].sum()\n\n# Calculate total from census data (assuming you have this in your geodataframe)\n# This depends on which column contains the population in your census data\ncensus_total = datos_censales_esperanza['POB_TOT_P'].sum()  # Replace with actual column name\n\nprint(f\"Downscaled population total: {downscaled_total:,.0f}\")\nprint(f\"Census population total: {census_total:,.0f}\")\nprint(f\"Difference: {downscaled_total - census_total:,.0f}\")\nprint(f\"Ratio (downscaled/census): {downscaled_total/census_total:.2f}\")\n\n\nDownscaled population total: 47,204\nCensus population total: 50,324\nDifference: -3,120\nRatio (downscaled/census): 0.94\n\n\n\n\nMostrar código\nimport xarray as xr\n\n# Convert the downscaled numpy array back to xarray DataArray\npop_downscaled_da = xr.DataArray(\n    pop_downscaled,\n    coords={'y': ghsl_clipped.y, 'x': ghsl_clipped.x},\n    dims=['y', 'x'],\n    attrs=ghsl_clipped.attrs.copy()\n)\n\n# Mask out nodata values (-200) and values &lt;= 0\npop_downscaled_masked = pop_downscaled_da.where(\n    (pop_downscaled_da &gt; 0) & (pop_downscaled_da != -200)\n)\n\n# Plot with better visualization\npop_downscaled_masked.plot(\n    figsize=(12, 8),\n    cmap='plasma',\n    cbar_kwargs={'label': 'Downscaled Population'}\n)\nplt.title('Downscaled Population Data')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nMostrar código\nimport matplotlib.pyplot as plt\n\nfrom shapely.geometry import box\nimport geopandas as gpd\nimport os\n\n\nfrom matplotlib_map_utils import north_arrow, scale_bar\n\n\nimport contextily as cx\n\n\nimport pandas as pd\nimport contextily as ctx\n\n\nimport boto3\nimport duckdb\nimport s2sphere\nfrom botocore.config import Config\n\n\nfrom io import BytesIO\nfrom owslib.wfs import WebFeatureService\n\n\nUSE_CRS = \"EPSG:5349\"  # POSGAR 2007 / Argentina 4\nWEB_MERCATOR_CRS = \"EPSG:3857\"  # visualización\nWGS84_CRS = \"EPSG:4326\"  # para llamadas API\n\nBASE_RUTA = \"/home/nissim/Documents/dev/fulbright/ciut-riesgo\"\nDATA_RUTA = f\"{BASE_RUTA}/notebooks/data\"\nPARTIDOS_RUTA = f\"{DATA_RUTA}/pba_partidos.geojson\"\nEDIFICACIONES_RUTA = f\"{BASE_RUTA}/notebooks/edificaciones_filtered.parquet\"\n\nPARTIDOS_WFS_URL = \"https://geo.arba.gov.ar/geoserver/idera/wfs\"\n\n\n\n---------------------------------------------------------------------------\nModuleNotFoundError                       Traceback (most recent call last)\nCell In[1], line 8\n      4 import geopandas as gpd\n      5 import os\n----&gt; 8 from matplotlib_map_utils import north_arrow, scale_bar\n     11 import contextily as cx\n     14 import pandas as pd\n\nModuleNotFoundError: No module named 'matplotlib_map_utils'\n\n\n\n\n\nMostrar código\nif os.path.exists(PARTIDOS_RUTA):\n    print(\"Cargando datos de partidos existentes...\")\n    partidos = gpd.read_file(PARTIDOS_RUTA)\nelse:\n    print(\"Descargando datos de partidos desde servicio WFS...\")\n\n    # Conectar al servicio WFS\n    wfs = WebFeatureService(url=PARTIDOS_WFS_URL, version=\"2.0.0\")\n\n    # Descargar la capa de departamentos\n    response = wfs.getfeature(typename=\"idera:Departamento\", srsname=\"EPSG:5347\")\n\n    # Convertir a GeoDataFrame\n    partidos = gpd.read_file(BytesIO(response.read()))\n\n    # Guardar para uso futuro\n    partidos.to_file(PARTIDOS_RUTA, driver=\"GeoJSON\")\n    print(f\"Descargados {len(partidos)} partidos\")\n\npartidos = partidos.to_crs(USE_CRS)\naoi = partidos[partidos[\"fna\"] == \"Partido de La Plata\"]\n\n# Obtener la geometría principal\nmain_geom = aoi.geometry.iloc[0]\n\n# Si es un MultiPolygon, mantener solo el polígono más grande (el partido principal)\n# Esto elimina la pequeña isla que aparece en los datos\nif main_geom.geom_type == \"MultiPolygon\":\n    # Obtener todos los polígonos y mantener el que tenga mayor área\n    largest_polygon = max(main_geom.geoms, key=lambda p: p.area)\n    aoi = aoi.copy()  # Crear una copia para evitar SettingWithCopyWarning\n    aoi.loc[aoi.index[0], \"geometry\"] = largest_polygon\n\naoi_bbox = aoi.geometry.iloc[0]\n\nif os.path.exists(EDIFICACIONES_RUTA):\n    print(\"Cargando datos de edificaciones existentes...\")\n    edificaciones = gpd.read_parquet(EDIFICACIONES_RUTA)\nelse:\n    print(\"Obteniendo datos de edificaciones del dataset VIDA...\")\n\n    # Paso 1: Obtener el punto central de La Plata en coordenadas WGS84\n    aoi_buffered = aoi.buffer(500)  # Agregar buffer de 500m para obtener datos\n    center = aoi_buffered.to_crs(WEB_MERCATOR_CRS).union_all().centroid\n    center_wgs84 = (\n        gpd.GeoDataFrame(geometry=[center], crs=WEB_MERCATOR_CRS)\n        .to_crs(WGS84_CRS)\n        .geometry.iloc[0]\n    )\n    print(f\"Coordenadas del centro: {center_wgs84.y:.4f}, {center_wgs84.x:.4f}\")\n\n    # Paso 2: Encontrar la celda S2 apropiada para particionamiento espacial\n    cell = s2sphere.CellId.from_lat_lng(\n        s2sphere.LatLng.from_degrees(center_wgs84.y, center_wgs84.x)\n    ).parent(10)\n    print(f\"ID de celda S2: {cell.id()}\")\n\n    # Paso 3: Obtener bounding box en WGS84 para filtrado espacial\n    bounds = aoi_buffered.to_crs(WGS84_CRS).total_bounds\n    print(f\"Caja delimitadora: {bounds}\")\n\n    # Paso 4: Conectar a S3 y encontrar particiones disponibles\n    s3 = boto3.client(\n        \"s3\",\n        endpoint_url=\"https://data.source.coop\",\n        aws_access_key_id=\"\",\n        aws_secret_access_key=\"\",\n        config=Config(s3={\"addressing_style\": \"path\"}),\n    )\n\n    # Obtener lista de particiones S2 disponibles\n    partitions = {\n        obj[\"Key\"].split(\"/\")[-1].replace(\".parquet\", \"\")\n        for obj in s3.list_objects_v2(\n            Bucket=\"vida\",\n            Prefix=\"google-microsoft-osm-open-buildings/geoparquet/by_country_s2/country_iso=ARG/\",\n        ).get(\"Contents\", [])\n    }\n    print(f\"Encontradas {len(partitions)} particiones disponibles\")\n\n    # Paso 5: Encontrar la partición padre apropiada\n    parent_id = next(\n        str(cell.parent(level).id())\n        for level in range(10, 0, -1)\n        if str(cell.parent(level).id()) in partitions\n    )\n    print(f\"Usando partición: {parent_id}\")\n\n    # Paso 6: Configurar DuckDB para consultas espaciales\n    con = duckdb.connect()\n    print(\"Configurando DuckDB con extensiones espaciales...\")\n    for cmd in [\n        \"INSTALL spatial\",\n        \"LOAD spatial\",\n        \"INSTALL httpfs\",\n        \"LOAD httpfs\",\n        \"SET s3_region='us-east-1'\",\n        \"SET s3_endpoint='data.source.coop'\",\n        \"SET s3_use_ssl=true\",\n        \"SET s3_url_style='path'\",\n    ]:\n        con.execute(cmd)\n\n    # Paso 7: Consultar y filtrar edificaciones dentro de nuestra área de interés\n    print(\"Consultando edificaciones dentro del área de La Plata...\")\n    query = f\"\"\"\n    COPY (SELECT * FROM 's3://vida/google-microsoft-osm-open-buildings/geoparquet/by_country_s2/country_iso=ARG/{parent_id}.parquet'\n          WHERE bbox.xmax &gt;= {bounds[0]} AND bbox.xmin &lt;= {bounds[2]} AND\n                bbox.ymax &gt;= {bounds[1]} AND bbox.ymin &lt;= {bounds[3]}\n    ) TO '{EDIFICACIONES_RUTA}' (FORMAT PARQUET);\n    \"\"\"\n\n    con.execute(query)\n\n    # Paso 8: Cargar los datos filtrados y convertir a GeoDataFrame\n    df = pd.read_parquet(EDIFICACIONES_RUTA)\n    df[\"geometry\"] = gpd.GeoSeries.from_wkb(df[\"geometry\"])\n    edificaciones = gpd.GeoDataFrame(df, geometry=\"geometry\", crs=WGS84_CRS)\n\n    print(f\"Obtenidas {len(edificaciones)} edificaciones\")\n    con.close()\n\n\n# Filtrar edificaciones para incluir solo las que están dentro de los límites de La Plata\nedificaciones_proj = edificaciones.to_crs(USE_CRS)\nedificaciones_proj = edificaciones_proj[\n    edificaciones_proj.geometry.intersects(aoi_bbox)\n]\n\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[2], line 1\n----&gt; 1 if os.path.exists(PARTIDOS_RUTA):\n      2     print(\"Cargando datos de partidos existentes...\")\n      3     partidos = gpd.read_file(PARTIDOS_RUTA)\n\nNameError: name 'PARTIDOS_RUTA' is not defined\n\n\n\n\n\nMostrar código\n# Obtener límites de La Plata y convertir a Web Mercator para visualización\naoi_bounds = aoi_bbox.bounds\ntemp_bounds = gpd.GeoDataFrame(\n    geometry=[box(aoi_bounds[0], aoi_bounds[1], aoi_bounds[2], aoi_bounds[3])],\n    crs=USE_CRS,\n)\nbounds_3857 = temp_bounds.to_crs(WEB_MERCATOR_CRS).total_bounds\n\nfig, ax = plt.subplots(figsize=(12, 10))\nax.set_xlim(bounds_3857[0] - 500, bounds_3857[2] + 500)\nax.set_ylim(bounds_3857[1] - 500, bounds_3857[3] + 500)\n\ncx.add_basemap(\n    ax,\n    crs=WEB_MERCATOR_CRS,\n    source=ctx.providers.CartoDB.PositronNoLabels,\n    attribution=\"Datos: VIDA (2023), IGN (2025) | Mapa base: Carto (2025)\",\n)\n\nscale_bar(\n    ax=ax,\n    location=\"upper left\",\n    style=\"ticks\",\n    bar={\n        \"projection\": \"EPSG:3857\",\n        \"tickcolors\": \"black\",\n        \"basecolors\": \"black\",\n        \"minor_type\": \"none\",\n        \"length\": 0.20,\n    },\n    labels={\"style\": \"first_last\"},\n)\n\n# Add north arrow\nnorth_arrow(\n    ax,\n    location=\"upper right\",\n    scale=0.3,\n    rotation={\"degrees\": 0},\n    base={\"facecolor\": \"none\", \"edgecolor\": \"black\", \"linewidth\": 1},\n    fancy=True,\n    shadow=True,\n    label=False,\n)\n\naoi_3857 = aoi.to_crs(WEB_MERCATOR_CRS)\naoi_3857.plot(\n    ax=ax,\n    facecolor=\"none\",\n    edgecolor=\"black\",\n    linewidth=0.5,\n    linestyle=\"--\",\n    legend=False,\n    zorder=5,\n)\n\nedificaciones_3857 = edificaciones_proj.to_crs(WEB_MERCATOR_CRS)\nedificaciones_3857.plot(ax=ax, facecolor=\"grey\", edgecolor=\"none\", alpha=0.7)\n\nax.set_title(\"Huellas de edificios\", fontsize=16, fontweight=\"bold\", pad=20)\nax.set_axis_off()\n\nplt.tight_layout()\nplt.show()",
    "crumbs": [
      "Riesgo Climático para Ciudades",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Exposición</span>"
    ]
  },
  {
    "objectID": "riesgo-climatico/vulnerabilidad.html",
    "href": "riesgo-climatico/vulnerabilidad.html",
    "title": "8  Vulnerabilidad",
    "section": "",
    "text": "Mostrar código\n# import villa del rosario boundaries\n# create bounding box\n# use this to spatially query the census tract geoms in AWS\n# pull in the index of material privation from AWS, calculating a poverty rate (fraction of total hogares)\n# map at tract level\n# maybe rank? or jsut score 0 to 1, actually, instead of 0 to 100\n\n# then we will be able to simply report:\n    # - total pop exposed to each hazard level\n    # - total pop with certain poverty level exposed to each hazard level\n\n\n\n\nMostrar código\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport rasterstats\nfrom rasterio.features import rasterize\nfrom io import BytesIO\nfrom owslib.wfs import WebFeatureService\n\nimport rioxarray\nimport contextily as ctx\nfrom shapely.geometry import box\nimport xarray as xr\n\n\nUSE_CRS = \"EPSG:5347\"  # posgar para esperanza\nWEB_MERCATOR_CRS = \"EPSG:3857\"\n\nDEFAULT_FIGSIZE = (12, 10)\nMAP_PADDING = 500\nPLASMA_CMAP = plt.cm.plasma\n\n\n\n\nMostrar código\ndef setup_base_map(\n    figsize=None, bounds=None, boundary_gdf=None, padding_x=None, padding_y=None\n):\n    \"\"\"Create figure and set up basic map boundaries with padding.\"\"\"\n    if figsize is None:\n        figsize = DEFAULT_FIGSIZE\n    if padding_x is None:\n        padding_x = MAP_PADDING\n    if padding_y is None:\n        padding_y = MAP_PADDING\n\n    if bounds is None and boundary_gdf is not None:\n        bounds = boundary_gdf.total_bounds\n\n    # Convert bounds to Web Mercator for basemap compatibility\n    if bounds is not None:\n        # Create a temporary GeoDataFrame with the bounds to reproject\n        temp_bounds = gpd.GeoDataFrame(\n            geometry=[box(bounds[0], bounds[1], bounds[2], bounds[3])], crs=USE_CRS\n        )\n        bounds_3857 = temp_bounds.to_crs(WEB_MERCATOR_CRS).total_bounds\n    else:\n        bounds_3857 = bounds\n\n    fig, ax = plt.subplots(figsize=figsize)\n    ax.set_xlim(bounds_3857[0] - padding_x, bounds_3857[2] + padding_x)\n    ax.set_ylim(bounds_3857[1] - padding_y, bounds_3857[3] + padding_y)\n    return fig, ax\n\n\ndef add_basemap(ax, zoom=13):\n    \"\"\"Add CartoDB basemap to the axes.\"\"\"\n\n    ctx.add_basemap(\n        ax,\n        source=ctx.providers.CartoDB.PositronNoLabels,\n        zorder=0,\n        zoom=zoom,\n    )\n\n    return ax\n\n\ndef add_north_arrow(ax, x=0.95, y=0.05, arrow_length=0.04):\n    \"\"\"Add a north arrow to the map.\"\"\"\n    ax.annotate(\n        \"N\",\n        xy=(x, y),\n        xytext=(x, y - arrow_length),\n        arrowprops=dict(facecolor=\"black\", width=3, headwidth=10),\n        ha=\"center\",\n        va=\"center\",\n        fontsize=14,\n        xycoords=ax.transAxes,\n    )\n\n\ndef add_boundary_outline(ax, boundary_gdf, crs=\"EPSG:3857\"):\n    \"\"\"Add the outline of a boundary geodataframe to a map.\"\"\"\n    boundary_3857 = boundary_gdf.to_crs(crs)\n    boundary_3857.plot(\n        ax=ax,\n        facecolor=\"none\",\n        edgecolor=\"black\",\n        linewidth=0.5,\n        linestyle=\"--\",\n        legend=False,\n        zorder=5,\n    )\n\n\ndef create_consistent_map(title, boundary_gdf, bounds=None):\n    \"\"\"Create a map with consistent styling and basemap.\"\"\"\n    fig, ax = setup_base_map(bounds=bounds, boundary_gdf=boundary_gdf)\n\n    add_basemap(ax)\n\n    add_north_arrow(ax)\n\n    add_boundary_outline(ax, boundary_gdf)\n\n    ax.set_title(title, fontsize=16, fontweight=\"bold\", pad=20)\n\n    ax.set_axis_off()\n\n    return fig, ax\n\n\ndef wfs_to_gdf(\n    wfs_url: str, layer_name: str, srs: str = \"EPSG:4326\"\n) -&gt; gpd.GeoDataFrame:\n    \"\"\"\n    Descarga una capa WFS y la devuelve como GeoDataFrame.\n\n    Args:\n        wfs_url (str): URL del servicio WFS.\n        layer_name (str): Nombre de la capa (typename).\n        srs (str): Código EPSG del sistema de referencia de coordenadas.\n\n    Returns:\n        gpd.GeoDataFrame: Capa descargada como GeoDataFrame.\n    \"\"\"\n    wfs = WebFeatureService(url=wfs_url, version=\"2.0.0\")\n    response = wfs.getfeature(typename=layer_name, srsname=srs)\n    gdf = gpd.read_file(BytesIO(response.read()))\n    return gdf\n\n\nbase_url = \"https://wms.ign.gob.ar/geoserver/ign/ows\"\n\nmunis = wfs_to_gdf(wfs_url=base_url, layer_name=\"ign:municipio\", srs=\"EPSG:4326\")\n\n\n\n\nMostrar código\naoi = munis[(munis[\"nam\"] == \"Villa del Rosario\") & (munis[\"gid\"] == 2960)]\naoi = aoi.to_crs(USE_CRS)\n\n\n\n\nMostrar código\nfig, ax = create_consistent_map(\n    \"Municipio de Villa del Rosario\", aoi\n)\n\naoi_3857 = aoi.to_crs(WEB_MERCATOR_CRS)\n\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nMostrar código\n# import villa del rosario boundaries\n# create bounding box\n# use this to spatially query the census tract geoms in AWS\n# pull in the index of material privation from AWS, calculating a poverty rate (fraction of total hogares)\n# map at tract level\n# maybe rank? or jsut score 0 to 1, actually, instead of 0 to 100\n\n# then we will be able to simply report:\n    # - total pop exposed to each hazard level\n    # - total pop with certain poverty level exposed to each hazard level\n\n\n\n\nMostrar código\nimport duckdb\nimport pandas as pd\nimport geopandas as gpd\n\n# Setup DuckDB and query\ncon = duckdb.connect()\nfor cmd in [\n    \"INSTALL spatial\",\n    \"LOAD spatial\", \n    \"INSTALL httpfs\",\n    \"LOAD httpfs\",\n    \"SET s3_region='us-east-2'\",  # Note: different region for your data\n]:\n    con.execute(cmd)\n\ntemp_file = \"privacion_data.parquet\"\n\nWGS84_CRS = \"EPSG:4326\"\n\nbounds = aoi.to_crs(WGS84_CRS).total_bounds\n\nquery = f\"\"\"\nCOPY (\n    WITH privacion_data AS (\n        SELECT \n            id_geo,\n            SUM(CASE WHEN valor_categoria IN ('2', '3', '4') THEN conteo ELSE 0 END) AS hogares_con_privacion,\n            SUM(conteo) AS total_hogares,\n            ROUND((hogares_con_privacion * 100.0) / total_hogares, 2) AS porcentaje_privacion\n        FROM 's3://arg-fulbright-data/censo-argentino-2022/censo-2022-largo.parquet'\n        WHERE codigo_variable = 'HOGAR_IPMH'\n        GROUP BY id_geo\n        HAVING total_hogares &gt; 0\n    )\n    SELECT \n        g.cod_2022,\n        g.prov,\n        g.depto, \n        g.pob_tot_p,\n        g.geometry,\n        p.hogares_con_privacion,\n        p.total_hogares,\n        p.porcentaje_privacion\n    FROM 's3://arg-fulbright-data/censo-argentino-2022/radios-2022.parquet' g\n    JOIN privacion_data p ON g.cod_2022 = p.id_geo\n    WHERE ST_XMax(g.geometry) &gt;= {bounds[0]} \n      AND ST_XMin(g.geometry) &lt;= {bounds[2]}\n      AND ST_YMax(g.geometry) &gt;= {bounds[1]} \n      AND ST_YMin(g.geometry) &lt;= {bounds[3]}\n) TO '{temp_file}' (FORMAT PARQUET);\n\"\"\"\n\ncon.execute(query)\ndf = pd.read_parquet(temp_file)\ndf[\"geometry\"] = gpd.GeoSeries.from_wkb(df[\"geometry\"])\ngdf = gpd.GeoDataFrame(df, geometry=\"geometry\", crs=\"4326\")\n\n\n\n\n\n\n\nMostrar código\ngdf.head()\n\n\n\n\n\n\n\n\n\nCOD_2022\nPROV\nDEPTO\nPOB_TOT_P\ngeometry\nhogares_con_privacion\ntotal_hogares\nporcentaje_privacion\n\n\n\n\n0\n141191303\n14\n119\n142\nPOLYGON ((-63.52918 -31.54024, -63.52849 -31.5...\n12.0\n58.0\n20.69\n\n\n1\n141190203\n14\n119\n29\nPOLYGON ((-63.55791 -31.45791, -63.55668 -31.4...\n4.0\n11.0\n36.36\n\n\n2\n141190806\n14\n119\n615\nPOLYGON ((-63.53638 -31.55864, -63.53491 -31.5...\n47.0\n222.0\n21.17\n\n\n3\n141191313\n14\n119\n523\nPOLYGON ((-63.53282 -31.55279, -63.5314 -31.55...\n49.0\n185.0\n26.49\n\n\n4\n141191310\n14\n119\n434\nPOLYGON ((-63.53878 -31.54707, -63.53803 -31.5...\n28.0\n181.0\n15.47\n\n\n\n\n\n\n\n\n\nMostrar código\ngdf.plot(\"porcentaje_privacion\")\n\n\n\n\n\n\n\n\n\n\n\nMostrar código\ngdf.hist(\"porcentaje_privacion\")\n\n\narray([[&lt;Axes: title={'center': 'porcentaje_privacion'}&gt;]], dtype=object)\n\n\n\n\n\n\n\n\n\n\n\nMostrar código\nfig, ax = create_consistent_map(\n    \"Privación por Radio Censal - Censo 2022\", aoi\n)\n\nfiltered_gdf_3857 = gdf.to_crs(WEB_MERCATOR_CRS)\n\nfiltered_gdf_3857.plot(\n    column=\"POB_TOT_P\", ax=ax, cmap=PLASMA_CMAP, legend=False, alpha=0.8, zorder=2\n)\n\nplt.title(\"Privación por Radio Censal - Censo 2022\", fontsize=16, fontweight=\"bold\", pad=20)\nplt.show()",
    "crumbs": [
      "Riesgo Climático para Ciudades",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Vulnerabilidad</span>"
    ]
  },
  {
    "objectID": "cookbooks/esperanza.html",
    "href": "cookbooks/esperanza.html",
    "title": "13  Esperanza",
    "section": "",
    "text": "13.1 Resumen ejecutivo",
    "crumbs": [
      "Cookbooks",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Esperanza</span>"
    ]
  },
  {
    "objectID": "cookbooks/esperanza.html#introducción",
    "href": "cookbooks/esperanza.html#introducción",
    "title": "13  Esperanza",
    "section": "13.2 Introducción",
    "text": "13.2 Introducción",
    "crumbs": [
      "Cookbooks",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Esperanza</span>"
    ]
  },
  {
    "objectID": "cookbooks/esperanza.html#objetivos",
    "href": "cookbooks/esperanza.html#objetivos",
    "title": "13  Esperanza",
    "section": "13.3 Objetivos",
    "text": "13.3 Objetivos",
    "crumbs": [
      "Cookbooks",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Esperanza</span>"
    ]
  },
  {
    "objectID": "cookbooks/esperanza.html#fuentes-de-datos",
    "href": "cookbooks/esperanza.html#fuentes-de-datos",
    "title": "13  Esperanza",
    "section": "13.4 Fuentes de datos",
    "text": "13.4 Fuentes de datos",
    "crumbs": [
      "Cookbooks",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Esperanza</span>"
    ]
  },
  {
    "objectID": "cookbooks/esperanza.html#metodología",
    "href": "cookbooks/esperanza.html#metodología",
    "title": "13  Esperanza",
    "section": "13.5 Metodología",
    "text": "13.5 Metodología",
    "crumbs": [
      "Cookbooks",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Esperanza</span>"
    ]
  },
  {
    "objectID": "cookbooks/esperanza.html#resultados",
    "href": "cookbooks/esperanza.html#resultados",
    "title": "13  Esperanza",
    "section": "13.6 Resultados",
    "text": "13.6 Resultados\n\n13.6.1 Exposición\n\n\nMostrar código\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport rasterstats\nfrom rasterio.features import rasterize\nfrom io import BytesIO\nfrom owslib.wfs import WebFeatureService\n\nimport rioxarray\nimport contextily as ctx\nfrom shapely.geometry import box\nimport xarray as xr\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport rasterstats\nfrom rasterio.features import rasterize\nfrom io import BytesIO\nfrom owslib.wfs import WebFeatureService\n\nimport rioxarray\nimport contextily as ctx\nfrom shapely.geometry import box\nimport xarray as xr\n\n\nUSE_CRS = \"EPSG:5347\"  # posgar para esperanza\nWEB_MERCATOR_CRS = \"EPSG:3857\"\n\nDEFAULT_FIGSIZE = (12, 10)\nMAP_PADDING = 500\nPLASMA_CMAP = plt.cm.plasma\n\n\ndef setup_base_map(\n    figsize=None, bounds=None, boundary_gdf=None, padding_x=None, padding_y=None\n):\n    \"\"\"Create figure and set up basic map boundaries with padding.\"\"\"\n    if figsize is None:\n        figsize = DEFAULT_FIGSIZE\n    if padding_x is None:\n        padding_x = MAP_PADDING\n    if padding_y is None:\n        padding_y = MAP_PADDING\n\n    if bounds is None and boundary_gdf is not None:\n        bounds = boundary_gdf.total_bounds\n\n    # Convert bounds to Web Mercator for basemap compatibility\n    if bounds is not None:\n        # Create a temporary GeoDataFrame with the bounds to reproject\n        temp_bounds = gpd.GeoDataFrame(\n            geometry=[box(bounds[0], bounds[1], bounds[2], bounds[3])], crs=USE_CRS\n        )\n        bounds_3857 = temp_bounds.to_crs(WEB_MERCATOR_CRS).total_bounds\n    else:\n        bounds_3857 = bounds\n\n    fig, ax = plt.subplots(figsize=figsize)\n    ax.set_xlim(bounds_3857[0] - padding_x, bounds_3857[2] + padding_x)\n    ax.set_ylim(bounds_3857[1] - padding_y, bounds_3857[3] + padding_y)\n    return fig, ax\n\n\ndef add_basemap(ax, zoom=13):\n    \"\"\"Add CartoDB basemap to the axes.\"\"\"\n\n    ctx.add_basemap(\n        ax,\n        source=ctx.providers.CartoDB.PositronNoLabels,\n        zorder=0,\n        zoom=zoom,\n    )\n\n    return ax\n\n\ndef add_north_arrow(ax, x=0.95, y=0.05, arrow_length=0.04):\n    \"\"\"Add a north arrow to the map.\"\"\"\n    ax.annotate(\n        \"N\",\n        xy=(x, y),\n        xytext=(x, y - arrow_length),\n        arrowprops=dict(facecolor=\"black\", width=3, headwidth=10),\n        ha=\"center\",\n        va=\"center\",\n        fontsize=14,\n        xycoords=ax.transAxes,\n    )\n\n\ndef add_boundary_outline(ax, boundary_gdf, crs=\"EPSG:3857\"):\n    \"\"\"Add the outline of a boundary geodataframe to a map.\"\"\"\n    boundary_3857 = boundary_gdf.to_crs(crs)\n    boundary_3857.plot(\n        ax=ax,\n        facecolor=\"none\",\n        edgecolor=\"black\",\n        linewidth=0.5,\n        linestyle=\"--\",\n        legend=False,\n        zorder=5,\n    )\n\n\ndef create_consistent_map(title, boundary_gdf, bounds=None):\n    \"\"\"Create a map with consistent styling and basemap.\"\"\"\n    fig, ax = setup_base_map(bounds=bounds, boundary_gdf=boundary_gdf)\n\n    add_basemap(ax)\n\n    add_north_arrow(ax)\n\n    add_boundary_outline(ax, boundary_gdf)\n\n    ax.set_title(title, fontsize=16, fontweight=\"bold\", pad=20)\n\n    ax.set_axis_off()\n\n    return fig, ax\n\n\ndef wfs_to_gdf(\n    wfs_url: str, layer_name: str, srs: str = \"EPSG:4326\"\n) -&gt; gpd.GeoDataFrame:\n    \"\"\"\n    Descarga una capa WFS y la devuelve como GeoDataFrame.\n\n    Args:\n        wfs_url (str): URL del servicio WFS.\n        layer_name (str): Nombre de la capa (typename).\n        srs (str): Código EPSG del sistema de referencia de coordenadas.\n\n    Returns:\n        gpd.GeoDataFrame: Capa descargada como GeoDataFrame.\n    \"\"\"\n    wfs = WebFeatureService(url=wfs_url, version=\"2.0.0\")\n    response = wfs.getfeature(typename=layer_name, srsname=srs)\n    gdf = gpd.read_file(BytesIO(response.read()))\n    return gdf\n\n\nbase_url = \"https://wms.ign.gob.ar/geoserver/ign/ows\"\n\nmunis = wfs_to_gdf(wfs_url=base_url, layer_name=\"ign:municipio\", srs=\"EPSG:4326\")\n\naoi = munis[munis[\"nam\"] == \"Esperanza\"]\naoi = aoi.to_crs(USE_CRS)\n\n\nChange this to use the parquet data instead of the local data\n\n\nMostrar código\ndatos_censales = gpd.read_parquet(\n    \"/home/nissim/Documents/dev/fulbright/ciut-redatam/datos_censales_2022_geo.parquet\"\n)\n\ndatos_censales = datos_censales.to_crs(USE_CRS)\n\ngeometria_aoi = aoi.geometry.iloc[0]\ncentroides_dentro = datos_censales.geometry.centroid.within(geometria_aoi)\ncompletamente_dentro = datos_censales.within(geometria_aoi)\ndatos_censales = datos_censales[\n    completamente_dentro | centroides_dentro\n].copy()\n\nfig, ax = create_consistent_map(\n    \"Población Total por Radio Censal - Censo 2022\", aoi\n)\n\ndatos_censales_3857 = datos_censales.to_crs(WEB_MERCATOR_CRS)\n\ndatos_censales_3857.plot(\n    column=\"POB_TOT_P\", ax=ax, cmap=PLASMA_CMAP, legend=False, alpha=0.8, zorder=2\n)\n\nplt.title(\"Población Total por Radio Censal - Censo 2022\", fontsize=16, fontweight=\"bold\", pad=20)\nplt.show()\n\n\n\n\nMostrar código\n# esperanza_ruta = \"\"/home/nissim/Documents/dev/fulbright/ciut-riesgo/notebooks/data/GHS_POP_E2025_GLOBE_R2023A_54009_100_V1_0_R13_C13/GHS_POP_E2025_GLOBE_R2023A_54009_100_V1_0_R13_C13.tif\"\"\n\nghsl_ruta = \"/home/nissim/Documents/dev/fulbright/ciut-riesgo/notebooks/data/GHS_POP_E2025_GLOBE_R2023A_54009_100_V1_0_R13_C13/GHS_POP_E2025_GLOBE_R2023A_54009_100_V1_0_R13_C13.tif\"\n\nghsl = rioxarray.open_rasterio(\n    ghsl_ruta,\n    chunks={\"x\": 1024, \"y\": 1024},\n)\n\nghsl = ghsl.rio.reproject(dst_crs=USE_CRS)\n\nghsl_clipped = ghsl.rio.clip(\n    [aoi.geometry.iloc[0]],\n    from_disk=True,\n)\n\nghsl_masked = ghsl_clipped.where(ghsl_clipped &gt; 0)\n\nfig, ax = create_consistent_map(\n    \"Estimaciones de Población GHSL 2023\", aoi\n)\n\nghsl_masked_3857 = ghsl_masked.rio.reproject(WEB_MERCATOR_CRS)\n\nghsl_masked_3857 = ghsl_masked_3857.where(ghsl_masked_3857 &gt; 0)\n\nghsl_masked_3857.plot(ax=ax, cmap=PLASMA_CMAP, alpha=0.75, add_colorbar=False, add_labels=False, zorder=2)\n\nplt.title(\"Estimaciones de Población GHSL 2023\", fontsize=16, fontweight=\"bold\", pad=20)\nplt.show()\n\n\n\n\nMostrar código\nraster_referencia = ghsl_clipped\ntransformacion_referencia = raster_referencia.rio.transform()\ncrs_referencia = raster_referencia.rio.crs\nforma_referencia = raster_referencia.shape[1:]\nraster_ghsl = ghsl_clipped.values[0]\n\ngeometrias = [geom for geom in datos_censales.geometry]\n\n# Option 1: Use the same method for both\n# Replace zonal_stats with rasterize-based calculation\nraster_ghsl_full = rasterize(\n    [(geom, i+1) for i, geom in enumerate(datos_censales.geometry)],\n    out_shape=forma_referencia,\n    transform=transformacion_referencia,\n    fill=0,\n    all_touched=True,\n    dtype=np.int32\n)\n\n# Calculate totals from the rasterized version\ntotales_ghsl = []\nfor i in range(len(datos_censales.geometry)):\n    polygon_mask = raster_ghsl_full == (i + 1)  # +1 because rasterize starts at 1\n    \n    # Apply both polygon mask AND exclude nodata values\n    valid_mask = polygon_mask & (raster_ghsl &gt; 0) & (raster_ghsl != -200)\n    \n    total = np.sum(raster_ghsl[valid_mask]) if np.any(valid_mask) else 0\n    totales_ghsl.append(total)\n\ndatos_censales[\"estimacion_pob_ghsl\"] = totales_ghsl\n\n\ngeometrias_ghsl = [\n    (geom, valor)\n    for geom, valor in zip(\n        datos_censales.geometry,\n        datos_censales[\"estimacion_pob_ghsl\"],\n    )\n]\ngeometrias_pob = [\n    (geom, valor)\n    for geom, valor in zip(\n        datos_censales.geometry, datos_censales[\"POB_TOT_P\"]\n    )\n]\n\nraster_pob_ghsl = rasterize(\n    geometrias_ghsl,\n    out_shape=forma_referencia,\n    transform=transformacion_referencia,\n    fill=0,\n    dtype=np.float32,\n    all_touched=True,\n)\n\nraster_pob_censo = rasterize(\n    geometrias_pob,\n    out_shape=forma_referencia,\n    transform=transformacion_referencia,\n    fill=0,\n    dtype=np.float32,\n    all_touched=True,\n)\n\n\nmascara = (raster_ghsl &gt; 0) & (raster_ghsl != -200) & (raster_pob_ghsl &gt; 0.1)\nghsl_fraccional = np.full_like(raster_ghsl, 0, dtype=np.float64)\nghsl_fraccional[mascara] = raster_ghsl[mascara] / raster_pob_ghsl[mascara]\n\nmascara2 = (ghsl_fraccional &gt; 0) & (raster_pob_censo &gt; 0)\npob_redistribuida = np.full_like(raster_ghsl, 0, dtype=np.float64)\npob_redistribuida[mascara2] = ghsl_fraccional[mascara2] * raster_pob_censo[mascara2]\n\npob_redistribuida_da = xr.DataArray(\n    pob_redistribuida,\n    coords={\"y\": ghsl_clipped.y, \"x\": ghsl_clipped.x},\n    dims=[\"y\", \"x\"],\n    attrs=ghsl_clipped.attrs.copy(),\n)\n\npob_redistribuida_da = pob_redistribuida_da.rio.write_crs(USE_CRS)\n\npob_redistribuida_enmascarada = pob_redistribuida_da.where(pob_redistribuida_da &gt; 0)\n\ntotal_redistribuido = pob_redistribuida[pob_redistribuida &gt; 0].sum()\ntotal_censo = datos_censales[\"POB_TOT_P\"].sum()\n\nfig, ax = create_consistent_map(\n    \"Población Redistribuida a 100m\", aoi\n)\n\npob_redistribuida_enmascarada_3857 = pob_redistribuida_enmascarada.rio.reproject(\n    WEB_MERCATOR_CRS\n)\n\npob_redistribuida_enmascarada_3857 = pob_redistribuida_enmascarada_3857.where(\n    pob_redistribuida_enmascarada_3857 &gt; 0\n)\n\npob_redistribuida_enmascarada_3857.plot(\n    ax=ax, cmap=PLASMA_CMAP, alpha=0.75, add_colorbar=False, add_labels=False, zorder=2\n)\n\nplt.title(\"Población Censal Redistribuida a 100m\", fontsize=16, fontweight=\"bold\", pad=20)\nplt.show()\n\n\nSummarize: - Total pop from census - Total estimation from GHSL - Report this as a range to give people a sense of possible totals (don’t forget to mention the years of each)\n\n\n13.6.2 Vulnerabilidad\n\n\nMostrar código\nimport duckdb\nimport pandas as pd\nimport geopandas as gpd\n\n# Setup DuckDB and query\ncon = duckdb.connect()\nfor cmd in [\n    \"INSTALL spatial\",\n    \"LOAD spatial\", \n    \"INSTALL httpfs\",\n    \"LOAD httpfs\",\n    \"SET s3_region='us-east-2'\",  # Note: different region for your data\n]:\n    con.execute(cmd)\n\ntemp_file = \"privacion_data.parquet\"\n\nWGS84_CRS = \"EPSG:4326\"\n\nbounds = aoi.to_crs(WGS84_CRS).total_bounds\n\nquery = f\"\"\"\nCOPY (\n    WITH privacion_data AS (\n        SELECT \n            id_geo,\n            SUM(CASE WHEN valor_categoria IN ('2', '3', '4') THEN conteo ELSE 0 END) AS hogares_con_privacion,\n            SUM(conteo) AS total_hogares,\n            ROUND((hogares_con_privacion * 100.0) / total_hogares, 2) AS porcentaje_privacion\n        FROM 's3://arg-fulbright-data/censo-argentino-2022/censo-2022-largo.parquet'\n        WHERE codigo_variable = 'HOGAR_IPMH'\n        GROUP BY id_geo\n        HAVING total_hogares &gt; 0\n    )\n    SELECT \n        g.cod_2022,\n        g.prov,\n        g.depto, \n        g.pob_tot_p,\n        g.geometry,\n        p.hogares_con_privacion,\n        p.total_hogares,\n        p.porcentaje_privacion\n    FROM 's3://arg-fulbright-data/censo-argentino-2022/radios-2022.parquet' g\n    JOIN privacion_data p ON g.cod_2022 = p.id_geo\n    WHERE ST_XMax(g.geometry) &gt;= {bounds[0]} \n      AND ST_XMin(g.geometry) &lt;= {bounds[2]}\n      AND ST_YMax(g.geometry) &gt;= {bounds[1]} \n      AND ST_YMin(g.geometry) &lt;= {bounds[3]}\n) TO '{temp_file}' (FORMAT PARQUET);\n\"\"\"\n\ncon.execute(query)\ndf = pd.read_parquet(temp_file)\ndf[\"geometry\"] = gpd.GeoSeries.from_wkb(df[\"geometry\"])\ngdf = gpd.GeoDataFrame(df, geometry=\"geometry\", crs=\"4326\")\n\ngdf = gdf.to_crs(USE_CRS).clip(aoi)\n\n\n\n\nMostrar código\ngdf.hist(\"porcentaje_privacion\")\n\n\n\n\nMostrar código\nfig, ax = create_consistent_map(\n    \"Privación por Radio Censal - Censo 2022\", aoi\n)\n\nfiltered_gdf_3857 = gdf.to_crs(WEB_MERCATOR_CRS)\n\nfiltered_gdf_3857.plot(\n    column=\"POB_TOT_P\", ax=ax, cmap=PLASMA_CMAP, legend=False, alpha=0.8, zorder=2\n)\n\nplt.title(\"Privación por Radio Censal - Censo 2022\", fontsize=16, fontweight=\"bold\", pad=20)\nplt.show()\n\n\n\n13.6.2.1 Población privada a 100m\n\n\nMostrar código\n# Create poverty proportions raster at 100m resolution\ngeometrias_privacion = [\n    (geom, valor)\n    for geom, valor in zip(\n        gdf.geometry, \n        gdf[\"porcentaje_privacion\"] / 100  # Convert percentage to proportion\n    )\n]\n\nraster_privacion = rasterize(\n    geometrias_privacion,\n    out_shape=forma_referencia,\n    transform=transformacion_referencia,\n    fill=0,\n    dtype=np.float32,\n    all_touched=True,\n)\n\n# Create population in poverty raster by multiplying redistributed population by poverty proportions\nmascara_pob_privacion = (pob_redistribuida &gt; 0) & (raster_privacion &gt; 0)\npob_privacion = np.full_like(pob_redistribuida, 0, dtype=np.float64)\npob_privacion[mascara_pob_privacion] = pob_redistribuida[mascara_pob_privacion] * raster_privacion[mascara_pob_privacion]\n\n# Create xarray DataArray for the poverty population raster\npob_privacion_da = xr.DataArray(\n    pob_privacion,\n    coords={\"y\": ghsl_clipped.y, \"x\": ghsl_clipped.x},\n    dims=[\"y\", \"x\"],\n    attrs=ghsl_clipped.attrs.copy(),\n)\n\npob_privacion_da = pob_privacion_da.rio.write_crs(USE_CRS)\n\n# Mask zero values\npob_privacion_enmascarada = pob_privacion_da.where(pob_privacion_da &gt; 0)\n\n# Calculate total population in poverty\ntotal_pob_privacion = pob_privacion[pob_privacion &gt; 0].sum()\nprint(f\"Total population in poverty: {total_pob_privacion:,.0f}\")\nprint(f\"Percentage of redistributed population in poverty: {(total_pob_privacion/total_redistribuido)*100:.1f}%\")\n\n\n\n\nMostrar código\n# Histogram of poverty population values\nplt.figure(figsize=(10, 6))\npob_privacion_values = pob_privacion[pob_privacion &gt; 0]\nplt.hist(pob_privacion_values, bins=50, alpha=0.7, edgecolor='black')\nplt.xlabel('Population in Poverty per 100m pixel')\nplt.ylabel('Frequency')\nplt.title('Distribution of Population in Poverty at 100m Resolution')\nplt.grid(True, alpha=0.3)\nplt.show()\n\n\n\n\nMostrar código\n# Map of population in poverty at 100m resolution\nfig, ax = create_consistent_map(\n    \"Población en Privación a 100m\", aoi\n)\n\npob_privacion_3857 = pob_privacion_enmascarada.rio.reproject(WEB_MERCATOR_CRS)\npob_privacion_3857 = pob_privacion_3857.where(pob_privacion_3857 &gt; 0)\n\npob_privacion_3857.plot(\n    ax=ax, cmap=PLASMA_CMAP, alpha=0.75, add_colorbar=False, add_labels=False, zorder=2\n)\n\nplt.title(\"Población en Privación a 100m\", fontsize=16, fontweight=\"bold\", pad=20)\nplt.show()\n\n\n\n\n\n13.6.3 Peligro\n\n13.6.3.1 MDE\n\n\nMostrar código\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\n\nfrom pathlib import Path\nimport xarray as xr\nimport rioxarray\nfrom rioxarray.merge import merge_arrays\nimport xdem\nimport tempfile\nimport numpy as np\nfrom matplotlib import colors\nimport leafmap.leafmap as leafmap\nfrom pysheds.grid import Grid\nfrom jenkspy import jenks_breaks\n\nCRS_WGS84 = \"EPSG:4326\"\n\nRUTA_BASE = Path(\"/home/nissim/Documents/dev/fulbright/ciut-riesgo\")\nRUTA_DATOS = RUTA_BASE / \"notebooks/data\"\nRUTA_PARTIDOS = RUTA_DATOS / \"pba_partidos.geojson\"\n\nCMAP = \"BuPu\"\n\nbbox_4326 = aoi.to_crs(CRS_WGS84).total_bounds\n\nrutas_tiles = [\n    \"/home/nissim/Documents/dev/datos-escala-humana/data/S40W070-S30W060_FABDEM_V1-2/S32W061_FABDEM_V1-2.tif\",\n    \"/home/nissim/Documents/dev/datos-escala-humana/data/S40W070-S30W060_FABDEM_V1-2/S32W062_FABDEM_V1-2.tif\"\n]\n\ntiles = [rioxarray.open_rasterio(path, chunks=True) for path in rutas_tiles]\ndem_fusionado = merge_arrays(tiles)\n\ndem_recortado = dem_fusionado.rio.clip_box(\n    minx=bbox_4326[0],\n    miny=bbox_4326[1],\n    maxx=bbox_4326[2],\n    maxy=bbox_4326[3],\n)\n\ndem_recortado.plot(cmap=CMAP)\nax = plt.gca()\naoi_wgs84 = aoi.to_crs(CRS_WGS84)\naoi_wgs84.plot(\n    ax=ax,\n    facecolor=\"none\",\n    edgecolor=\"black\",\n    linewidth=0.5,\n    linestyle=\"--\",\n    zorder=5,\n)\n\n\n\n\nMostrar código\nfrom jenkspy import jenks_breaks\n\n# Sample every 10th pixel\nsample_data = dem_recortado.values[::10, ::10].flatten()\nbreaks = jenks_breaks(sample_data, n_classes=3)\n\n# Classify using the breaks\ndem_classified = xr.DataArray(\n    np.digitize(dem_recortado, bins=breaks[1:-1]),  # Skip first and last break\n    coords=dem_recortado.coords,\n    dims=dem_recortado.dims\n)\n\ndem_classified.plot(cmap=CMAP, vmin=0, vmax=2)\nax = plt.gca()\naoi_wgs84 = aoi.to_crs(CRS_WGS84)\naoi_wgs84.plot(\n    ax=ax,\n    facecolor=\"none\",\n    edgecolor=\"black\",\n    linewidth=0.5,\n    linestyle=\"--\",\n    zorder=5,\n)\n\n\n\n\n13.6.3.2 Accumulación de flujo\n\n\nMostrar código\nwith tempfile.NamedTemporaryFile(suffix=\".tif\", delete=False) as tmp_file:\n    ruta_temporal = tmp_file.name\n\n\ndem_recortado.rio.to_raster(ruta_temporal)\ngrilla = Grid.from_raster(ruta_temporal)\n\ndem = grilla.read_raster(ruta_temporal)\n\nvalor_nodata = dem_recortado.attrs.get(\"_FillValue\", -9999.0)\n\n# Acondicionar DEM\ndem_pozos_rellenos = grilla.fill_pits(dem)\ndem_inundado = grilla.fill_depressions(dem_pozos_rellenos)\ndem_inflado = grilla.resolve_flats(dem_inundado)\n\n\ndem_inflado_xarray = xr.DataArray(\n    dem_inflado,\n    coords={\"y\": dem_recortado.y, \"x\": dem_recortado.x},\n    dims=[\"y\", \"x\"],\n    attrs=dem_recortado.attrs,\n).rio.write_crs(\"EPSG:4326\")\n\n\nmapa_direcciones = (64, 128, 1, 2, 4, 8, 16, 32)\n\n\ndirecciones_flujo = grilla.flowdir(\n    dem_inflado, dirmap=mapa_direcciones, nodata_out=np.int32(0)\n)\n\ndirecciones_flujo_xarray = xr.DataArray(\n    direcciones_flujo,\n    coords={\"y\": dem_recortado.y, \"x\": dem_recortado.x},\n    dims=[\"y\", \"x\"],\n    attrs=dem_recortado.attrs,\n).rio.write_crs(\"EPSG:4326\")\n\n\nacumulacion = grilla.accumulation(\n    direcciones_flujo, dirmap=mapa_direcciones, nodata_out=np.int32(0)\n)\n\n\nacumulacion_xarray = xr.DataArray(\n    acumulacion,\n    coords={\"y\": dem_recortado.y, \"x\": dem_recortado.x},\n    dims=[\"y\", \"x\"],\n    attrs=dem_recortado.attrs,\n).rio.write_crs(\"EPSG:4326\")\n\nfig, ax = plt.subplots(figsize=(8, 6))\nfig.patch.set_alpha(0)\nplt.grid(\"on\", zorder=0)\nim = ax.imshow(\n    acumulacion,\n    extent=grilla.extent,\n    zorder=2,\n    cmap=CMAP,\n    norm=colors.LogNorm(1, acumulacion.max()),\n    interpolation=\"bilinear\",\n)\nplt.colorbar(im, ax=ax, label=\"Celdas Aguas Arriba\")\n\naoi_wgs84.plot(\n    ax=ax,\n    facecolor=\"none\",\n    edgecolor=\"black\",\n    linewidth=0.5,\n    linestyle=\"--\",\n    zorder=5,\n)\nplt.title(\"Acumulación de Flujo\", size=14)\nplt.xlabel(\"Longitud\")\nplt.ylabel(\"Latitud\")\nplt.tight_layout()\n\n\n\n\n13.6.3.3 Pendiente\n\n\nMostrar código\nwith tempfile.NamedTemporaryFile(suffix=\".tif\", delete=False) as tmp_file:\n    ruta_temporal = tmp_file.name\n    \n    dem_reproyectado = dem_recortado.rio.reproject(\n        USE_CRS,\n        resolution=30,\n    )\n    dem_reproyectado.rio.to_raster(ruta_temporal)\n    dem = xdem.DEM(ruta_temporal)\n    \n    atributos = xdem.terrain.get_terrain_attribute(\n        dem.data,\n        resolution=dem.res,\n        attribute=[\n            \"hillshade\",\n            \"slope\", \n            \"aspect\",\n            \"curvature\",\n            \"terrain_ruggedness_index\",\n            \"rugosity\",\n        ],\n    )\n    \n    datos_pendiente = atributos[1]\n    \n    # Fix coordinate generation - y should go from top to bottom\n    coordenadas_y = np.arange(dem.bounds.top, dem.bounds.bottom, -dem.res[1])\n    coordenadas_x = np.arange(dem.bounds.left, dem.bounds.right, dem.res[0])\n    \n    pendiente_xarray = xr.DataArray(\n        datos_pendiente,\n        coords={\"y\": coordenadas_y, \"x\": coordenadas_x},\n        dims=[\"y\", \"x\"],\n        attrs={\"crs\": dem.crs, \"units\": \"degrees\", \"long_name\": \"slope\"},\n    )\n\n    pendiente_xarray.plot(cmap=CMAP)\n    ax = plt.gca()\n    aoi.plot(\n    ax=ax,\n    facecolor=\"none\",\n    edgecolor=\"black\",\n    linewidth=0.5,\n    linestyle=\"--\",\n    zorder=5,\n    )\n\n\n\n\n13.6.3.4 HAND\n\n\nMostrar código\nhand = grilla.compute_hand(\n    direcciones_flujo, dem_inflado, acumulacion &gt; 200, nodata_value=np.int32(0)\n)\n\nhand_xarray = xr.DataArray(\n    hand,\n    coords={\"y\": dem_recortado.y, \"x\": dem_recortado.x},\n    dims=[\"y\", \"x\"],\n    attrs={\n        \"crs\": \"EPSG:4326\",\n        \"units\": \"meters\",\n        \"long_name\": \"Height Above Nearest Drainage\",\n        \"description\": \"HAND - Altura Sobre Drenaje Más Cercano\"\n    },\n).rio.write_crs(\"EPSG:4326\")\n\nhand_xarray.plot(cmap=CMAP, figsize=(8, 6))\nax = plt.gca()\naoi_wgs84.plot(\n    ax=ax,\n    facecolor=\"none\",\n    edgecolor=\"black\",\n    linewidth=0.5,\n    linestyle=\"--\",\n    zorder=5,\n)\nplt.title(\"Altura Sobre Drenaje Más Cercano (HAND)\", size=14)\nplt.tight_layout()\n\n\n\n\nMostrar código\nxr.DataArray(np.digitize(hand_xarray, bins=[0.5, 2, 5]), coords=hand_xarray.coords, dims=hand_xarray.dims).plot(cmap=CMAP, figsize=(8, 6))\nax = plt.gca()\naoi_wgs84.plot(\n    ax=ax,\n    facecolor=\"none\",\n    edgecolor=\"black\",\n    linewidth=0.5,\n    linestyle=\"--\",\n    zorder=5,\n)\nplt.title(\"HAND Risk Classification\", size=14)\nplt.tight_layout()\n\n\n\n\nMostrar código\n# Create the base HAND classification plot\nfig, ax = plt.subplots(figsize=(16, 12))\nhand_classified = xr.DataArray(np.digitize(hand_xarray, bins=[0.5, 2, 5]), coords=hand_xarray.coords, dims=hand_xarray.dims)\nhand_classified.plot(ax=ax, cmap=CMAP, add_colorbar=False)\n\n# Add DEM classes as colored outlines - ensure 2D\ndem_2d = dem_classified.squeeze()  # Remove any extra dimensions\ndem_2d.plot.contour(ax=ax, colors=['red', 'blue', 'green'], linewidths=2, levels=[0.5, 1.5, 2.5])\n\n# Add AOI boundary\naoi_wgs84.plot(\n    ax=ax,\n    facecolor=\"none\",\n    edgecolor=\"black\",\n    linewidth=0.5,\n    linestyle=\"--\",\n    zorder=5,\n)\n\nplt.title(\"HAND Risk Classification with DEM Classes\", size=14)\nplt.tight_layout()\n\n\n\n\nMostrar código\nimport osmnx as ox\nimport geopandas as gpd\n\n# Make sure AOI is in WGS84 for OSM queries\naoi_wgs84 = aoi.to_crs(WGS84_CRS)\n\n# Get water features\nwater_tags = {\n    'waterway': ['stream', 'river', 'canal', 'drain', 'ditch'],\n    'natural': ['water'],\n    'water': True\n}\n\nwater_features = ox.features_from_polygon(aoi_wgs84.geometry.iloc[0], water_tags)\n\nwaterways = water_features[water_features['waterway'].notna()]\n\nwaterways.plot(figsize=(10, 8))\nplt.title(\"Waterways in AOI\")\nplt.show()\n\n\n\n\nMostrar código\nfrom shapely.geometry import Point\nimport rasterio\nfrom rasterio.features import rasterize\nfrom scipy.ndimage import distance_transform_edt\n\n# Get waterways from OSM\naoi_wgs84 = aoi.to_crs(\"EPSG:4326\")\nwaterways = ox.features_from_polygon(aoi_wgs84.geometry.iloc[0], {'waterway': ['stream', 'river', 'canal', 'drain', 'ditch']})\n\n# Create the base HAND plot\nhand_classified = xr.DataArray(np.digitize(hand_xarray, bins=[0.5, 2, 5]), coords=hand_xarray.coords, dims=hand_xarray.dims)\nhand_classified.plot(cmap=CMAP, figsize=(16, 12))\nax = plt.gca()\n\n# Add waterways\nif not waterways.empty:\n    waterways.plot(ax=ax, color='blue', linewidth=1.5, alpha=0.8, zorder=4)\n    \n    # Convert waterways to the same CRS as the plot\n    waterways_plot_crs = waterways.to_crs(hand_xarray.rio.crs)\n    \n    # Create a raster with the same shape and extent as hand_xarray\n    # Rasterize waterways to create a binary mask\n    waterway_raster = rasterize(\n        [(geom, 1) for geom in waterways_plot_crs.geometry if geom is not None],\n        out_shape=hand_xarray.shape,\n        transform=hand_xarray.rio.transform(),\n        fill=0,\n        default_value=0\n    )\n    \n    # Calculate distance to waterways using distance transform\n    distances = distance_transform_edt(waterway_raster == 0)\n    \n    # Convert to xarray for plotting\n    distance_xarray = xr.DataArray(\n        distances,\n        coords=hand_xarray.coords,\n        dims=hand_xarray.dims\n    )\n    \n    # Add contour lines every 100m\n    distance_xarray.plot.contour(ax=ax, levels=np.arange(0, distances.max(), 100), \n                                colors='black', linewidths=0.5, zorder=3)\n\n# Add AOI boundary\naoi_wgs84.plot(\n    ax=ax,\n    facecolor=\"none\",\n    edgecolor=\"black\",\n    linewidth=0.5,\n    linestyle=\"--\",\n    zorder=5,\n)\n\nplt.title(\"HAND Risk Classification with Waterways and Distance Contours\", size=14)\nplt.tight_layout()\n\n\n\n\n\n13.6.4 Riesgo\n\n\n13.6.5 Conclusiones",
    "crumbs": [
      "Cookbooks",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Esperanza</span>"
    ]
  },
  {
    "objectID": "cookbooks/villa-del-rosario.html",
    "href": "cookbooks/villa-del-rosario.html",
    "title": "14  Exposición y vulnerabilidad",
    "section": "",
    "text": "14.1 Incendios\nMostrar código\n# Create lists of all available years\nmodis_years = list(range(2000, 2021))  # 2000-2020\nviirs_years = list(range(2012, 2022))  # 2012-2021\n\n# Function to create FeatureCollection for a specific year and dataset\ndef create_fire_collection(dataset, year):\n    \"\"\"Create a FeatureCollection for a specific dataset and year\"\"\"\n    if dataset == 'modis':\n        path = f\"projects/sat-io/open-datasets/MODIS_MCD14DL/MCD14DL_{year}\"\n    elif dataset == 'viirs':\n        path = f\"projects/sat-io/open-datasets/VIIRS/VNP14IMGTDL_NRT_{year}\"\n    else:\n        raise ValueError(\"Dataset must be 'modis' or 'viirs'\")\n    \n    try:\n        return ee.FeatureCollection(path)\n    except Exception as e:\n        print(f\"Warning: Could not load {dataset} data for year {year}: {e}\")\n        return None\n\n# Load all MODIS data (2000-2020)\nprint(\"Loading MODIS data (2000-2020)...\")\nmodis_collections = []\nfor year in modis_years:\n    collection = create_fire_collection('modis', year)\n    if collection is not None:\n        modis_collections.append(collection)\n\n# Load all VIIRS data (2012-2021)\nprint(\"Loading VIIRS data (2012-2021)...\")\nviirs_collections = []\nfor year in viirs_years:\n    collection = create_fire_collection('viirs', year)\n    if collection is not None:\n        viirs_collections.append(collection)\n\n# Combine all collections into single FeatureCollections\nprint(\"Combining all years...\")\nall_modis = ee.FeatureCollection(modis_collections).flatten()\nall_viirs = ee.FeatureCollection(viirs_collections).flatten()\n\n# Filter by area of interest\nee_aoi = geemap.geopandas_to_ee(aoi)\n\nprint(\"Filtering by area of interest...\")\nall_modis_aoi = all_modis.filterBounds(ee_aoi)\nall_viirs_aoi = all_viirs.filterBounds(ee_aoi)\n\n\n\n            \n            \n\n\nLoading MODIS data (2000-2020)...\nLoading VIIRS data (2012-2021)...\nCombining all years...\nFiltering by area of interest...\nMostrar código\n# Get a color from a day or night\nclass_color = ee.Dictionary({\n    'D': '0565A6',\n    'N': '229A00'\n})\n\nclasses = ['D', 'N']\n\ndef add_style(pt):\n    \"\"\"Add styling properties to each point based on brightness and day/night\"\"\"\n    size = ee.Number(pt.get('bright_ti4')).divide(100)\n    color = class_color.get(pt.get('daynight'))\n    return pt.set('styleProperty', ee.Dictionary({'pointSize': size, 'color': color}))\n\n# Style both MODIS and VIIRS data\nmodis_styled = all_modis_aoi.map(add_style)\nviirs_styled = all_viirs_aoi.map(add_style)\n\n# Create day and night fire layers for MODIS\nmodis_daytime = modis_styled.filter(ee.Filter.eq('daynight', 'D')).style(\n    styleProperty='styleProperty',\n    neighborhood=50\n)\n\nmodis_nighttime = modis_styled.filter(ee.Filter.eq('daynight', 'N')).style(\n    styleProperty='styleProperty', \n    neighborhood=50\n)\n\n# Create day and night fire layers for VIIRS\nviirs_daytime = viirs_styled.filter(ee.Filter.eq('daynight', 'D')).style(\n    styleProperty='styleProperty',\n    neighborhood=50\n)\n\nviirs_nighttime = viirs_styled.filter(ee.Filter.eq('daynight', 'N')).style(\n    styleProperty='styleProperty', \n    neighborhood=50\n)\nMostrar código\n# Create the map\nm = geemap.Map()\n\n# Add all fire layers\nm.addLayer(modis_daytime, {}, 'MODIS Daytime Fires', True, 0.65)\nm.addLayer(modis_nighttime, {}, 'MODIS Nighttime Fires', True, 0.65)\nm.addLayer(viirs_daytime, {}, 'VIIRS Daytime Fires', True, 0.65)\nm.addLayer(viirs_nighttime, {}, 'VIIRS Nighttime Fires', True, 0.65)\n\nm\nMostrar código\n# Load GABAM dataset\ngabam = ee.ImageCollection(\"projects/sat-io/open-datasets/GABAM\")\n\n# Filter by area of interest and date\ngabam_aoi = gabam.filterBounds(ee_aoi)\ngabam_aoi = gabam_aoi.filterDate('2005-01-01','2021-12-31')\n\n# IMPORTANT: Select only the burn band, not all properties\n# GABAM has a single band 'b1' with values 0 or 1\nburn_count = gabam_aoi.select('b1').sum()\n\n# Clip to AOI\nburn_count_clipped = burn_count.clip(ee_aoi)\n\n# Now check the actual burn count statistics\nstats = burn_count_clipped.reduceRegion(\n    reducer=ee.Reducer.minMax().combine(ee.Reducer.mean(), sharedInputs=True),\n    geometry=ee_aoi,\n    scale=30,\n    maxPixels=1e9\n)\n\nprint(\"Actual burn count statistics:\")\nprint(f\"Min: {stats.get('b1_min').getInfo()}\")\nprint(f\"Max: {stats.get('b1_max').getInfo()}\")\nprint(f\"Mean: {stats.get('b1_mean').getInfo()}\")\n\n# Extract the geometry from the FeatureCollection\nee_aoi_geometry = ee_aoi.geometry()\n\n# Then use it in the export\ngeemap.ee_export_image(\n    burn_count_clipped, \n    filename=\"/home/nissim/Documents/dev/fulbright/ciut-riesgo/data/villa_del_rosario/gabam_2005_2021_30m.tif\", \n    scale=30, \n    region=ee_aoi_geometry\n)\n\n# Add to the existing map\nm.addLayer(\n    burn_count_clipped, \n    {\n        'min': 1, \n        'max': 5,  # Adjust max based on your data range\n        'palette': ['white', 'yellow', 'orange', 'red', 'darkred', 'purple', 'black']\n    }, \n    'GABAM Burn Count (Cumulative)', \n    True, \n    0.7\n)\n\n\n\n            \n            \n\n\nActual burn count statistics:\nMin: 1\nMax: 4\nMean: 1.0688405672193306\nGenerating URL ...\nDownloading data from https://earthengine.googleapis.com/v1/projects/grand-magpie-459819-i5/thumbnails/65c3fa7ede783bc0dd9b85572131c50b-3da7a5c1388bd688b01170030cbc563f:getPixels\nPlease wait ...\nData downloaded to /home/nissim/Documents/dev/fulbright/ciut-riesgo/data/villa_del_rosario/gabam_2005_2021_30m.tif\nMostrar código\n# Load separate ESA collections\nprint(\"Loading ESA AVHRR-LTDR burned area and confidence level...\")\nba_collection = ee.ImageCollection(\"projects/sat-io/open-datasets/ESA/AVHRR-LTDR/BA\")\ncl_collection = ee.ImageCollection(\"projects/sat-io/open-datasets/ESA/AVHRR-LTDR/CL\")\n\n# Filter by AOI\nba_aoi = ba_collection.filterBounds(ee_aoi_geometry)\ncl_aoi = cl_collection.filterBounds(ee_aoi_geometry)\n\n# Create binary mask based on confidence level &gt; 50 AND burned area &gt; 0\nprint(\"Creating binary burn masks with confidence &gt; 50...\")\n\n# Create a function to filter by confidence and burned area\ndef create_confident_burn_mask(img):\n    # Get the corresponding CL image for the same date\n    date = img.date()\n    cl_img = cl_aoi.filterDate(date).first()\n    \n    # Create mask: BA &gt; 0 AND CL &gt; 50\n    burn_mask = img.select('b1').gt(0)  # BA &gt; 0\n    conf_mask = cl_img.select('b1').gt(0)  # CL &gt; 50\n    \n    # Combine both conditions\n    return burn_mask.And(conf_mask).rename('burned')\n\n# Apply the function to create confident burn masks\nbinary_burns = ba_aoi.map(create_confident_burn_mask)\n\n# Sum the binary masks to get burn frequency\nburn_frequency = binary_burns.sum().clip(ee_aoi_geometry)\n\n# Get stats\nfreq_stats = burn_frequency.reduceRegion(\n    reducer=ee.Reducer.minMax().combine(ee.Reducer.mean(), sharedInputs=True),\n    geometry=ee_aoi_geometry,\n    scale=1000,\n    maxPixels=1e9\n)\n\nprint(f\"Burn frequency (times burned with confidence &gt; 50):\")\nprint(f\"Min: {freq_stats.get('burned_min').getInfo()}\")\nprint(f\"Max: {freq_stats.get('burned_max').getInfo()}\")\nprint(f\"Mean: {freq_stats.get('burned_mean').getInfo()}\")\n\n# Add to map\nm.addLayer(\n    burn_frequency.updateMask(burn_frequency.gte(0)), \n    {\n        'min': 0, \n        'max': 12,  # Adjust based on your stats\n        'palette': ['white', 'yellow', 'orange', 'red', 'darkred', 'purple', 'black']\n    }, \n    'ESA Burn Frequency (Confidence &gt; 50)', \n    True, \n    0.7\n)\n\nm\n\n\n\n            \n            \n\n\nLoading ESA AVHRR-LTDR burned area and confidence level...\nCreating binary burn masks with confidence &gt; 50...\nBurn frequency (times burned with confidence &gt; 50):\nMin: 0\nMax: 6\nMean: 2.1728753843046604\nMostrar código\n# Load separate ESA collections\nprint(\"Loading ESA AVHRR-LTDR burned area and confidence level...\")\nba_collection = ee.ImageCollection(\"projects/sat-io/open-datasets/ESA/AVHRR-LTDR/BA\")\ncl_collection = ee.ImageCollection(\"projects/sat-io/open-datasets/ESA/AVHRR-LTDR/CL\")\n\n# Filter by AOI and date range (2000-2021)\nba_aoi = ba_collection.filterBounds(ee_aoi_geometry).filterDate('2000-01-01', '2021-12-31')\ncl_aoi = cl_collection.filterBounds(ee_aoi_geometry).filterDate('2000-01-01', '2021-12-31')\n\n# Create function to filter burned area by confidence level &gt; 50\ndef filter_by_confidence(img):\n    # Get the corresponding CL image for the same date\n    date = img.date()\n    cl_img = cl_aoi.filterDate(date).first()\n    \n    # Create confidence mask: CL &gt; 50\n    conf_mask = cl_img.select('b1').gt(0)\n    \n    # Apply confidence mask to burned area\n    return img.select('b1').updateMask(conf_mask).rename('burned_area')\n\n# Apply confidence filtering and sum total burned area over time\ntotal_burned_area = ba_aoi.map(filter_by_confidence).sum().clip(ee_aoi_geometry)\n\n# Get stats\narea_stats = total_burned_area.reduceRegion(\n    reducer=ee.Reducer.minMax().combine(ee.Reducer.mean(), sharedInputs=True),\n    geometry=ee_aoi_geometry,\n    scale=250,  # Use 250m scale to match the dataset resolution\n    maxPixels=1e9\n)\n\nprint(f\"Total burned area (square meters, 2000-2021):\")\nprint(f\"Min: {area_stats.get('burned_area_min').getInfo()}\")\nprint(f\"Max: {area_stats.get('burned_area_max').getInfo()}\")\nprint(f\"Mean: {area_stats.get('burned_area_mean').getInfo()}\")\n\n# Add to map\nm.addLayer(\n    total_burned_area.updateMask(total_burned_area.gt(0)), \n    {\n        'min': 0, \n        'max': 1000000,  # Adjust based on your stats (square meters)\n        'palette': ['white', 'yellow', 'orange', 'red', 'darkred', 'purple', 'black']\n    }, \n    'Total Burned Area (Confidence &gt; 50, 2000-2021)', \n    True, \n    0.7\n)\n\nm\n\n\n\n            \n            \n\n\nLoading ESA AVHRR-LTDR burned area and confidence level...\nTotal burned area (square meters, 2000-2021):\nMin: 0\nMax: 2636580.25\nMean: 760765.8292555296\nMostrar código\n\n# Then use it in the export\ngeemap.ee_export_image(\n    total_burned_area, \n    filename=\"/home/nissim/Documents/dev/fulbright/ciut-riesgo/data/villa_del_rosario/avhrr_ltdr_burned_area_1km_2000_2021.tif\", \n    scale=1000, \n    region=ee_aoi_geometry\n)\n\n\n\n            \n            \n\n\nGenerating URL ...\nDownloading data from https://earthengine.googleapis.com/v1/projects/grand-magpie-459819-i5/thumbnails/a64b971daa331c7f2cb3221bce589b57-b2485e1bc6e02b95c2e41479883434f7:getPixels\nPlease wait ...\nData downloaded to /home/nissim/Documents/dev/fulbright/ciut-riesgo/data/villa_del_rosario/avhrr_ltdr_burned_area_1km_2000_2021.tif\nMostrar código\nimport json\nfrom typing import Any, Dict\n\nfrom pystac_client import Client\n\n# STAC API root URL\nURL = \"https://cds.climate.copernicus.eu/api/catalogue/v1/\"\n\nclient = Client.open(URL)\nMostrar código\n# custom headers\nheaders = []\n\ncat = Client.open(URL, headers=headers)\ncat\n\n\n\n            \n            \n\n\n\n\n\n\n    \n        \n            \n                \n                    \n        \n            type\n            \"Catalog\"\n        \n    \n                \n            \n                \n                    \n        \n            id\n            \"cds-stac-api\"\n        \n    \n                \n            \n                \n                    \n        \n            stac_version\n            \"1.1.0\"\n        \n    \n                \n            \n                \n                    \n        \n            description\n            \"A STAC (https://stacspec.org/) compliant API to access ECMWF Data Stores catalogues.\"\n        \n    \n                \n            \n                \n                    \n        links[] 130 items\n        \n            \n        \n            \n                \n        \n            0\n            \n        \n            \n                \n        \n            rel\n            \"self\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            \n        \n            \n                \n        \n            rel\n            \"root\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"ECMWF Data Stores STAC Catalogue API\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            2\n            \n        \n            \n                \n        \n            rel\n            \"data\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            3\n            \n        \n            \n                \n        \n            rel\n            \"conformance\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/conformance\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"STAC/WFS3 conformance classes implemented by this server\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            4\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/reanalysis-era5-land-timeseries\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"ERA5 Land hourly time-series data from 1950 to present\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            5\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/reanalysis-era5-pressure-levels\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"ERA5 hourly data on pressure levels from 1940 to present\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            6\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/derived-era5-land-daily-statistics\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"ERA5-Land post-processed daily statistics from 1950 to present\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            7\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/reanalysis-era5-single-levels\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"ERA5 hourly data on single levels from 1940 to present\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            8\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/derived-era5-pressure-levels-daily-statistics\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"ERA5 post-processed daily statistics on pressure levels from 1940 to present\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            9\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/reanalysis-era5-land\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"ERA5-Land hourly data from 1950 to present\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            10\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/derived-era5-single-levels-daily-statistics\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"ERA5 post-processed daily statistics on single levels from 1940 to present\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            11\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/derived-utci-historical\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Thermal comfort indices derived from ERA5 reanalysis\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            12\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/insitu-observations-surface-land\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Global land surface atmospheric variables from 1755 to present from comprehensive in-situ observations\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            13\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/sis-agrometeorological-indicators\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Agrometeorological indicators from 1979 to present derived from reanalysis\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            14\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/satellite-sea-ice-edge-type\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Sea ice edge and type daily gridded data from 1978 to present derived from satellite observations\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            15\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/satellite-sea-ice-concentration\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Sea ice concentration daily gridded data from 1978 to present derived from satellite observations\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            16\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/reanalysis-carra-height-levels\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Arctic regional reanalysis on height levels from 1991 to present\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            17\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/reanalysis-carra-model-levels\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Arctic regional reanalysis on model levels from 1991 to present\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            18\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/reanalysis-carra-pressure-levels\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Arctic regional reanalysis on pressure levels from 1991 to present\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            19\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/satellite-sea-ice-thickness\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Sea ice thickness gridded data for the Arctic derived from satellite observations\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            20\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/reanalysis-carra-single-levels\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Arctic regional reanalysis on single levels from 1991 to present\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            21\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/seasonal-monthly-ocean\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Seasonal forecast monthly averages of ocean variables\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            22\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/reanalysis-era5-pressure-levels-monthly-means\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"ERA5 monthly averaged data on pressure levels from 1940 to present\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            23\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/reanalysis-cerra-height-levels\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"CERRA sub-daily regional reanalysis data for Europe on height levels from 1984 to present\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            24\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/reanalysis-cerra-model-levels\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"CERRA sub-daily regional reanalysis data for Europe on model levels from 1984 to present\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            25\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/reanalysis-cerra-pressure-levels\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"CERRA sub-daily regional reanalysis data for Europe on pressure levels from 1984 to present\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            26\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/reanalysis-era5-single-levels-monthly-means\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"ERA5 monthly averaged data on single levels from 1940 to present\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            27\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/reanalysis-era5-land-monthly-means\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"ERA5-Land monthly averaged data from 1950 to present\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            28\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/seasonal-monthly-single-levels\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Seasonal forecast monthly statistics on single levels\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            29\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/seasonal-postprocessed-single-levels\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Seasonal forecast anomalies on single levels\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            30\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/seasonal-original-single-levels\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Seasonal forecast daily and subdaily data on single levels\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            31\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/seasonal-original-pressure-levels\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Seasonal forecast subdaily data on pressure levels\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            32\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/ecv-for-climate-change\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Essential climate variables for assessment of climate variability from 1979 to present\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            33\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/seasonal-monthly-pressure-levels\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Seasonal forecast monthly statistics on pressure levels\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            34\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/seasonal-postprocessed-pressure-levels\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Seasonal forecast anomalies on pressure levels\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            35\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/reanalysis-cerra-single-levels\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"CERRA sub-daily regional reanalysis data for Europe on single levels from 1984 to present\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            36\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/satellite-sea-level-global\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Sea level gridded data from satellite observations for the global ocean from 1993 to present\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            37\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/satellite-soil-moisture\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Soil moisture gridded data from 1978 to present\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            38\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/projections-cmip6\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"CMIP6 climate projections\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            39\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/insitu-gridded-observations-nordic\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Nordic gridded temperature and precipitation data from 1961 to present derived from in-situ observations\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            40\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/sis-european-wind-storm-reanalysis\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Windstorm tracks and footprints derived from reanalysis over Europe between 1940 to present\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            41\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/satellite-aerosol-properties\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Aerosol properties gridded data from 1995 to present derived from satellite observations\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            42\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/reanalysis-oras5\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"ORAS5 global ocean reanalysis monthly data from 1958 to present\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            43\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/sis-energy-derived-reanalysis\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Climate and energy indicators for Europe from 1979 to present derived from reanalysis\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            44\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/satellite-greenland-ice-sheet-velocity\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Ice sheet velocity for Antarctica and Greenland derived from satellite observations\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            45\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/sis-hydrology-variables-derived-seasonal-forecast\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Multi-model seasonal forecasts of river discharge for Europe from January 2021 to present\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            46\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/satellite-ozone-v1\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Ozone monthly gridded data from 1970 to present derived from satellite observations\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            47\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/satellite-earth-radiation-budget\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Earth's radiation budget from 1979 to present derived from satellite observations\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            48\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/satellite-humidity-profiles\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Tropospheric humidity profiles averaged monthly and zonally from 2006 to present derived from satellite observations\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            49\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/sis-water-level-change-timeseries-cmip6\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Global sea level change time series from 1950 to 2050 derived from reanalysis and high resolution CMIP6 climate projections\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            50\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/insitu-observations-woudc-ozone-total-column-and-profiles\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"In situ total column ozone and ozone soundings from 1924 to present from the World Ozone and Ultraviolet Radiation Data Centre\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            51\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/insitu-observations-near-surface-temperature-us-climate-reference-network\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"In situ observations of meteorological and soil variables from the US Climate Reference Network near the surface from 2006 to present\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            52\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/reanalysis-carra-means\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Arctic regional reanalysis daily and monthly data from 1991 to present\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            53\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/insitu-observations-gnss\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"In-situ observations of water vapour and atmospheric delay from the ground-based GNSS network from 1996 to present\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            54\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/satellite-lake-water-level\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Lake water levels from 1992 to present derived from satellite observations\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            55\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/insitu-observations-gruan-reference-network\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"In situ temperature, relative humidity and wind profiles from 2006 to March 2020 from the GRUAN reference network\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            56\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/insitu-observations-igra-baseline-network\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"In situ observations of meteorological variables from the Integrated Global Radiosounding Archive and the Radiosounding Harmonization dataset from 1978 onward\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            57\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/satellite-cloud-properties\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Cloud properties global gridded monthly and daily data from 1979 to present derived from satellite observations\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            58\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/satellite-fire-burned-area\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Fire burned area from 2001 to present derived from satellite observations\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            59\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/satellite-surface-radiation-budget\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Surface radiation budget from 1979 to present derived from satellite observations\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            60\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/satellite-lake-water-temperature\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Lake surface water temperature from 1995 to present derived from satellite observations\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            61\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/sis-energy-pecd\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Climate and energy related variables from the Pan-European Climate Database derived from reanalysis and climate projections\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            62\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/satellite-total-column-water-vapour-land-ocean\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Global monthly and daily high-spatial resolution of total column water vapour from 2002 to 2017 derived from satellite observations\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            63\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/satellite-precipitation\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Precipitation monthly and daily gridded data from 1979 to present derived from satellite measurements\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            64\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/multi-origin-c3s-atlas\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Gridded dataset underpinning the Copernicus Interactive Climate Atlas\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            65\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/satellite-ocean-colour\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Ocean colour daily data from 1997 to present derived from satellite observations\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            66\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/satellite-albedo\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Surface albedo 10-daily gridded data from 1981 to present\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            67\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/satellite-lai-fapar\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Leaf area index and fraction absorbed of photosynthetically active radiation 10-daily gridded data from 1981 to present\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            68\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/sis-energy-derived-projections\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Climate and energy indicators for Europe from 2005 to 2100 derived from climate projections\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            69\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/satellite-land-cover\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Land cover classification gridded maps from 1992 to present derived from satellite observations\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            70\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/insitu-gridded-observations-global-and-regional\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Temperature and precipitation gridded data for global and regional domains derived from in-situ and satellite observations\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            71\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/reanalysis-era5-single-levels-timeseries\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"ERA5 hourly time-series data on single levels from 1940 to present\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            72\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/satellite-sea-surface-temperature\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Sea surface temperature daily data from 1981 to present derived from satellite observations\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            73\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/satellite-ice-sheet-elevation-change\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Ice sheet surface elevation change rate for Greenland and Antarctica from 1992 to present derived from satellite observations\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            74\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/insitu-gridded-observations-europe\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"E-OBS daily gridded meteorological data for Europe from 1950 to present derived from in-situ observations\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            75\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/satellite-upper-troposphere-humidity\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Upper tropospheric humidity gridded data from 1999 to present derived from satellite observations\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            76\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/satellite-methane\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Methane data from 2002 to present derived from satellite observations\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            77\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/satellite-carbon-dioxide\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Carbon dioxide data from 2002 to present derived from satellite observations\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            78\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/satellite-fire-radiative-power\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Fire radiative power and active fire pixels from 2020 to present derived from satellite observations\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            79\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/sis-ocean-wave-timeseries\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Ocean surface wave time series for the European coast from 1976 to 2100 derived from climate projections\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            80\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/sis-ecde-climate-indicators\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Climate indicators for Europe from 1940 to 2100 derived from reanalysis and climate projections\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            81\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/sis-european-risk-extreme-precipitation-indicators\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Extreme precipitation risk indicators for Europe and European cities from 1950 to 2019\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            82\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/sis-european-wind-storm-indicators\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Winter windstorm indicators for Europe from 1979 to 2021 derived from reanalysis\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            83\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/sis-biodiversity-cmip5-regional\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Downscaled bioclimatic indicators for selected regions from 1950 to 2100 derived from climate projections\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            84\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/sis-european-wind-storm-synthetic-events\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Synthetic windstorm events for Europe from 1986 to 2011\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            85\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/sis-extreme-indices-cmip6\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Climate extreme indices and heat stress indicators derived from CMIP6 global climate projections\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            86\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/sis-health-vector\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Climatic suitability for the presence and seasonal activity of the Aedes albopictus mosquito for Europe derived from climate projections\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            87\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/sis-heat-and-cold-spells\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Heat waves and cold spells in  Europe derived from climate projections\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            88\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/sis-hydrology-meteorology-derived-projections\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Temperature and precipitation climate impact indicators from 1970 to 2100 derived from European climate projections\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            89\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/sis-hydrology-variables-derived-projections\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Hydrology-related climate impact indicators from 1970 to 2100 derived from bias adjusted European climate projections\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            90\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/sis-hydrology-variables-derived-seasonal-reforecast\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Multi-model seasonal reforecasts of river discharge for Europe\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            91\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/sis-temperature-statistics\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Temperature statistics for Europe derived from climate projections\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            92\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/sis-tourism-fire-danger-indicators\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Fire danger indicators for Europe from 1970 to 2098 derived from climate projections\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            93\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/sis-tourism-snow-indicators\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Mountain tourism meteorological and snow indicators for Europe from 1950 to 2100 derived from reanalysis and climate projections\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            94\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/sis-water-level-change-indicators-cmip6\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Global sea level change indicators from 1950 to 2050 derived from reanalysis and high resolution CMIP6 climate projections\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            95\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/sis-agroclimatic-indicators\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Agroclimatic indicators from 1951 to 2099 derived from climate projections\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            96\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/sis-biodiversity-cmip5-global\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Global bioclimatic indicators from 1950 to 2100 derived from climate projections\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            97\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/sis-biodiversity-era5-global\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Global bioclimatic indicators from 1979 to 2018 derived from reanalysis\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            98\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/sis-biodiversity-era5-regional\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Downscaled bioclimatic indicators for selected regions from 1979 to 2018 derived from reanalysis\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            99\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/sis-marine-properties\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Marine biogeochemistry data for the Northwest European Shelf and Mediterranean Sea from 2006 up to 2100 derived from climate projections\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            100\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/sis-ocean-wave-indicators\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Ocean surface wave indicators for the European coast from 1977 to 2100 derived from climate projections\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            101\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/sis-ecv-cmip5-bias-corrected\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Essential climate variables for water sector applications derived from climate projections\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            102\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/insitu-observations-surface-marine\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Global marine surface meteorological variables from 1851 to 2010 from comprehensive in-situ observations\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            103\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/satellite-total-column-water-vapour-ocean\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Monthly and 6-hourly total column water vapour over ocean from 1988 to 2020 derived from satellite observations\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            104\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/satellite-sea-surface-temperature-ensemble-product\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Sea surface temperature daily gridded data from 1981 to 2016 derived from a multi-product satellite-based ensemble\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            105\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/satellite-precipitation-microwave\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Precipitation monthly and daily gridded data from 2000 to 2017 derived from satellite microwave observations\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            106\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/satellite-precipitation-microwave-infrared\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Daily and monthly Global Interpolated RAinFall Estimation (GIRAFE) data derived from satellite observations\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            107\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/derived-gridded-glacier-mass-change\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Glacier mass change gridded data from 1976 to present derived from the Fluctuations of Glaciers Database\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            108\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/satellite-ice-sheet-mass-balance\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Gravimetric mass balance data for the Antarctic and Greenland ice sheets from 2003 to 2022 derived from satellite observations\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            109\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/insitu-gridded-observations-alpine-precipitation\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Alpine gridded monthly precipitation data since 1871 derived from in-situ observations\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            110\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/insitu-glaciers-extent\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Glaciers distribution data from the Randolph Glacier Inventory for year 2000\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            111\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/reanalysis-era5-complete\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Complete ERA5 global atmospheric reanalysis\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            112\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/projections-climate-atlas\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Gridded monthly climate projection dataset underpinning the IPCC AR6 Interactive Atlas\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            113\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/reanalysis-cerra-land\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"CERRA-Land sub-daily regional reanalysis data for Europe from 1984 to present\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            114\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/derived-reanalysis-energy-moisture-budget\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Mass-consistent atmospheric energy and moisture budget monthly data from 1979 to present derived from ERA5 reanalysis\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            115\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/projections-cmip6-decadal-prototype\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"CMIP6 predictions underpinning the C3S decadal prediction prototypes\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            116\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/derived-near-surface-meteorological-variables\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Near surface meteorological variables from 1979 to 2019 derived from bias-corrected reanalysis\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            117\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/projections-cmip5-daily-single-levels\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"CMIP5 daily data on single levels\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            118\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/reanalysis-uerra-europe-complete\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Complete UERRA regional reanalysis for Europe from 1961 to 2019\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            119\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/projections-cordex-domains-single-levels\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"CORDEX regional climate model data on single levels\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            120\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/reanalysis-uerra-europe-height-levels\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"UERRA regional reanalysis for Europe on height levels from 1961 to 2019\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            121\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/reanalysis-uerra-europe-pressure-levels\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"UERRA regional reanalysis for Europe on pressure levels from 1961 to 2019\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            122\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/reanalysis-uerra-europe-single-levels\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"UERRA regional reanalysis for Europe on single levels from 1961 to 2019\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            123\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/reanalysis-uerra-europe-soil-levels\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"UERRA regional reanalysis for Europe on soil levels from 1961 to 2019\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            124\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/projections-cmip5-daily-pressure-levels\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"CMIP5 daily data on pressure levels\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            125\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/projections-cmip5-monthly-pressure-levels\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"CMIP5 monthly data on pressure levels\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            126\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/projections-cmip5-monthly-single-levels\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"CMIP5 monthly data on single levels\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            127\n            \n        \n            \n                \n        \n            rel\n            \"child\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/provider-c3s-data-rescue-without\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Data Rescue Service from the Copernicus Climate Change Service\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            128\n            \n        \n            \n                \n        \n            rel\n            \"service-desc\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/openapi.json\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/vnd.oai.openapi+json;version=3.0\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"OpenAPI service description\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            129\n            \n        \n            \n                \n        \n            rel\n            \"service-doc\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/docs\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"text/html\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"OpenAPI service documentation\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n                \n            \n                \n                    \n        conformsTo[] 6 items\n        \n            \n        \n            \n                \n        \n            0\n            \"https://github.com/stac-extensions/scientific/tree/v1.0.0\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            \"https://api.stacspec.org/v1.0.0-rc.1/collections\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            2\n            \"https://github.com/ecmwf-projects/cads-catalogue-api-service/stac-extentions/cads-dataset\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            3\n            \"https://api.stacspec.org/v1.0.0-rc.1/core\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            4\n            \"https://github.com/ecmwf-projects/cads-catalogue-api-service/stac-extentions/datasets-search\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            5\n            \"https://github.com/stac-extensions/timestamps/tree/v1.1.0\"\n        \n    \n            \n        \n    \n        \n    \n                \n            \n                \n                    \n        \n            title\n            \"ECMWF Data Stores STAC Catalogue API\"\nMostrar código\ncollection_search = cat.collection_search(\n    q=\"satellite-fire-burned-area\",\n)\nMostrar código\nfor result in collection_search.collections():\n    print(result.id, f\"{collection.description}\", sep=\"\\n\")\n    print(\"\\n\")\nMostrar código\ncollection = cat.get_collection(\"satellite-fire-burned-area\")\ncollection\n\n\n\n            \n            \n\n\n\n\n\n\n    \n        \n            \n                \n                    \n        \n            type\n            \"Collection\"\n        \n    \n                \n            \n                \n                    \n        \n            id\n            \"satellite-fire-burned-area\"\n        \n    \n                \n            \n                \n                    \n        \n            stac_version\n            \"1.1.0\"\n        \n    \n                \n            \n                \n                    \n        \n            description\n            \"The Burned Area products provide global information of total burned area (BA) at pixel and grid scale. The BA is identified with the date of first detection of the burned signal in the case of the pixel product, and with the total BA per grid cell in the case of the grid product. The products were obtained through the analysis of reflectance changes from medium resolution sensors (Terra MODIS, Sentinel-3 OLCI), supported by the use of MODIS thermal information. The burned area products also include information related to the land cover that has been burned, which has been extracted from the Copernicus Climate Change Service (C3S) land cover dataset, thus assuring consistency between the datasets.\nThe algorithms for BA retrieval were developed by the University of Alcala (Spain), and processed by Brockmann Consult GmbH (Germany).\nDifferent product versions are available. FireCCI v5.0cds and FireCCI v5.1cds were developed as part of the Fire ECV Climate Change Initiative Project (Fire CCI) and brokered to C3S, offering the first global burned area time series at 250m spatial resolution. FireCCI v5.1cds used a more mature algorithm than the previous version. This algorithm was adapted to Sentinel-3 OLCI data to create the C3S v1.0 burned area product, extending the BA database to the present.\nDuring July 2020, an error in some files in the version v5.1cds were identified, affecting the files of the grid product of January 2018, and the pixel and grid products of October, November and December 2019. These errors were fixed, and a new version, v5.1.1cds, was created for the whole time series, to replace version v5.1cds. The latter product has been deprecated, but it is temporally kept in the database for transparency and traceability reasons. Only version v5.1.1cds should be used.\nThe BA products are useful for researchers studying climate change, as they provide crucial information on burned biomass, which can be translated to greenhouse gases emissions amongst other contaminants. Burned area is also useful for land cover change studies, fire management and risk analysis.\"\n        \n    \n                \n            \n                \n                    \n        links[] 19 items\n        \n            \n        \n            \n                \n        \n            0\n            \n        \n            \n                \n        \n            rel\n            \"self\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/satellite-fire-burned-area\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            \n        \n            \n                \n        \n            rel\n            \"parent\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            2\n            \n        \n            \n                \n        \n            rel\n            \"root\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"ECMWF Data Stores STAC Catalogue API\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            3\n            \n        \n            \n                \n        \n            rel\n            \"qa\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/datasets/satellite-fire-burned-area?tab=quality_assurance_tab\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"text/html\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Quality assessment of the dataset\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            4\n            \n        \n            \n                \n        \n            rel\n            \"license\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://object-store.os-api.cci2.ecmwf.int:443/cci2-prod-catalogue/licences/ec-sentinel/ec-sentinel_fa2955ff48a1d82e77fc7296d63681670ecdb9d2811a0505ae60d0683b62fa64.pdf\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Copernicus Sentinel data licence\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            5\n            \n        \n            \n                \n        \n            rel\n            \"license\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://object-store.os-api.cci2.ecmwf.int:443/cci2-prod-catalogue/licences/modis_for_satellite-burned-area/modis_for_satellite-burned-area_f405357f982746c428a3cc743c4d5b6a65a3fdcd133e1cb46d60670c53eb1f79.pdf\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"MODIS licence\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            6\n            \n        \n            \n                \n        \n            rel\n            \"license\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://object-store.os-api.cci2.ecmwf.int:443/cci2-prod-catalogue/licences/fire-cci_for_satellite-burned-area/fire-cci_for_satellite-burned-area_1d67ceed006da6c6e29d22ba90cc6c4bf1924508df43d6110cf5bec61aa0a956.pdf\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Fire CCI licence\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            7\n            \n        \n            \n                \n        \n            rel\n            \"license\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://spdx.org/licenses/CC-BY-4.0\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"CC-BY licence\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            8\n            \n        \n            \n                \n        \n            rel\n            \"form\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://object-store.os-api.cci2.ecmwf.int:443/cci2-prod-catalogue/resources/satellite-fire-burned-area/form_9f074b7e2e4e066a66104b253886608de06fae1236483e060d308ecdab040514.json\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            9\n            \n        \n            \n                \n        \n            rel\n            \"constraints\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://object-store.os-api.cci2.ecmwf.int:443/cci2-prod-catalogue/resources/satellite-fire-burned-area/constraints_650f2557a7cbff0bc7491d644cc47a9c0413942aa47b4ee81da90d7bd96fb61b.json\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            10\n            \n        \n            \n                \n        \n            rel\n            \"retrieve\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/retrieve/v1/processes/satellite-fire-burned-area\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            11\n            \n        \n            \n                \n        \n            rel\n            \"costing_api\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/retrieve/v1/processes/satellite-fire-burned-area/costing\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            12\n            \n        \n            \n                \n        \n            rel\n            \"layout\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://object-store.os-api.cci2.ecmwf.int:443/cci2-prod-catalogue/resources/satellite-fire-burned-area/layout_03bec5634dd62115e9c582fedb9da8ffa53091a1b70a54d5113c0869d9ce5a41.json\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            13\n            \n        \n            \n                \n        \n            rel\n            \"related\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/cems-fire-seasonal\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Seasonal forecast of fire danger indices from the Copernicus Emergency Management Service\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            14\n            \n        \n            \n                \n        \n            rel\n            \"related\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/satellite-fire-radiative-power\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Fire radiative power and active fire pixels from 2020 to present derived from satellite observations\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            15\n            \n        \n            \n                \n        \n            rel\n            \"related\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/satellite-albedo\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Surface albedo 10-daily gridded data from 1981 to present\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            16\n            \n        \n            \n                \n        \n            rel\n            \"related\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/satellite-lai-fapar\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Leaf area index and fraction absorbed of photosynthetically active radiation 10-daily gridded data from 1981 to present\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            17\n            \n        \n            \n                \n        \n            rel\n            \"related\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/satellite-land-cover\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Land cover classification gridded maps from 1992 to present derived from satellite observations\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            18\n            \n        \n            \n                \n        \n            rel\n            \"messages\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://cds.climate.copernicus.eu/api/catalogue/v1/collections/satellite-fire-burned-area/messages\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"All messages related to the selected dataset\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n                \n            \n                \n                    \n        \n            published\n            \"2019-11-22T00:00:00Z\"\n        \n    \n                \n            \n                \n                    \n        \n            updated\n            \"2025-07-21T00:00:00Z\"\n        \n    \n                \n            \n                \n                    \n        \n            sci:doi\n            \"10.24381/cds.f333cf85\"\n        \n    \n                \n            \n                \n                    \n        \n            cads:disabled_reason\n            None\n        \n    \n                \n            \n                \n                    \n        \n            cads:sanity_check\n            \n        \n            \n                \n        \n            status\n            \"unknown\"\n        \n    \n            \n        \n            \n                \n        \n            timestamp\n            None\n        \n    \n            \n        \n    \n        \n    \n                \n            \n                \n                    \n        \n            title\n            \"Fire burned area from 2001 to present derived from satellite observations\"\n        \n    \n                \n            \n                \n                    \n        \n            extent\n            \n        \n            \n                \n        \n            spatial\n            \n        \n            \n                \n        bbox[] 1 items\n        \n            \n        \n            \n                \n        0[] 4 items\n        \n            \n        \n            \n                \n        \n            0\n            0.0\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            -90.0\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            2\n            360.0\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            3\n            90.0\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        \n            temporal\n            \n        \n            \n                \n        interval[] 1 items\n        \n            \n        \n            \n                \n        0[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            \"2001-01-01T00:00:00Z\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            \"2022-04-01T00:00:00Z\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n                \n            \n                \n                    \n        \n            license\n            \"other\"\n        \n    \n                \n            \n                \n                    \n        keywords[] 4 items\n        \n            \n        \n            \n                \n        \n            0\n            \"Temporal coverage: Past\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            \"Spatial coverage: Global\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            2\n            \"Variable domain: Land (biosphere)\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            3\n            \"Product type: Satellite observations\"\n        \n    \n            \n        \n    \n        \n    \n                \n            \n                \n                    \n        \n            assets\n            \n        \n            \n                \n        \n            thumbnail\n            \n        \n            \n                \n        \n            href\n            \"https://object-store.os-api.cci2.ecmwf.int:443/cci2-prod-catalogue/resources/satellite-fire-burned-area/overview_c94d258587b882647a42ad195dc9ff81010bb60af2f70c6ba4b2042044743bd8.png\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"image/jpg\"\n        \n    \n            \n        \n            \n                \n        roles[] 1 items\n        \n            \n        \n            \n                \n        \n            0\n            \"thumbnail\"\nMostrar código\n# Search for the specific collection\nresults = catalog.collection_search(\n    q=\"satellite-fire-burned-area\"\n)\n\n# Get the first matching collection\ncollection = next(results.collections())\nprint(f\"Found collection: {collection.id}\")\n\n\n\n            \n            \n\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[62], line 2\n      1 # Search for the specific collection\n----&gt; 2 results = catalog.collection_search(\n      3     q=\"satellite-fire-burned-area\"\n      4 )\n      6 # Get the first matching collection\n      7 collection = next(results.collections())\n\nNameError: name 'catalog' is not defined\nMostrar código\n# Check what links the collection has\nprint(\"Collection links:\")\nfor link in collection.links:\n    print(f\"Rel: {link.rel}, Href: {link.href}\")\n\n# Look for item links specifically\nitem_links = [link for link in collection.links if link.rel == \"items\"]\nprint(f\"Found {len(item_links)} item links\")\n\n\n\n            \n            \n\n\nCollection links:\nRel: self, Href: https://cds.climate.copernicus.eu/api/catalogue/v1/collections/satellite-fire-burned-area\nRel: parent, Href: https://cds.climate.copernicus.eu/api/catalogue/v1/\nRel: root, Href: https://cds.climate.copernicus.eu/api/catalogue/v1/\nRel: qa, Href: https://cds.climate.copernicus.eu/datasets/satellite-fire-burned-area?tab=quality_assurance_tab\nRel: license, Href: https://object-store.os-api.cci2.ecmwf.int:443/cci2-prod-catalogue/licences/ec-sentinel/ec-sentinel_fa2955ff48a1d82e77fc7296d63681670ecdb9d2811a0505ae60d0683b62fa64.pdf\nRel: license, Href: https://object-store.os-api.cci2.ecmwf.int:443/cci2-prod-catalogue/licences/modis_for_satellite-burned-area/modis_for_satellite-burned-area_f405357f982746c428a3cc743c4d5b6a65a3fdcd133e1cb46d60670c53eb1f79.pdf\nRel: license, Href: https://object-store.os-api.cci2.ecmwf.int:443/cci2-prod-catalogue/licences/fire-cci_for_satellite-burned-area/fire-cci_for_satellite-burned-area_1d67ceed006da6c6e29d22ba90cc6c4bf1924508df43d6110cf5bec61aa0a956.pdf\nRel: license, Href: https://spdx.org/licenses/CC-BY-4.0\nRel: form, Href: https://object-store.os-api.cci2.ecmwf.int:443/cci2-prod-catalogue/resources/satellite-fire-burned-area/form_9f074b7e2e4e066a66104b253886608de06fae1236483e060d308ecdab040514.json\nRel: constraints, Href: https://object-store.os-api.cci2.ecmwf.int:443/cci2-prod-catalogue/resources/satellite-fire-burned-area/constraints_650f2557a7cbff0bc7491d644cc47a9c0413942aa47b4ee81da90d7bd96fb61b.json\nRel: retrieve, Href: https://cds.climate.copernicus.eu/api/retrieve/v1/processes/satellite-fire-burned-area\nRel: costing_api, Href: https://cds.climate.copernicus.eu/api/retrieve/v1/processes/satellite-fire-burned-area/costing\nRel: layout, Href: https://object-store.os-api.cci2.ecmwf.int:443/cci2-prod-catalogue/resources/satellite-fire-burned-area/layout_03bec5634dd62115e9c582fedb9da8ffa53091a1b70a54d5113c0869d9ce5a41.json\nRel: related, Href: https://cds.climate.copernicus.eu/api/catalogue/v1/collections/cems-fire-seasonal\nRel: related, Href: https://cds.climate.copernicus.eu/api/catalogue/v1/collections/satellite-fire-radiative-power\nRel: related, Href: https://cds.climate.copernicus.eu/api/catalogue/v1/collections/satellite-albedo\nRel: related, Href: https://cds.climate.copernicus.eu/api/catalogue/v1/collections/satellite-lai-fapar\nRel: related, Href: https://cds.climate.copernicus.eu/api/catalogue/v1/collections/satellite-land-cover\nRel: messages, Href: https://cds.climate.copernicus.eu/api/catalogue/v1/collections/satellite-fire-burned-area/messages\nFound 0 item links\nMostrar código\nimport requests\nimport json\n\n# Get the form definition to understand what parameters are needed\nform_url = \"https://object-store.os-api.cci2.ecmwf.int:443/cci2-prod-catalogue/resources/satellite-fire-burned-area/form_9f074b7e2e4e066a66104b253886608de06fae1236483e060d308ecdab040514.json\"\n\nresponse = requests.get(form_url)\nform_data = response.json()\n\nprint(\"Form data structure:\")\nprint(json.dumps(form_data, indent=2))\n\nprint(\"\\nAvailable parameters:\")\n# The parameters might be directly in the form_data or in a different structure\nif 'form' in form_data:\n    parameters = form_data['form'].get('parameters', [])\nelif 'parameters' in form_data:\n    parameters = form_data['parameters']\nelse:\n    parameters = []\n\nfor param in parameters:\n    if isinstance(param, dict):\n        print(f\"- {param.get('name')}: {param.get('description', 'No description')}\")\n    else:\n        print(f\"- {param}\")\n\n\n\n            \n            \n\n\nForm data structure:\n[\n  {\n    \"name\": \"origin\",\n    \"label\": \"Origin\",\n    \"help\": \"Service, project or organisation in charge of the production of the data.\",\n    \"required\": true,\n    \"css\": \"todo\",\n    \"type\": \"StringChoiceWidget\",\n    \"details\": {\n      \"values\": [\n        \"c3s\",\n        \"esa_cci\"\n      ],\n      \"columns\": 2,\n      \"labels\": {\n        \"c3s\": \"C3S (Copernicus Climate Change Service)\",\n        \"esa_cci\": \"ESA-CCI (European Space Agency  Climate Change Initiative)\"\n      }\n    },\n    \"id\": \"origin\"\n  },\n  {\n    \"name\": \"sensor\",\n    \"label\": \"Sensor\",\n    \"help\": null,\n    \"required\": true,\n    \"css\": \"todo\",\n    \"type\": \"StringChoiceWidget\",\n    \"details\": {\n      \"values\": [\n        \"modis\",\n        \"olci\"\n      ],\n      \"columns\": 2,\n      \"labels\": {\n        \"modis\": \"MODIS (Moderate Resolution Imaging Spectroradiometer)\",\n        \"olci\": \"OLCI (Ocean and Land Colour Instrument)\"\n      }\n    },\n    \"id\": \"sensor\"\n  },\n  {\n    \"name\": \"variable\",\n    \"label\": \"Variable\",\n    \"help\": \"&lt;p&gt; The selction of individual variables from this dataset will be implemented at a later stage. &lt;/p&gt; &lt;p&gt;  &lt;strong&gt; Pixel product variables:&lt;/strong&gt; &lt;br&gt;  Day of detection&lt;br&gt; Confidence level&lt;br&gt; Land cover&lt;br&gt;\\n     &lt;strong&gt;Grid product variables:&lt;/strong&gt; &lt;br&gt;   Burned area&lt;br&gt; Standard error&lt;br&gt; Fraction of burnable area&lt;br&gt; Fraction of observed area&lt;br&gt; Number of patches&lt;br&gt; Burned area in vegetation class &lt;/p&gt;\",\n    \"required\": true,\n    \"css\": \"todo\",\n    \"type\": \"StringChoiceWidget\",\n    \"details\": {\n      \"values\": [\n        \"grid_variables\",\n        \"pixel_variables\"\n      ],\n      \"columns\": 2,\n      \"labels\": {\n        \"grid_variables\": \"Grid variables\",\n        \"pixel_variables\": \"Pixel variables\"\n      }\n    },\n    \"id\": \"variable\"\n  },\n  {\n    \"name\": \"version\",\n    \"label\": \"Version\",\n    \"help\": \"&lt;p&gt;&lt;strong&gt;ESA-CCI product: &lt;/strong&gt; Version 5.0cds and 5.1.1cds &lt;br&gt;\\n  These versions have the same information as the FireCCI50 and FireCCI51 burned area products from the Fire ECV Climate Change Initiative Project (Fire CCI), the latter being the one with the longer time series and the more mature algorithm.   The added string  'cds' is to indicate the changes in file format to comply with the Copernicus standards. These versions will no longer be updated. The most mature algorithm, and with the longest  time series, is version 5.1.1cds, based on Terra MODIS reflectance information.\\n  Version 5.1.1cds replaces version 5.1cds, which has been deprecated, but kept available for transparency and traceability reasons. Version 5.1.1cds should be the selected product for download instead of 5.1cds.&lt;/p&gt;\\n&lt;p&gt;&lt;strong&gt;C3S product:&lt;/strong&gt; Version 1.0  &lt;br&gt;\\n   Version 1.0 is the first burned area product developed especifically for the C3S Programme, and it is a continuation of the v5.1cds product, but using Sentinel-3 OLCI reflectance instead of Terra MODIS. This product partially overlaps with v5.1cds to assure an uninterrupted time series and allow for consistency assessment, starting in 2017.&lt;/p&gt;\",\n    \"required\": true,\n    \"css\": \"todo\",\n    \"type\": \"StringChoiceWidget\",\n    \"details\": {\n      \"values\": [\n        \"5_1_1cds\",\n        \"1_0\",\n        \"1_1\",\n        \"5_0cds\",\n        \"5_1cds\"\n      ],\n      \"columns\": 2,\n      \"labels\": {\n        \"5_1_1cds\": \"5.1.1cds\",\n        \"1_0\": \"1.0 (deprecated)\",\n        \"1_1\": \"1.1\",\n        \"5_0cds\": \"5.0cds\",\n        \"5_1cds\": \"5.1cds (deprecated)\"\n      }\n    },\n    \"id\": \"version\"\n  },\n  {\n    \"name\": \"region\",\n    \"label\": \"Region\",\n    \"help\": null,\n    \"required\": true,\n    \"css\": \"todo\",\n    \"type\": \"StringListWidget\",\n    \"details\": {\n      \"values\": [\n        \"north_america\",\n        \"south_america\",\n        \"europe\",\n        \"asia\",\n        \"africa\",\n        \"australia\"\n      ],\n      \"columns\": 3,\n      \"labels\": {\n        \"north_america\": \"North America\",\n        \"south_america\": \"South America\",\n        \"europe\": \"Europe\",\n        \"asia\": \"Asia\",\n        \"africa\": \"Africa\",\n        \"australia\": \"Australia\"\n      }\n    },\n    \"id\": \"region\"\n  },\n  {\n    \"name\": \"year\",\n    \"label\": \"Year\",\n    \"help\": null,\n    \"required\": true,\n    \"css\": \"todo\",\n    \"type\": \"StringListWidget\",\n    \"details\": {\n      \"values\": [\n        \"2001\",\n        \"2002\",\n        \"2003\",\n        \"2004\",\n        \"2005\",\n        \"2006\",\n        \"2007\",\n        \"2008\",\n        \"2009\",\n        \"2010\",\n        \"2011\",\n        \"2012\",\n        \"2013\",\n        \"2014\",\n        \"2015\",\n        \"2016\",\n        \"2017\",\n        \"2018\",\n        \"2019\",\n        \"2020\",\n        \"2021\",\n        \"2022\",\n        \"2023\"\n      ],\n      \"columns\": 6,\n      \"labels\": {\n        \"2001\": \"2001\",\n        \"2002\": \"2002\",\n        \"2003\": \"2003\",\n        \"2004\": \"2004\",\n        \"2005\": \"2005\",\n        \"2006\": \"2006\",\n        \"2007\": \"2007\",\n        \"2008\": \"2008\",\n        \"2009\": \"2009\",\n        \"2010\": \"2010\",\n        \"2011\": \"2011\",\n        \"2012\": \"2012\",\n        \"2013\": \"2013\",\n        \"2014\": \"2014\",\n        \"2015\": \"2015\",\n        \"2016\": \"2016\",\n        \"2017\": \"2017\",\n        \"2018\": \"2018\",\n        \"2019\": \"2019\",\n        \"2020\": \"2020\",\n        \"2021\": \"2021\",\n        \"2022\": \"2022\",\n        \"2023\": \"2023\"\n      }\n    },\n    \"id\": \"year\"\n  },\n  {\n    \"name\": \"month\",\n    \"label\": \"Month\",\n    \"help\": null,\n    \"required\": true,\n    \"css\": \"todo\",\n    \"type\": \"StringListWidget\",\n    \"details\": {\n      \"values\": [\n        \"01\",\n        \"02\",\n        \"03\",\n        \"04\",\n        \"05\",\n        \"06\",\n        \"07\",\n        \"08\",\n        \"09\",\n        \"10\",\n        \"11\",\n        \"12\"\n      ],\n      \"columns\": 6,\n      \"labels\": {\n        \"01\": \"January\",\n        \"02\": \"February\",\n        \"03\": \"March\",\n        \"04\": \"April\",\n        \"05\": \"May\",\n        \"06\": \"June\",\n        \"07\": \"July\",\n        \"08\": \"August\",\n        \"09\": \"September\",\n        \"10\": \"October\",\n        \"11\": \"November\",\n        \"12\": \"December\"\n      }\n    },\n    \"id\": \"month\"\n  },\n  {\n    \"name\": \"nominal_day\",\n    \"label\": \"Nominal day\",\n    \"help\": \"&lt;p&gt; For &lt;strong&gt;monthly &lt;/strong&gt; products, the value is always 01, representing the first day of the month &lt;br&gt;\\n    For &lt;strong&gt;biweekly &lt;/strong&gt; products the values are 07 (middle of the first fortnight) and 22 (middle of the second fortnight). &lt;/p&gt;\",\n    \"required\": true,\n    \"css\": \"todo\",\n    \"type\": \"StringListWidget\",\n    \"details\": {\n      \"values\": [\n        \"01\",\n        \"07\",\n        \"22\"\n      ],\n      \"columns\": 3,\n      \"labels\": {\n        \"01\": \"01\",\n        \"07\": \"07\",\n        \"22\": \"22\"\n      }\n    },\n    \"id\": \"nominal_day\"\n  },\n  {\n    \"type\": \"LicenceWidget\",\n    \"name\": \"licences\",\n    \"label\": \"Terms of use\",\n    \"help\": null,\n    \"details\": {\n      \"licences\": [\n        {\n          \"id\": \"cc-by\",\n          \"revision\": 1,\n          \"label\": \"CC-BY licence\",\n          \"contents_url\": \"https://object-store.os-api.cci2.ecmwf.int:443/cci2-prod-catalogue/licences/cc-by/cc-byv1_2b61eb0b42e053566cb9447c1d2847a69a275c095e00fca00bad1bf5326a9432.md\",\n          \"attachment_url\": \"https://spdx.org/licenses/CC-BY-4.0\",\n          \"spdx_identifier\": \"CC-BY-4.0\"\n        },\n        {\n          \"id\": \"ec-sentinel\",\n          \"revision\": 1,\n          \"label\": \"Copernicus Sentinel data licence\",\n          \"contents_url\": \"https://object-store.os-api.cci2.ecmwf.int:443/cci2-prod-catalogue/licences/ec-sentinel/ec-sentinelv1_33996372dfdcdc99b1c22cbd15dbd86fec730b420d81cf3bf8a35461b50c00ef.md\",\n          \"attachment_url\": \"https://object-store.os-api.cci2.ecmwf.int:443/cci2-prod-catalogue/licences/ec-sentinel/ec-sentinel_fa2955ff48a1d82e77fc7296d63681670ecdb9d2811a0505ae60d0683b62fa64.pdf\",\n          \"spdx_identifier\": null\n        },\n        {\n          \"id\": \"fire-cci_for_satellite-burned-area\",\n          \"revision\": 1,\n          \"label\": \"Fire CCI licence\",\n          \"contents_url\": \"https://object-store.os-api.cci2.ecmwf.int:443/cci2-prod-catalogue/licences/fire-cci_for_satellite-burned-area/fire-cci_for_satellite-burned-areav1_84f2e5fb64ebcaf9edf7fccccc8ec60f322eb2b3b4ca22594ed6d7e4062f4f40.md\",\n          \"attachment_url\": \"https://object-store.os-api.cci2.ecmwf.int:443/cci2-prod-catalogue/licences/fire-cci_for_satellite-burned-area/fire-cci_for_satellite-burned-area_1d67ceed006da6c6e29d22ba90cc6c4bf1924508df43d6110cf5bec61aa0a956.pdf\",\n          \"spdx_identifier\": null\n        },\n        {\n          \"id\": \"modis_for_satellite-burned-area\",\n          \"revision\": 1,\n          \"label\": \"MODIS licence\",\n          \"contents_url\": \"https://object-store.os-api.cci2.ecmwf.int:443/cci2-prod-catalogue/licences/modis_for_satellite-burned-area/modis_for_satellite-burned-areav1_7087e888986674b24b5cf225dd592638646612001d23e28c03877ed234f0593e.md\",\n          \"attachment_url\": \"https://object-store.os-api.cci2.ecmwf.int:443/cci2-prod-catalogue/licences/modis_for_satellite-burned-area/modis_for_satellite-burned-area_f405357f982746c428a3cc743c4d5b6a65a3fdcd133e1cb46d60670c53eb1f79.pdf\",\n          \"spdx_identifier\": null\n        }\n      ]\n    }\n  }\n]\n\nAvailable parameters:\nMostrar código\nprint(\"Available parameters:\")\nfor param in form_data:\n    if isinstance(param, dict) and 'name' in param:\n        print(f\"- {param['name']}: {param.get('label', 'No label')}\")\n        if 'help' in param and param['help']:\n            print(f\"  Help: {param['help'][:100]}...\")  # First 100 chars\n        if 'details' in param and 'values' in param['details']:\n            print(f\"  Options: {param['details']['values']}\")\n        print()\n\n\n\n            \n            \n\n\nAvailable parameters:\n- origin: Origin\n  Help: Service, project or organisation in charge of the production of the data....\n  Options: ['c3s', 'esa_cci']\n\n- sensor: Sensor\n  Options: ['modis', 'olci']\n\n- variable: Variable\n  Help: &lt;p&gt; The selction of individual variables from this dataset will be implemented at a later stage. &lt;/p...\n  Options: ['grid_variables', 'pixel_variables']\n\n- version: Version\n  Help: &lt;p&gt;&lt;strong&gt;ESA-CCI product: &lt;/strong&gt; Version 5.0cds and 5.1.1cds &lt;br&gt;\n  These versions have the sam...\n  Options: ['5_1_1cds', '1_0', '1_1', '5_0cds', '5_1cds']\n\n- region: Region\n  Options: ['north_america', 'south_america', 'europe', 'asia', 'africa', 'australia']\n\n- year: Year\n  Options: ['2001', '2002', '2003', '2004', '2005', '2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', '2020', '2021', '2022', '2023']\n\n- month: Month\n  Options: ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12']\n\n- nominal_day: Nominal day\n  Help: &lt;p&gt; For &lt;strong&gt;monthly &lt;/strong&gt; products, the value is always 01, representing the first day of th...\n  Options: ['01', '07', '22']\n\n- licences: Terms of use\nMostrar código\nimport requests\nimport json\n\n# CDS API endpoint for data requests\nretrieve_url = \"https://cds.climate.copernicus.eu/api/retrieve/v1/processes/satellite-fire-burned-area\"\n\n# Request parameters for South America, all years, all months\nrequest_data = {\n    \"origin\": \"esa_cci\",  # ESA-CCI has longer time series\n    \"sensor\": \"modis\",    # MODIS has longer time series than OLCI\n    \"variable\": \"grid_variables\",  # Grid variables include burned area\n    \"version\": \"5_1_1cds\",  # Most mature version\n    \"region\": \"south_america\",\n    \"year\": [\"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\"],\n    \"month\": [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"],\n    \"nominal_day\": \"01\",  # Monthly products\n    \"licences\": [\"cc-by\"]  # CC-BY license\n}\n\n# Make the request\nresponse = requests.post(retrieve_url, json=request_data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(\"Request submitted successfully!\")\n    print(f\"Request ID: {result.get('request_id')}\")\n    print(f\"Status: {result.get('status')}\")\nelse:\n    print(f\"Error: {response.status_code}\")\n    print(response.text)\n\n\n\n            \n            \n\n\nError: 405\n{\"detail\":\"Method Not Allowed\"}\nMostrar código\nimport cdsapi\nimport os\n\n# Create output directory\noutput_dir = \"cds_burned_area_data\"\nos.makedirs(output_dir, exist_ok=True)\n\ndataset = \"satellite-fire-burned-area\"\nrequest = {\n    \"origin\": \"c3s\",\n    \"sensor\": \"olci\", \n    \"variable\": \"grid_variables\",\n    \"version\": \"1_1\",\n    \"year\": [\n        \"2017\", \"2018\", \"2019\",\n        \"2020\", \"2021\", \"2022\",\n        \"2023\"\n    ],\n    \"month\": [\n        \"01\", \"02\", \"03\",\n        \"04\", \"05\", \"06\", \n        \"07\", \"08\", \"09\",\n        \"10\", \"11\", \"12\"\n    ],\n    \"nominal_day\": [\"01\"]\n}\n\nclient = cdsapi.Client()\n\n# Download with a specific filename\noutput_file = os.path.join(output_dir, \"burned_area_south_america_2017_2023.nc\")\nclient.retrieve(dataset, request, output_file)\n\n\n\n            \n            \n\n\n\n---------------------------------------------------------------------------\nException                                 Traceback (most recent call last)\nCell In[68], line 28\n      8 dataset = \"satellite-fire-burned-area\"\n      9 request = {\n     10     \"origin\": \"c3s\",\n     11     \"sensor\": \"olci\", \n   (...)     25     \"nominal_day\": [\"01\"]\n     26 }\n---&gt; 28 client = cdsapi.Client()\n     30 # Download with a specific filename\n     31 output_file = os.path.join(output_dir, \"burned_area_south_america_2017_2023.nc\")\n\nFile ~/Documents/dev/fulbright/ciut-riesgo/.venv/lib/python3.12/site-packages/cdsapi/api.py:281, in Client.__new__(cls, url, key, *args, **kwargs)\n    280 def __new__(cls, url=None, key=None, *args, **kwargs):\n--&gt; 281     _, token, _ = get_url_key_verify(url, key, None)\n    282     if \":\" in token:\n    283         return super().__new__(cls)\n\nFile ~/Documents/dev/fulbright/ciut-riesgo/.venv/lib/python3.12/site-packages/cdsapi/api.py:69, in get_url_key_verify(url, key, verify)\n     66             verify = bool(int(config.get(\"verify\", 1)))\n     68 if url is None or key is None:\n---&gt; 69     raise Exception(\"Missing/incomplete configuration file: %s\" % (dotrc))\n     71 # If verify is still None, then we set to default value of True\n     72 if verify is None:\n\nException: Missing/incomplete configuration file: /home/nissim/.cdsapirc\nMostrar código\nimport shapely.geometry\n\naoi_as_shapely_shape = aoi.geometry.iloc[0]\nMostrar código\n\nsearch = client.search(\n    max_items=25,\n    collections=\"satellite-fire-burned-area\",\n    intersects=aoi_as_shapely_shape,\n)\n\nprint(\n    \"AOI as Shapely Geometry object from shape(), \"\n    f\"found {len(list(search.items()))} items\"\n)\n\n\n\n            \n            \n\n\n\n---------------------------------------------------------------------------\nDoesNotConformTo                          Traceback (most recent call last)\nCell In[53], line 1\n----&gt; 1 search = client.search(\n      2     max_items=25,\n      3     collections=\"satellite-fire-burned-area\",\n      4     intersects=aoi_as_shapely_shape,\n      5 )\n      7 print(\n      8     \"AOI as Shapely Geometry object from shape(), \"\n      9     f\"found {len(list(search.items()))} items\"\n     10 )\n\nFile ~/Documents/dev/fulbright/ciut-riesgo/.venv/lib/python3.12/site-packages/pystac_client/client.py:612, in Client.search(self, method, max_items, limit, ids, collections, bbox, intersects, datetime, query, filter, filter_lang, sortby, fields)\n    510 \"\"\"Query the ``/search`` endpoint using the given parameters.\n    511 \n    512 This method returns an :class:`~pystac_client.ItemSearch` instance. See that\n   (...)    608         a ``\"rel\"`` type of ``\"search\"``.\n    609 \"\"\"\n    611 if not self.conforms_to(ConformanceClasses.ITEM_SEARCH):\n--&gt; 612     raise DoesNotConformTo(\n    613         \"ITEM_SEARCH\", \"There is no fallback option available for search.\"\n    614     )\n    616 return ItemSearch(\n    617     url=self._search_href(),\n    618     method=method,\n   (...)    632     modifier=self.modifier,\n    633 )\n\nDoesNotConformTo: Server does not conform to ITEM_SEARCH, There is no fallback option available for search.\nMostrar código\n# Extract the geometry from the FeatureCollection\nee_aoi_geometry = ee_aoi.geometry()\n\n# Then use it in the export\ngeemap.ee_export_image(\n    burn_count_clipped, \n    filename=\"/home/nissim/Documents/dev/fulbright/ciut-riesgo/data/villa_del_rosario/gabam.tif\", \n    scale=90, \n    region=ee_aoi_geometry\n)\n\n\n\n            \n            \n\n\nGenerating URL ...\nDownloading data from https://earthengine.googleapis.com/v1/projects/grand-magpie-459819-i5/thumbnails/dcf2f87e6814532d41268adb9acb5a80-d56f7d28b8d5aa397573330182b8f258:getPixels\nPlease wait ...\nData downloaded to /home/nissim/Documents/dev/fulbright/ciut-riesgo/data/villa_del_rosario/gabam.tif\nMostrar código\n# Load ESA AVHRR-LTDR observations dataset\nprint(\"Loading ESA AVHRR-LTDR observations...\")\nob_collection = ee.ImageCollection(\"projects/sat-io/open-datasets/ESA/AVHRR-LTDR/OB\")\n\n# Filter by AOI and sum all observations across all years\nob_aoi = ob_collection.filterBounds(ee_aoi_geometry)\ntotal_observations = ob_aoi.sum().clip(ee_aoi_geometry)\n\n# Get stats\nobs_stats = total_observations.reduceRegion(\n    reducer=ee.Reducer.minMax().combine(ee.Reducer.mean(), sharedInputs=True),\n    geometry=ee_aoi_geometry,\n    scale=1000,\n    maxPixels=1e9\n)\n\nprint(f\"Min observations: {obs_stats.get('b1_min').getInfo()}\")\nprint(f\"Max observations: {obs_stats.get('b1_max').getInfo()}\")\nprint(f\"Mean observations: {obs_stats.get('b1_mean').getInfo()}\")\n\n# Add to map\nm.addLayer(\n    total_observations.updateMask(total_observations.gte(0)), \n    {\n        'min': 0, \n        'max': 100,  # Adjust based on your stats\n        'palette': ['#7f3b08','#b35806','#e08214','#fdb863','#fee0b6','#f7f7f7','#d8daeb','#b2abd2','#8073ac','#542788','#2d004b']\n    }, \n    'ESA Total Observations (All Years)', \n    True, \n    0.7\n)\n\nm\n\n\n\n            \n            \n\n\nLoading ESA AVHRR-LTDR observations...\nMin observations: 8595\nMax observations: 8936\nMean observations: 8741.492012692937\nMostrar código\nprint(f\"Total MODIS fires in AOI: {all_modis_aoi.size().getInfo()}\")\nprint(f\"Total VIIRS fires in AOI: {all_viirs_aoi.size().getInfo()}\")\n\n\n\n            \n            \n\n\nTotal MODIS fires in AOI: 486\nTotal VIIRS fires in AOI: 561\nMostrar código\n# Convert styled layers back to feature collections\nmodis_day_fc = modis_styled.filter(ee.Filter.eq('daynight', 'D'))\nmodis_night_fc = modis_styled.filter(ee.Filter.eq('daynight', 'N'))\nviirs_day_fc = viirs_styled.filter(ee.Filter.eq('daynight', 'D'))\nviirs_night_fc = viirs_styled.filter(ee.Filter.eq('daynight', 'N'))\n\n# Optional: Add styling properties as attributes for export\ndef add_export_properties(fc):\n    \"\"\"Add styling properties as regular attributes for easier export\"\"\"\n    def add_props(feature):\n        style_props = feature.get('styleProperty')\n        return feature.set({\n            'pointSize': ee.Dictionary(style_props).get('pointSize'),\n            'color': ee.Dictionary(style_props).get('color')\n        })\n    return fc.map(add_props)\n\n# Apply to all collections\nmodis_day_fc = add_export_properties(modis_day_fc)\nmodis_night_fc = add_export_properties(modis_night_fc)\nviirs_day_fc = add_export_properties(viirs_day_fc)\nviirs_night_fc = add_export_properties(viirs_night_fc)\nMostrar código\nmodis_day_fc\n\n\n\n            \n            \n\n\n&lt;ee.featurecollection.FeatureCollection object at 0x7ba6a4485ca0&gt;\nMostrar código\n# Convert to geodataframes directly from the original feature collections\nmodis_day_gdf = geemap.ee_to_gdf(all_modis_aoi.filter(ee.Filter.eq('daynight', 'D')))\nmodis_night_gdf = geemap.ee_to_gdf(all_modis_aoi.filter(ee.Filter.eq('daynight', 'N')))\nviirs_day_gdf = geemap.ee_to_gdf(all_viirs_aoi.filter(ee.Filter.eq('daynight', 'D')))\nviirs_night_gdf = geemap.ee_to_gdf(all_viirs_aoi.filter(ee.Filter.eq('daynight', 'N')))\nMostrar código\nmodis_gdf=geemap.ee_to_gdf(all_modis_aoi)\nviirs_gdf=geemap.ee_to_gdf(all_viirs_aoi)\nMostrar código\nmodis_gdf.to_file(\"/home/nissim/Documents/dev/fulbright/ciut-riesgo/data/villa_del_rosario/datos/_all_modis.geojson\")\nviirs_gdf.to_file(\"/home/nissim/Documents/dev/fulbright/ciut-riesgo/data/villa_del_rosario/datos/_all_viirs.geojson\")\nMostrar código\nmodis_gdf.head()\n\n\n\n            \n            \n\n\n\n\n\n\n\n\n\ngeometry\nacq_date\nacq_time\nbright_t31\nbrightness\nconfidence\ndaynight\nfrp\ninstrument\nsatellite\nscan\ntrack\ntype\nversion\n\n\n\n\n0\nPOINT (-62.9187 -32.019)\n2000-11-14\n1439\n295.600006\n308.200012\n49\nD\n4.800000\nMODIS\nTerra\n1.0\n1.0\n0\n6.2\n\n\n1\nPOINT (-63.6187 -31.5323)\n2001-07-28\n1433\n273.799988\n307.299988\n49\nD\n10.400000\nMODIS\nTerra\n1.0\n1.0\n0\n6.2\n\n\n2\nPOINT (-63.6081 -31.5338)\n2001-07-28\n1433\n277.100006\n303.100006\n55\nD\n7.800000\nMODIS\nTerra\n1.0\n1.0\n0\n6.2\n\n\n3\nPOINT (-63.6317 -31.5596)\n2002-07-12\n1811\n296.100006\n307.200012\n32\nD\n4.200000\nMODIS\nAqua\n1.0\n1.0\n0\n6.2\n\n\n4\nPOINT (-63.6423 -31.5612)\n2002-07-12\n1811\n299.700012\n366.799988\n100\nD\n104.300003\nMODIS\nAqua\n1.0\n1.0\n0\n6.2\nMostrar código\nviirs_gdf.head()\n\n\n\n            \n            \n\n\n\n\n\n\n\n\n\ngeometry\nacq_date\nacq_time\nbright_ti4\nbright_ti5\nconfidence\ndaynight\nfrp\ninstrument\nsatellite\nscan\ntrack\ntype\nversion\n\n\n\n\n0\nPOINT (-63.36078 -31.46117)\n2012-10-24\n1847\n367.000000\n293.230011\nh\nD\n20.32\nVIIRS\nN\n0.45\n0.63\n0\n1\n\n\n1\nPOINT (-63.84928 -31.62288)\n2012-07-25\n1854\n367.000000\n293.890015\nh\nD\n28.65\nVIIRS\nN\n0.52\n0.67\n0\n1\n\n\n2\nPOINT (-63.83323 -31.66405)\n2012-06-27\n515\n301.040009\n283.869995\nn\nN\n0.61\nVIIRS\nN\n0.38\n0.36\n0\n1\n\n\n3\nPOINT (-63.83244 -31.66419)\n2012-05-10\n516\n300.690002\n286.739990\nn\nN\n0.61\nVIIRS\nN\n0.38\n0.36\n0\n1\n\n\n4\nPOINT (-63.83203 -31.66506)\n2012-07-18\n522\n297.760010\n277.149994\nn\nN\n0.83\nVIIRS\nN\n0.39\n0.36\n0\n1\nMostrar código\n# extract just geometry and date from both gdfs (year is stored in acq_date as YYYY-MM-DD in both)\n# concatenate into a single dataframe\n# group by geometry, year\n# create a hex grid with 2.5 radis\n# count number of years per hex with at least one observation (total number of years)\nMostrar código\ncombined_gdf.to_parquet(\"/home/nissim/Documents/dev/fulbright/ciut-riesgo/data/villa_del_rosario/datos/combined_gdf.parquet\")\nMostrar código\nimport pandas as pd\nimport geopandas as gpd\nimport geohexgrid as ghg\n\n# 1. Extract just geometry and date from both gdfs\nprint(\"Extracting geometry and date from MODIS data...\")\nmodis_subset = modis_gdf[['geometry', 'acq_date']].copy()\nmodis_subset['source'] = 'MODIS'\n\nprint(\"Extracting geometry and date from VIIRS data...\")\nviirs_subset = viirs_gdf[['geometry', 'acq_date']].copy()\nviirs_subset['source'] = 'VIIRS'\n\n# 2. Concatenate into a single dataframe\nprint(\"Concatenating dataframes...\")\ncombined_gdf = pd.concat([modis_subset, viirs_subset], ignore_index=True)\n\n# Ensure we're working in the correct CRS\ncombined_gdf = combined_gdf.to_crs(USE_CRS)\n\n# 3. Extract year from acq_date and group by geometry, year\nprint(\"Processing dates and grouping...\")\ncombined_gdf['acq_date'] = pd.to_datetime(combined_gdf['acq_date'])\ncombined_gdf['year'] = combined_gdf['acq_date'].dt.year\n\n# Group by geometry and year to get unique observations per year\ngrouped = combined_gdf.groupby(['geometry', 'year']).size().reset_index(name='count')\ngrouped_gdf = gpd.GeoDataFrame(grouped, geometry='geometry', crs=USE_CRS)\n\nprint(f\"Total unique geometry-year combinations: {len(grouped_gdf)}\")\n\n# 4. Create a hex grid with 2.5km radius using geohexgrid\nprint(\"Creating hex grid...\")\nhex_gdf = ghg.make_grid_from_gdf(grouped_gdf, R=1000)\n\nprint(f\"Created {len(hex_gdf)} hex cells\")\n\n# 5. Count number of years per hex with at least one observation\nprint(\"Counting years per hex...\")\n\n# Spatial join to assign each point to a hex\npoints_in_hex = gpd.sjoin(grouped_gdf, hex_gdf, how='left', predicate='within')\n\n# Count unique years per hex\nyears_per_hex = points_in_hex.groupby('cell_id')['year'].nunique().reset_index(name='years_with_observations')\n\n# Merge back with hex geometry\nhex_with_counts = hex_gdf.merge(years_per_hex, on='cell_id', how='left')\nhex_with_counts['years_with_observations'] = hex_with_counts['years_with_observations'].fillna(0)\n\n# 6. Count total observations per hex (regardless of year)\nprint(\"Counting total observations per hex...\")\n\n# Count total observations per hex\ntotal_obs_per_hex = points_in_hex.groupby('cell_id')['count'].sum().reset_index(name='total_observations')\n\n# Merge back with hex geometry\nhex_with_total_obs = hex_gdf.merge(total_obs_per_hex, on='cell_id', how='left')\nhex_with_total_obs['total_observations'] = hex_with_total_obs['total_observations'].fillna(0)\n\n\n\n            \n            \n\n\nExtracting geometry and date from MODIS data...\nExtracting geometry and date from VIIRS data...\nConcatenating dataframes...\nProcessing dates and grouping...\nTotal unique geometry-year combinations: 1047\nCreating hex grid...\nCreated 442 hex cells\nCounting years per hex...\nCounting total observations per hex...\nMostrar código\n# Plot 1: Years with observations\nfig, ax1 = plt.subplots(1, 1, figsize=(10, 10))\n\nhex_with_counts.plot(\n    column='years_with_observations',\n    cmap='YlOrRd',\n    legend=True,\n    ax=ax1,\n    edgecolor='black',\n    linewidth=0.5\n)\ngrouped_gdf.plot(ax=ax1, color='blue', markersize=1, alpha=0.6)\nax1.set_title('Years with Data per Hex (1km radius)')\nax1.set_xlabel('X (meters)')\nax1.set_ylabel('Y (meters)')\n\nplt.tight_layout()\nplt.show()\nMostrar código\n# Plot 2: Total observations\nfig, ax2 = plt.subplots(1, 1, figsize=(10, 10))\n\nhex_with_total_obs.plot(\n    column='total_observations',\n    cmap='YlOrRd',\n    legend=True,\n    ax=ax2,\n    edgecolor='black',\n    linewidth=0.5\n)\ngrouped_gdf.plot(ax=ax2, color='blue', markersize=1, alpha=0.6)\nax2.set_title('Total Observations per Hex (1km radius)')\nax2.set_xlabel('X (meters)')\nax2.set_ylabel('Y (meters)')\n\nplt.tight_layout()\nplt.show()\nMostrar código\nhex_with_counts.to_parquet(\"/home/nissim/Documents/dev/fulbright/ciut-riesgo/data/villa_del_rosario/datos/hex_grid_annual_counts_1km.parquet\")\nMostrar código\nhex_with_counts.hist(\"years_with_observations\", bins=22)\n\n\n\n            \n            \n\n\narray([[&lt;Axes: title={'center': 'years_with_observations'}&gt;]],\n      dtype=object)\nMostrar código\n# Plot the results\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(1, 1, figsize=(12, 10))\n\n# Plot hexes colored by number of years with observations\nhex_with_counts.plot(\n    column='years_with_observations',\n    cmap='YlOrRd',\n    legend=True,\n    ax=ax,\n    edgecolor='black',\n    linewidth=0.5\n)\n\n# Plot the original points\ngrouped_gdf.plot(ax=ax, color='blue', markersize=1, alpha=0.6)\n\nax.set_title('Fire Observations: Years with Data per Hex (2.5km radius)')\nax.set_xlabel('X (meters)')\nax.set_ylabel('Y (meters)')\n\nplt.tight_layout()\nplt.show()\n\n\n\n            \n            \n\n\n\n\n\n\n\n\n\nResults saved to 'fire_observations_hex_grid.geojson'\nMostrar código\nfrom shapely.geometry import Point\nfrom shapely.ops import unary_union\nimport pandas\n\n# Combine both dataframes\ncombined = pd.concat([modis_gdf[['geometry']], viirs_gdf[['geometry']]], ignore_index=True)\n\n# Round coordinates to ~100m precision (0.001 degrees ≈ 100m)\ndef round_geometry(geom):\n    return Point(round(geom.x, 2), round(geom.y, 2))\n\ncombined['rounded_geom'] = combined['geometry'].apply(round_geometry)\n\n# Remove duplicates based on rounded geometry\nunique_points = combined.drop_duplicates(subset=['rounded_geom']).drop(columns=['rounded_geom'])\n\nprint(f\"Original points: {len(modis_gdf) + len(viirs_gdf)}\")\nprint(f\"Unique points: {len(unique_points)}\")\n\n\n\n            \n            \n\n\nOriginal points: 187\nUnique points: 92\nMostrar código\n# unique_points.to_parquet(\"/home/nissim/Documents/dev/fulbright/ciut-riesgo/data/villa_del_rosario/unique_points.parquet\")\nMostrar código\n# Read in unique points and create 1km buffers\n# Ensure all data has the same CRS (USE_CRS = \"EPSG:5347\")\n# Calculate population statistics within the unioned buffer\n\nimport pandas as pd\nfrom shapely.geometry import Point\nfrom shapely.ops import unary_union\nimport geopandas as gpd\nimport numpy as np\n\n# 1. Read in unique points (if not already in memory)\n# unique_points = gpd.read_parquet(\"/home/nissim/Documents/dev/fulbright/ciut-riesgo/data/villa_del_rosario/datos/unique_points.parquet\")\n\n# 2. Ensure unique_points has the correct CRS\nif unique_points.crs != USE_CRS:\n    unique_points = unique_points.to_crs(USE_CRS)\n\n# 3. Create 1km buffers around each point\nprint(f\"Creating 1km buffers around {len(unique_points)} unique points...\")\nunique_points['buffer_1km'] = unique_points.geometry.buffer(2000)  # 1000 meters = 1km\n\n# 4. Union all buffers into a single geometry\nprint(\"Creating union of all buffers...\")\nunioned_buffer = gpd.GeoDataFrame(\n    geometry=[unary_union(unique_points['buffer_1km'].values)],\n    crs=USE_CRS\n)\n\n# 5. Ensure population rasters have the same CRS as the unioned buffer\nprint(\"Ensuring CRS consistency...\")\nif pob_redistribuida_da.rio.crs != USE_CRS:\n    pob_redistribuida_da = pob_redistribuida_da.rio.reproject(USE_CRS)\n    \nif pob_privacion_da.rio.crs != USE_CRS:\n    pob_privacion_da = pob_privacion_da.rio.reproject(USE_CRS)\n\n# 6. Calculate population statistics within the unioned buffer\nprint(\"Calculating population statistics within unioned buffer...\")\n\n# Use rasterstats to calculate zonal statistics\nfrom rasterstats import zonal_stats\n\n# Convert unioned buffer to a format that rasterstats can use\nbuffer_geom = unioned_buffer.geometry.iloc[0]\n\n# Calculate total population within buffer\npop_stats = zonal_stats(\n    buffer_geom,\n    pob_redistribuida_da.values,\n    affine=pob_redistribuida_da.rio.transform(),\n    stats=['sum', 'count'],\n    nodata=0\n)\n\n# Calculate population in poverty within buffer\npoverty_stats = zonal_stats(\n    buffer_geom,\n    pob_privacion_da.values,\n    affine=pob_privacion_da.rio.transform(),\n    stats=['sum', 'count'],\n    nodata=0\n)\n\n# 7. Report results\nprint(\"\\n\" + \"=\"*50)\nprint(\"POPULATION ANALYSIS WITHIN 1KM FIRE BUFFERS\")\nprint(\"=\"*50)\nprint(f\"Number of unique fire points: {len(unique_points)}\")\nprint(f\"Buffer radius: 1 km\")\nprint(f\"Coordinate Reference System: {USE_CRS}\")\nprint(f\"Total population within unioned buffer: {pop_stats[0]['sum']:.0f}\")\nprint(f\"Population in poverty within unioned buffer: {poverty_stats[0]['sum']:.0f}\")\n\nif pop_stats[0]['sum'] &gt; 0:\n    poverty_rate = (poverty_stats[0]['sum'] / pop_stats[0]['sum']) * 100\n    print(f\"Poverty rate within buffer: {poverty_rate:.2f}%\")\nelse:\n    print(\"No population found within the buffer area\")\n\n\n\n            \n            \n\n\nCreating 1km buffers around 92 unique points...\nCreating union of all buffers...\nEnsuring CRS consistency...\nCalculating population statistics within unioned buffer...\n\n==================================================\nPOPULATION ANALYSIS WITHIN 1KM FIRE BUFFERS\n==================================================\nNumber of unique fire points: 92\nBuffer radius: 1 km\nCoordinate Reference System: EPSG:5347\nTotal population within unioned buffer: 18882\nPopulation in poverty within unioned buffer: 5245\nPoverty rate within buffer: 27.78%\nMostrar código\n18882 / total_redistribuido\n\n\n\n            \n            \n\n\nnp.float64(0.9553250713214301)\nMostrar código\nunioned_buffer.plot()\nMostrar código\nunioned_buffer.to_parquet(\"/home/nissim/Documents/dev/fulbright/ciut-riesgo/data/villa_del_rosario/datos/unioned_buffer_1km.parquet\")\nMostrar código\n\n\n\n\n            \n            \n\n\nnp.float64(0.5814747719447617)\nMostrar código\n# read in unique points \n# buffer 1km around them\n# union the buffers\n# ensure population (pob_redistribuida_da), pop in poverty (pob_privacion_da) rasters and the unioned buffer have the same CRS\n# calculate the pop, pop in poverty within the unioned buffer\n# report\n\n# unique_points.to_parquet(\"/home/nissim/Documents/dev/fulbright/ciut-riesgo/data/villa_del_rosario/unique_points.parquet\")\nMostrar código\nprint(modis_gdf.head())\n\n\n\n            \n            \n\n\n                    geometry    acq_date  acq_time  bright_t31  brightness  \\\n0   POINT (-62.9187 -32.019)  2000-11-14      1439  295.600006  308.200012   \n1  POINT (-63.6187 -31.5323)  2001-07-28      1433  273.799988  307.299988   \n2  POINT (-63.6081 -31.5338)  2001-07-28      1433  277.100006  303.100006   \n3  POINT (-63.6317 -31.5596)  2002-07-12      1811  296.100006  307.200012   \n4  POINT (-63.6423 -31.5612)  2002-07-12      1811  299.700012  366.799988   \n\n   confidence daynight         frp instrument satellite  scan  track  type  \\\n0          49        D    4.800000      MODIS     Terra   1.0    1.0     0   \n1          49        D   10.400000      MODIS     Terra   1.0    1.0     0   \n2          55        D    7.800000      MODIS     Terra   1.0    1.0     0   \n3          32        D    4.200000      MODIS      Aqua   1.0    1.0     0   \n4         100        D  104.300003      MODIS      Aqua   1.0    1.0     0   \n\n   version  \n0      6.2  \n1      6.2  \n2      6.2  \n3      6.2  \n4      6.2\nMostrar código\nprint(viirs_gdf.head())\n\n\n\n            \n            \n\n\n                      geometry    acq_date  acq_time  bright_ti4  bright_ti5  \\\n0  POINT (-63.36078 -31.46117)  2012-10-24      1847  367.000000  293.230011   \n1  POINT (-63.84928 -31.62288)  2012-07-25      1854  367.000000  293.890015   \n2  POINT (-63.83323 -31.66405)  2012-06-27       515  301.040009  283.869995   \n3  POINT (-63.83244 -31.66419)  2012-05-10       516  300.690002  286.739990   \n4  POINT (-63.83203 -31.66506)  2012-07-18       522  297.760010  277.149994   \n\n  confidence daynight    frp instrument satellite  scan  track  type  version  \n0          h        D  20.32      VIIRS         N  0.45   0.63     0        1  \n1          h        D  28.65      VIIRS         N  0.52   0.67     0        1  \n2          n        N   0.61      VIIRS         N  0.38   0.36     0        1  \n3          n        N   0.61      VIIRS         N  0.38   0.36     0        1  \n4          n        N   0.83      VIIRS         N  0.39   0.36     0        1\nMostrar código\n# MODIS - Filter for confidence &gt; 50\nmodis_filtered = modis_gdf[modis_gdf['confidence'] &gt; 50].copy()\nmodis_filtered['acq_date'] = pd.to_datetime(modis_filtered['acq_date'])\nmodis_filtered['year'] = modis_filtered['acq_date'].dt.year\nmodis_filtered['month'] = modis_filtered['acq_date'].dt.month\n\n# Get date range for MODIS\nmodis_start = modis_filtered['acq_date'].min().strftime('%Y-%m')\nmodis_end = modis_filtered['acq_date'].max().strftime('%Y-%m')\n\n# Count observations per month per year\nmodis_monthly_counts = modis_filtered.groupby(['year', 'month']).size().reset_index(name='count')\n\n# Create complete year-month combinations and fill missing months with 0\nmodis_years = sorted(modis_filtered['year'].unique())\nmodis_complete_data = []\nfor year in modis_years:\n    for month in range(1, 13):\n        existing = modis_monthly_counts[(modis_monthly_counts['year'] == year) & \n                                       (modis_monthly_counts['month'] == month)]\n        count = existing['count'].iloc[0] if len(existing) &gt; 0 else 0\n        modis_complete_data.append({'year': year, 'month': month, 'count': count})\n\nmodis_complete_df = pd.DataFrame(modis_complete_data)\n\n# Calculate average across all years for each month\nmodis_monthly_avg = modis_complete_df.groupby('month')['count'].mean().reset_index()\n\n# Create MODIS plot\nfig, ax = plt.subplots(figsize=(12, 6))\n\n# Plot individual years in grey\nfor year in modis_years:\n    year_data = modis_complete_df[modis_complete_df['year'] == year]\n    ax.plot(year_data['month'], year_data['count'], \n            color='lightgrey', alpha=0.7, linewidth=1)\n\n# Plot average line in dark red\nax.plot(modis_monthly_avg['month'], modis_monthly_avg['count'], \n        color='darkred', linewidth=2.5, label='Promedio')\n\n# Customize the plot\nax.set_xlabel('Mes', fontsize=12)\nax.set_ylabel('Número de Observaciones', fontsize=12)\nax.set_title(f'Serie Temporal de Incendios MODIS\\n(Confianza &gt; 50%) - {modis_start} a {modis_end}', \n             fontsize=14, fontweight='bold')\n\n# Set month labels\nmonth_names = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun',\n               'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic']\nax.set_xticks(range(1, 13))\nax.set_xticklabels(month_names)\n\n# Add legend\nax.legend(loc='upper right')\n\n# Remove top and right spines for minimalist look\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set grid\nax.grid(True, alpha=0.3, linestyle='-', linewidth=0.5)\n\nplt.tight_layout()\nplt.show()\n\n# VIIRS - Filter for confidence = 'h' or 'n'\nviirs_filtered = viirs_gdf[viirs_gdf['confidence'].isin(['h', 'n'])].copy()\nviirs_filtered['acq_date'] = pd.to_datetime(viirs_filtered['acq_date'])\nviirs_filtered['year'] = viirs_filtered['acq_date'].dt.year\nviirs_filtered['month'] = viirs_filtered['acq_date'].dt.month\n\n# Get date range for VIIRS\nviirs_start = viirs_filtered['acq_date'].min().strftime('%Y-%m')\nviirs_end = viirs_filtered['acq_date'].max().strftime('%Y-%m')\n\n# Count observations per month per year\nviirs_monthly_counts = viirs_filtered.groupby(['year', 'month']).size().reset_index(name='count')\n\n# Create complete year-month combinations and fill missing months with 0\nviirs_years = sorted(viirs_filtered['year'].unique())\nviirs_complete_data = []\nfor year in viirs_years:\n    for month in range(1, 13):\n        existing = viirs_monthly_counts[(viirs_monthly_counts['year'] == year) & \n                                        (viirs_monthly_counts['month'] == month)]\n        count = existing['count'].iloc[0] if len(existing) &gt; 0 else 0\n        viirs_complete_data.append({'year': year, 'month': month, 'count': count})\n\nviirs_complete_df = pd.DataFrame(viirs_complete_data)\n\n# Calculate average across all years for each month\nviirs_monthly_avg = viirs_complete_df.groupby('month')['count'].mean().reset_index()\n\n# Create VIIRS plot\nfig, ax = plt.subplots(figsize=(12, 6))\n\n# Plot individual years in grey\nfor year in viirs_years:\n    year_data = viirs_complete_df[viirs_complete_df['year'] == year]\n    ax.plot(year_data['month'], year_data['count'], \n            color='lightgrey', alpha=0.7, linewidth=1)\n\n# Plot average line in dark red\nax.plot(viirs_monthly_avg['month'], viirs_monthly_avg['count'], \n        color='darkred', linewidth=2.5, label='Promedio')\n\n# Customize the plot\nax.set_xlabel('Mes', fontsize=12)\nax.set_ylabel('Número de Observaciones', fontsize=12)\nax.set_title(f'Serie Temporal de Incendios VIIRS\\n(Confianza Alta/Nominal) - {viirs_start} a {viirs_end}', \n             fontsize=14, fontweight='bold')\n\n# Set month labels\nmonth_names = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun',\n               'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic']\nax.set_xticks(range(1, 13))\nax.set_xticklabels(month_names)\n\n# Add legend\nax.legend(loc='upper right')\n\n# Remove top and right spines for minimalist look\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set grid\nax.grid(True, alpha=0.3, linestyle='-', linewidth=0.5)\n\nplt.tight_layout()\nplt.show()\nMostrar código\n# VIIRS - Filter for confidence = 'h' or 'n'\nviirs_filtered = viirs_gdf[viirs_gdf['confidence'].isin(['h', 'n'])].copy()\nviirs_filtered['acq_date'] = pd.to_datetime(viirs_filtered['acq_date'])\nviirs_filtered['year'] = viirs_filtered['acq_date'].dt.year\nviirs_filtered['month'] = viirs_filtered['acq_date'].dt.month\n\n# Get date range for VIIRS\nviirs_start = viirs_filtered['acq_date'].min().strftime('%Y-%m')\nviirs_end = viirs_filtered['acq_date'].max().strftime('%Y-%m')\n\n# Count observations per month per year\nviirs_monthly_counts = viirs_filtered.groupby(['year', 'month']).size().reset_index(name='count')\n\n# Create complete year-month combinations and fill missing months with 0\nviirs_years = sorted(viirs_filtered['year'].unique())\nviirs_complete_data = []\nfor year in viirs_years:\n    for month in range(1, 13):\n        existing = viirs_monthly_counts[(viirs_monthly_counts['year'] == year) & \n                                        (viirs_monthly_counts['month'] == month)]\n        count = existing['count'].iloc[0] if len(existing) &gt; 0 else 0\n        viirs_complete_data.append({'year': year, 'month': month, 'count': count})\n\nviirs_complete_df = pd.DataFrame(viirs_complete_data)\n\n# Calculate average across all years for each month\nviirs_monthly_avg = viirs_complete_df.groupby('month')['count'].mean().reset_index()\n\n# Create VIIRS plot with 1:1 aspect ratio\nfig, ax = plt.subplots(figsize=(8, 8))\n\n# Plot individual years in grey\nfor year in viirs_years:\n    year_data = viirs_complete_df[viirs_complete_df['year'] == year]\n    ax.plot(year_data['month'], year_data['count'], \n            color='lightgrey', alpha=0.7, linewidth=1)\n\n# Plot average line in dark red\nax.plot(viirs_monthly_avg['month'], viirs_monthly_avg['count'], \n        color='darkred', linewidth=2.5, label='Promedio')\n\n# Customize the plot\nax.set_xlabel('Mes', fontsize=12)\nax.set_ylabel('Número de Observaciones', fontsize=12)\nax.set_title(f'Serie Temporal de Incendios VIIRS\\n(Confianza Alta/Nominal) - {viirs_start} a {viirs_end}', \n             fontsize=14, fontweight='bold')\n\n# Set month labels\nmonth_names = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun',\n               'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic']\nax.set_xticks(range(1, 13))\nax.set_xticklabels(month_names)\n\n# Add legend\nax.legend(loc='upper right')\n\n# Remove top and right spines for minimalist look\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set grid\nax.grid(True, alpha=0.3, linestyle='-', linewidth=0.5)\n\nplt.tight_layout()\n\n# Save as SVG with 300 DPI\nplt.savefig('/home/nissim/Documents/dev/fulbright/ciut-riesgo/data/villa_del_rosario/VIIRS_temporal_series.svg', \n            format='svg', dpi=300, bbox_inches='tight')\n\nplt.show()\nMostrar código\n# Create bar chart of MODIS observations per month\nfig, ax = plt.subplots(figsize=(12, 6))\n\n# Calculate total observations per month across all years\nmonthly_totals = modis_filtered.groupby('month').size()\n\n# Create bar chart\nbars = ax.bar(monthly_totals.index, monthly_totals.values, \n              color='darkred', alpha=0.7, edgecolor='black', linewidth=0.5)\n\n# Customize the plot\nax.set_xlabel('Mes', fontsize=12)\nax.set_ylabel('Número Total de Observaciones', fontsize=12)\nax.set_title(f'Observaciones MODIS por Mes\\n(Confianza &gt; 50%) - {modis_start} a {modis_end}', \n             fontsize=14, fontweight='bold')\n\n# Set month labels\nmonth_names = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun',\n               'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic']\nax.set_xticks(range(1, 13))\nax.set_xticklabels(month_names)\n\n# Add value labels on top of bars\nfor bar in bars:\n    height = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2., height + 0.5,\n            f'{int(height)}', ha='center', va='bottom', fontsize=10)\n\n# Remove top and right spines for minimalist look\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set grid\nax.grid(True, alpha=0.3, linestyle='-', linewidth=0.5, axis='y')\n\nplt.tight_layout()\nplt.show()\nMostrar código\n# Create bar chart of MODIS observations per year\nfig, ax = plt.subplots(figsize=(8, 8))  # Square figure for 1:1 aspect ratio\n\n# Calculate total observations per year\nyearly_totals = modis_filtered.groupby('year').size()\n\n# Create bar chart with integer years\nbars = ax.bar(range(len(yearly_totals)), yearly_totals.values, \n              color='darkred', alpha=0.7, edgecolor='black', linewidth=0.5)\n\n# Customize the plot\nax.set_xlabel('Año', fontsize=12)\nax.set_ylabel('Número Total de Observaciones', fontsize=12)\nax.set_title(f'Observaciones MODIS por Año\\n(Confianza &gt; 50%) - {modis_start} a {modis_end}', \n             fontsize=14, fontweight='bold')\n\n# Set year labels as integers\nax.set_xticks(range(len(yearly_totals)))\nax.set_xticklabels(yearly_totals.index.astype(int))\n\n# Add value labels on top of bars\nfor i, bar in enumerate(bars):\n    height = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2., height + 0.5,\n            f'{int(height)}', ha='center', va='bottom', fontsize=10)\n\n# Remove top and right spines for minimalist look\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set grid\nax.grid(True, alpha=0.3, linestyle='-', linewidth=0.5, axis='y')\n\nplt.tight_layout()\n\n# Save as SVG with 300 DPI\nplt.savefig('/home/nissim/Documents/dev/fulbright/ciut-riesgo/data/villa_del_rosario/mODIS_observations_per_year.svg', \n            format='svg', dpi=300, bbox_inches='tight')\n\nplt.show()\nMostrar código\n# export as a dataframe with dates and times for the observations\n# make a time series plot of observations per month per year\n# add an average line to show typical burn months\n\n# then, figure out how to spatially visualize this based on the resolution of each dataset--375m? 750m?\n# how do I add in other stuff, e.g., from IDECOR? other resolutions?\nMostrar código\nimport rioxarray as rio\nimport xarray as xr\nimport numpy as np\nfrom shapely.geometry import Point\nimport geopandas as gpd\n\ndef create_fire_mask(gdf, resolution_m, crs='EPSG:4326'):\n    \"\"\"\n    Create a binary mask from fire observations at specified resolution\n    \n    Parameters:\n    gdf: GeoDataFrame with fire observations\n    resolution_m: Resolution in meters\n    crs: Coordinate reference system\n    \"\"\"\n    # Get bounds of the data\n    bounds = gdf.total_bounds\n    \n    # Convert resolution from meters to degrees (approximate)\n    # 1 degree ≈ 111,000 meters at the equator\n    resolution_deg = resolution_m / 111000\n    \n    # Create coordinate arrays\n    lon_min, lat_min, lon_max, lat_max = bounds\n    lons = np.arange(lon_min, lon_max + resolution_deg, resolution_deg)\n    lats = np.arange(lat_min, lat_max + resolution_deg, resolution_deg)\n    \n    # Create empty mask\n    mask = np.zeros((len(lats), len(lons)), dtype=np.uint8)\n    \n    # Create grid points\n    lon_grid, lat_grid = np.meshgrid(lons, lats)\n    \n    # For each fire observation, find the corresponding grid cell\n    for idx, row in gdf.iterrows():\n        lon, lat = row.geometry.x, row.geometry.y\n        \n        # Find closest grid cell\n        lon_idx = np.argmin(np.abs(lons - lon))\n        lat_idx = np.argmin(np.abs(lats - lat))\n        \n        # Set mask to 1 for this cell\n        mask[lat_idx, lon_idx] = 1\n    \n    # Create xarray DataArray with correct dimension names\n    da = xr.DataArray(\n        mask,\n        coords={\n            'y': lats,  # Use 'y' instead of 'lat'\n            'x': lons   # Use 'x' instead of 'lon'\n        },\n        dims=['y', 'x'],  # Use 'y', 'x' instead of 'lat', 'lon'\n        name='fire_mask'\n    )\n    \n    # Add CRS information\n    da = da.rio.write_crs(crs)\n    \n    return da\n\n# Create MODIS mask at 1km resolution (1000m)\nmodis_mask = create_fire_mask(modis_gdf, resolution_m=1000)\n\n# Create VIIRS mask at 375m resolution\nviirs_mask = create_fire_mask(viirs_gdf, resolution_m=375)\nMostrar código\nviirs_mask.plot()\nMostrar código\nmodis_mask.plot()\nMostrar código\nmodis_mask.rio.to_raster(\"/home/nissim/Documents/dev/fulbright/ciut-riesgo/data/villa_del_rosario/modis_fire_mask_1km.tif\")\nviirs_mask.rio.to_raster(\"/home/nissim/Documents/dev/fulbright/ciut-riesgo/data/villa_del_rosario/viirs_fire_mask_375m.tif\")",
    "crumbs": [
      "Cookbooks",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Exposición y vulnerabilidad</span>"
    ]
  },
  {
    "objectID": "cookbooks/villa-del-rosario.html#incendios-1",
    "href": "cookbooks/villa-del-rosario.html#incendios-1",
    "title": "14  Exposición y vulnerabilidad",
    "section": "14.2 Incendios",
    "text": "14.2 Incendios\n\n\nMostrar código\nfrom typing import Any, Dict\n\nimport matplotlib.pyplot as plt\nfrom pystac.item import Item\nfrom shapely.geometry import shape\n\nfrom pystac_client import Client\n\n\n\n\nMostrar código\nURL = 'https://cmr.earthdata.nasa.gov/stac/LANCEMODIS'\n\ncatalog = Client.open(URL)  \n\ncatalog.get_collection(\"MYD14_6.1NRT\")\n\n\n\n\nMostrar código\ndef intersection_percent(item: Item, aoi_geometry) -&gt; float:\n    \"\"\"The percentage that the Item's geometry intersects the AOI geometry.\"\"\"\n    geom_item = shape(item.geometry)\n    geom_aoi = aoi_geometry  # Already a geometry object\n    \n    intersected_geom = geom_aoi.intersection(geom_item)\n    intersection_percent = (intersected_geom.area * 100) / geom_aoi.area\n    \n    return intersection_percent\n\n# Extract the geometry once and reuse it\naoi_geometry = aoi.to_crs(4326).geometry.iloc[0]\n\nitem_search = catalog.search(\n    collections=[\"MYD14_6.1NRT\"], intersects=aoi_geometry, max_items=10\n)\n\nprint(\n    [\n        f\"{intersection_percent(item, aoi_geometry):.2f}\"\n        for item in item_search.items()\n    ]\n)\n\n\n\n\nMostrar código\n\n# Create a Client and an ItemSearch representing our search\n# No search operations will be performed until we call the items() method\nclient = Client.open(URL)\nitem_search = client.search(\n    collections=[\"MYD14_6.1NRT\"], intersects=aoi, max_items=10\n)\n\n\n\n\nMostrar código\nfrom pystac_client import Client\n\ncatalog = Client.open(\"https://cmr.earthdata.nasa.gov/stac\")\n\nfor link in catalog.links:\n    print(link.href)\n\n\n\n\nMostrar código\nimport requests\n\n# Search NASA's Earthdata for VIIRS collections\nsearch_url = \"https://cmr.earthdata.nasa.gov/search/collections.json\"\nparams = {\n    \"keyword\": \"VIIRS fire\",\n    \"page_size\": 20\n}\n\nresponse = requests.get(search_url, params=params)\nif response.status_code == 200:\n    data = response.json()\n    print(\"VIIRS collections available through Earthdata:\")\n    for entry in data.get(\"feed\", {}).get(\"entry\", []):\n        print(f\"  {entry.get('title')}: {entry.get('id')}\")\n        print(f\"    Provider: {entry.get('provider')}\")\n        print(f\"    Short name: {entry.get('short_name')}\")\n        print(\"---\")\n\n\n\n\nMostrar código\nfrom pystac_client import Client\n\n# Try the LPCLOUD STAC endpoint directly\ntry:\n    lpcloud_catalog = Client.open(\"https://cmr.earthdata.nasa.gov/stac/LPCLOUD\")\n    \n    print(\"LPCLOUD collections:\")\n    for link in lpcloud_catalog.links:\n        if link.rel == \"child\":\n            print(f\"  {link.title}: {link.href}\")\n            \n    # Try to access VNP14A1 collection\n    vnp14a1_collection = Client.open(\"https://cmr.earthdata.nasa.gov/stac/LPCLOUD/collections/VNP14A1\")\n    \n    # Search for items\n    aoi_geometry = aoi.to_crs(4326).geometry.iloc[0]\n    item_search = vnp14a1_collection.search(\n        intersects=aoi_geometry,\n        max_items=10\n    )\n    \n    for item in item_search.items():\n        print(f\"VIIRS item: {item.id}\")\n        \nexcept Exception as e:\n    print(f\"Error: {e}\")\n\n\n\n\nMostrar código\nfrom pystac_client import Client\n\n# Try using the collection concept ID\ncollection_id = \"C2545314541-LPCLOUD\"\n\ntry:\n    # Try different STAC endpoints\n    endpoints = [\n        f\"https://cmr.earthdata.nasa.gov/stac/LPCLOUD/collections/{collection_id}\",\n        f\"https://cmr.earthdata.nasa.gov/stac/ALL/collections/{collection_id}\",\n        f\"https://cmr.earthdata.nasa.gov/stac/collections/{collection_id}\"\n    ]\n    \n    for endpoint in endpoints:\n        try:\n            collection = Client.open(endpoint)\n            print(f\"Successfully opened: {endpoint}\")\n            print(f\"Collection: {collection.title}\")\n            break\n        except Exception as e:\n            print(f\"Failed {endpoint}: {e}\")\n            \nexcept Exception as e:\n    print(f\"Error: {e}\")\n\n\n\n\nMostrar código\ndef get_collection_info(collection_id):\n    \"\"\"\n    Get detailed information about a VIIRS collection\n    \"\"\"\n    url = f\"https://cmr.earthdata.nasa.gov/search/collections.json\"\n    params = {\"concept_id\": collection_id}\n    \n    response = requests.get(url, params=params)\n    \n    if response.status_code == 200:\n        data = response.json()\n        collection = data['feed']['entry'][0]\n        \n        print(f\"Collection: {collection['title']}\")\n        print(f\"Short Name: {collection['short_name']}\")\n        print(f\"Description: {collection['summary']}\")\n        print(f\"Provider: {collection.get('provider', 'Unknown')}\")\n        print(f\"Temporal Range: {collection.get('time_start')} to {collection.get('time_end')}\")\n        \n        return collection\n    else:\n        print(f\"Error: {response.status_code}\")\n        return None\n\n# Get info about VNP14A1\nget_collection_info(\"C2545314541-LPCLOUD\")\n\n\n\n\nMostrar código\nfrom pystac_client import Client\n\n# Open LPDAAC catalog and search for the specific collection\nlpdaac_catalog = Client.open(\"https://cmr.earthdata.nasa.gov/stac/LPDAAC_ECS\")\n\n# Find the viirs-14a1-001 collection\nviirs_link = None\nfor link in lpdaac_catalog.links:\n    if link.rel == \"child\" and \"VNP14A1 v001\" in link.href:\n        viirs_link = link\n        break\n\nif viirs_link:\n    print(f\"Found VIIRS collection: {viirs_link.title}\")\n    print(f\"URL: {viirs_link.href}\")\n    \n    # Open the collection and search for items\n    viirs_collection = Client.open(viirs_link.href)\n    aoi_geometry = aoi.to_crs(4326).geometry.iloc[0]\n    \n    item_search = viirs_collection.search(\n        intersects=aoi_geometry,\n        max_items=10\n    )\n    \n    for item in item_search.items():\n        print(f\"VIIRS item: {item.id}\")\nelse:\n    print(\"VIIRS collection not found in ALL\")\n\n\n\n\nMostrar código\nitem_search\n\n\n\n\nMostrar código\nfrom pystac_client import Client\n\n# Try different potential VIIRS STAC endpoints\npotential_endpoints = [\n    \"https://cmr.earthdata.nasa.gov/stac/LPDAAC\",\n    \"https://cmr.earthdata.nasa.gov/stac/MODIS\",\n    \"https://cmr.earthdata.nasa.gov/stac/VIIRS\",\n    \"https://cmr.earthdata.nasa.gov/stac/FIRE\"\n]\n\nfor endpoint in potential_endpoints:\n    try:\n        catalog = Client.open(endpoint)\n        print(f\"Successfully opened: {endpoint}\")\n        print(f\"Collections available:\")\n        for link in catalog.links:\n            if link.rel == \"child\":\n                print(f\"  - {link.title}\")\n        print(\"---\")\n    except Exception as e:\n        print(f\"Failed to open {endpoint}: {e}\")\n\n\n\n\nMostrar código\ncatalog = Client.open(\"https://cmr.earthdata.nasa.gov/stac/USGS\")\n\nfor link in catalog.links:\n    print(link.href)\n\n\n\n\nMostrar código\nURL = 'https://cmr.earthdata.nasa.gov/stac/LANCEMODIS'\n\ncatalog = Client.open(URL)  \n\ncatalog.get_collection(\"MYD14_6.1NRT\")\n\n\n\n\nMostrar código\nimport requests\nimport xarray as xr\nimport rioxarray\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom datetime import datetime, timedelta\nimport os\n\n# Extract the geometry once and reuse it\naoi_geometry = aoi.to_crs(4326).geometry.iloc[0]\n\ndef setup_earthdata_auth():\n    \"\"\"\n    Set up NASA Earthdata authentication\n    You'll need to create an account at https://urs.earthdata.nasa.gov/\n    \"\"\"\n    username = input(\"Enter your NASA Earthdata username: \")\n    password = input(\"Enter your NASA Earthdata password: \")\n    \n    # Store credentials (you might want to use environment variables instead)\n    os.environ['EARTHDATA_USERNAME'] = username\n    os.environ['EARTHDATA_PASSWORD'] = password\n    \n    return username, password\n\ndef search_viirs_granules(collection_id, aoi_geometry, start_date, end_date, max_results=5):\n    \"\"\"\n    Search for VIIRS granules using CMR API\n    \"\"\"\n    cmr_url = \"https://cmr.earthdata.nasa.gov/search/granules.json\"\n    \n    bbox = aoi_geometry.bounds\n    \n    params = {\n        \"collection_concept_id\": collection_id,\n        \"bounding_box\": f\"{bbox[0]},{bbox[1]},{bbox[2]},{bbox[3]}\",\n        \"temporal\": f\"{start_date}T00:00:00Z,{end_date}T23:59:59Z\",\n        \"page_size\": max_results,\n        \"sort_key\": \"-start_date\"\n    }\n    \n    response = requests.get(cmr_url, params=params)\n    \n    if response.status_code == 200:\n        data = response.json()\n        granules = data['feed']['entry']\n        \n        print(f\"Found {len(granules)} VIIRS granules:\")\n        for i, granule in enumerate(granules):\n            print(f\"  {i+1}. {granule['title']}\")\n            print(f\"     Time: {granule['time_start']}\")\n            print(f\"     Size: {granule.get('granule_size', 'Unknown')}\")\n            \n            # Get cloud access URLs\n            cloud_urls = []\n            for link in granule['links']:\n                if link['rel'] == 'http://esipfed.org/ns/fedsearch/1.1/data#':\n                    cloud_urls.append(link['href'])\n            \n            if cloud_urls:\n                print(f\"     Cloud URL: {cloud_urls[0]}\")\n            print(\"---\")\n        \n        return granules\n    else:\n        print(f\"Error: {response.status_code} - {response.text}\")\n        return []\n\n# Usage\ncollection_id = \"C2545314541-LPCLOUD\"  # VNP14A1\nstart_date = \"2023-01-01\"\nend_date = \"2025-01-31\"\n\ngranules = search_viirs_granules(collection_id, aoi_geometry, start_date, end_date)\n\n\nFound 5 VIIRS granules:\n  1. VNP14A1.A2025031.h12v12.002.2025032090653\n     Time: 2025-01-31T00:00:00.000Z\n     Size: 0.1575489044189453\n     Cloud URL: https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/VNP14A1.002/VNP14A1.A2025031.h12v12.002.2025032090653/VNP14A1.A2025031.h12v12.002.2025032090653.h5\n---\n  2. VNP14A1.A2025030.h12v12.002.2025031094640\n     Time: 2025-01-30T00:00:00.000Z\n     Size: 0.15435218811035156\n     Cloud URL: https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/VNP14A1.002/VNP14A1.A2025030.h12v12.002.2025031094640/VNP14A1.A2025030.h12v12.002.2025031094640.h5\n---\n  3. VNP14A1.A2025029.h12v12.002.2025030094347\n     Time: 2025-01-29T00:00:00.000Z\n     Size: 0.1571207046508789\n     Cloud URL: https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/VNP14A1.002/VNP14A1.A2025029.h12v12.002.2025030094347/VNP14A1.A2025029.h12v12.002.2025030094347.h5\n---\n  4. VNP14A1.A2025028.h12v12.002.2025029084239\n     Time: 2025-01-28T00:00:00.000Z\n     Size: 0.16545581817626953\n     Cloud URL: https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/VNP14A1.002/VNP14A1.A2025028.h12v12.002.2025029084239/VNP14A1.A2025028.h12v12.002.2025029084239.h5\n---\n  5. VNP14A1.A2025027.h12v12.002.2025028190753\n     Time: 2025-01-27T00:00:00.000Z\n     Size: 0.1768970489501953\n     Cloud URL: https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/VNP14A1.002/VNP14A1.A2025027.h12v12.002.2025028190753/VNP14A1.A2025027.h12v12.002.2025028190753.h5\n---\n\n\n\n\nMostrar código\nimport requests\nfrom requests.auth import HTTPBasicAuth\nimport h5py\nimport matplotlib.pyplot as plt\n\n# Download the file\nusername = \"nissimlebovits\"\npassword = \"KNsna3qk6aPEEvk\"\n\nprint(\"Downloading VIIRS file...\")\nresponse = requests.get(cloud_url, auth=HTTPBasicAuth(username, password))\n\nif response.status_code == 200:\n    with open(\"temp_viirs.h5\", \"wb\") as f:\n        f.write(response.content)\n    \n    # Open with h5py\n    with h5py.File(\"temp_viirs.h5\", \"r\") as f:\n        fire_mask = f['HDFEOS/GRIDS/VNP_Grid_1km_2D/Data Fields/FireMask'][:]\n        \n    plt.imshow(fire_mask)\n    plt.title('VIIRS Fire Mask')\n    plt.show()\n    \n    # Clean up\n    import os\n    os.remove(\"temp_viirs.h5\")\nelse:\n    print(f\"Download failed: {response.status_code}\")\n\n\nDownloading VIIRS file...\nDownload failed: 401\n\n\n\n\nMostrar código\nimport earthaccess\n\nauth = earthaccess.login()\n\n\n\n\nMostrar código\nimport earthaccess\n\n# Extract individual bounding box values\nbbox = aoi.to_crs(4326).bounds.iloc[0]\nminx, miny, maxx, maxy = bbox\n\n# Search for VIIRS data\nviirs_data = earthaccess.search_data(\n    short_name=\"VNP14A1\",\n    bounding_box=(minx, miny, maxx, maxy),  # Pass as tuple\n    cloud_hosted=True,\n    temporal=(\"2001-01\", \"2021-01\"),\n)\n\nprint(f\"Found {len(viirs_data)} granules\")\n\n# First, get the coordinate system and find exact pixel bounds for your AOI\nfiles = earthaccess.open([viirs_data[0]], show_progress=False)\nfile_path = files[0]\n\nwith h5py.File(file_path, 'r') as f:\n    xdim = f['HDFEOS/GRIDS/VIIRS_Grid_Daily_Fire/XDim'][:]\n    ydim = f['HDFEOS/GRIDS/VIIRS_Grid_Daily_Fire/YDim'][:]\n\n# Transform AOI to sinusoidal projection\naoi_sinusoidal = aoi.to_crs(\"EPSG:4326\").to_crs(\"+proj=sinu +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs\")\naoi_bounds = aoi_sinusoidal.bounds.iloc[0]\n\n# Find exact pixel indices for your AOI\nx_indices = np.where((xdim &gt;= aoi_bounds.iloc[0]) & (xdim &lt;= aoi_bounds.iloc[2]))[0]\ny_indices = np.where((ydim &gt;= aoi_bounds.iloc[1]) & (ydim &lt;= aoi_bounds.iloc[3]))[0]\n\nprint(f\"Cropping to {len(y_indices)} x {len(x_indices)} pixels instead of full {len(ydim)} x {len(xdim)}\")\n\n\nFound 3300 granules\n\n\n\n\nMostrar código\n# # Let's check what file sizes we actually have\n# file_sizes = [granule.get('Size(MB)', 0) for granule in viirs_data]\n# print(f\"File size range: {min(file_sizes):.3f} - {max(file_sizes):.3f} MB\")\n# print(f\"Average file size: {np.mean(file_sizes):.3f} MB\")\n\n# # Check the distribution\n# import matplotlib.pyplot as plt\n# plt.hist(file_sizes, bins=50)\n# plt.xlabel('File Size (MB)')\n# plt.ylabel('Count')\n# plt.title('Distribution of VIIRS File Sizes')\n# plt.show()\n\n# # Let's actually check a few files manually to see what's in them\n# print(\"Manually checking first 5 files...\")\n# for i, granule in enumerate(viirs_data[:5]):\n#     print(f\"\\nFile {i+1}:\")\n#     print(f\"Size: {granule.get('Size(MB)', 0):.3f} MB\")\n    \n#     try:\n#         files = earthaccess.open([granule], show_progress=False)\n#         file_path = files[0]\n        \n#         with h5py.File(file_path, 'r') as f:\n#             fire_mask = f['HDFEOS/GRIDS/VIIRS_Grid_Daily_Fire/Data Fields/FireMask'][:]\n#             print(f\"FireMask shape: {fire_mask.shape}\")\n#             print(f\"FireMask unique values: {np.unique(fire_mask)}\")\n#             print(f\"Fire pixels (&gt;=7): {np.sum(fire_mask &gt;= 7)}\")\n            \n#             # Check if our AOI area has any fire\n#             if len(y_indices) &gt; 0 and len(x_indices) &gt; 0:\n#                 aoi_fire_mask = fire_mask[y_indices, :][:, x_indices]\n#                 print(f\"AOI fire pixels: {np.sum(aoi_fire_mask &gt;= 7)}\")\n                \n#     except Exception as e:\n#         print(f\"Error: {e}\")\n\n\n\n            \n            \n\n\n\n\nMostrar código\n# # Process in batches to avoid memory issues\n# batch_size = 100\n# fire_counts = []\n\n# for i in range(0, len(viirs_data), batch_size):\n#     batch = viirs_data[i:i+batch_size]\n#     print(f\"Processing batch {i//batch_size + 1}/{(len(viirs_data)-1)//batch_size + 1}\")\n    \n#     # Your existing efficient processing\n#     lazy_arrays = [process_granule_cropped(granule) for granule in batch]\n#     fire_stack = da.stack([da.from_delayed(arr, dtype=np.int8, shape=(len(y_indices), len(x_indices))) \n#                           for arr in lazy_arrays if arr is not None])\n#     fire_count_batch = da.sum(fire_stack, axis=0)\n    \n#     with ProgressBar():\n#         fire_counts.append(fire_count_batch.compute())\n\n# # Sum all batches\n# final_fire_count = np.sum(fire_counts, axis=0)\n\n\n\n            \n            \n\n\n\n\nMostrar código\n# # Let's check what's happening with the AOI cropping\n# print(\"AOI Debugging:\")\n# print(f\"AOI bounds (sinusoidal): {aoi_bounds}\")\n# print(f\"X indices range: {x_indices.min()} to {x_indices.max()}\")\n# print(f\"Y indices range: {y_indices.min()} to {y_indices.max()}\")\n# print(f\"AOI size: {len(y_indices)} x {len(x_indices)} pixels\")\n\n# # Let's see where the fires actually are\n# print(\"\\nChecking fire locations in first file...\")\n# files = earthaccess.open([viirs_data[0]], show_progress=False)\n# file_path = files[0]\n\n# with h5py.File(file_path, 'r') as f:\n#     fire_mask = f['HDFEOS/GRIDS/VIIRS_Grid_Daily_Fire/Data Fields/FireMask'][:]\n#     xdim = f['HDFEOS/GRIDS/VIIRS_Grid_Daily_Fire/XDim'][:]\n#     ydim = f['HDFEOS/GRIDS/VIIRS_Grid_Daily_Fire/YDim'][:]\n    \n#     # Find where the fires are\n#     fire_locations = np.where(fire_mask &gt;= 7)\n#     print(f\"Fire locations (y, x): {list(zip(fire_locations[0][:5], fire_locations[1][:5]))}\")\n    \n#     # Check the coordinates of fire pixels\n#     for i in range(min(5, len(fire_locations[0]))):\n#         y_idx, x_idx = fire_locations[0][i], fire_locations[1][i]\n#         fire_x = xdim[x_idx]\n#         fire_y = ydim[y_idx]\n#         print(f\"Fire {i+1}: pixel ({y_idx}, {x_idx}) -&gt; coords ({fire_x:.0f}, {fire_y:.0f})\")\n    \n#     print(f\"\\nAOI coordinate bounds:\")\n#     print(f\"X: {xdim[x_indices].min():.0f} to {xdim[x_indices].max():.0f}\")\n#     print(f\"Y: {ydim[y_indices].min():.0f} to {ydim[y_indices].max():.0f}\")\n\n\n\n            \n            \n\n\n\n\nMostrar código\n# Option 1: Use file size as a proxy (fire-active files are usually larger)\ndef quick_fire_check_by_size(granules):\n    \"\"\"Use file size as a proxy for fire activity - much faster\"\"\"\n    fire_active = []\n    \n    for granule in granules:\n        # Get file size from granule metadata\n        size_mb = granule.get('Size(MB)', 0)\n        \n        # VIIRS files with fire data are typically &gt; 1MB\n        # Files &lt; 0.5MB are usually empty/no-fire days\n        if size_mb &gt; 0.5:  # Adjust threshold as needed\n            fire_active.append(granule)\n    \n    return fire_active\n\n# Option 2: Sample approach - check every 10th file first\ndef sample_check(granules, sample_rate=10):\n    \"\"\"Check a sample of files to estimate fire activity\"\"\"\n    sample_granules = granules[::sample_rate]  # Every 10th file\n    \n    fire_count = 0\n    for granule in sample_granules:\n        try:\n            files = earthaccess.open([granule], show_progress=False)\n            file_path = files[0]\n            \n            with h5py.File(file_path, 'r') as f:\n                fire_mask = f['HDFEOS/GRIDS/VIIRS_Grid_Daily_Fire/Data Fields/FireMask'][y_indices, :][:, x_indices]\n                if np.any(fire_mask &gt;= 7):\n                    fire_count += 1\n        except:\n            pass\n    \n    fire_rate = fire_count / len(sample_granules)\n    print(f\"Estimated fire activity rate: {fire_rate:.2%}\")\n    \n    return fire_rate\n\n# Try the fast approach first\nprint(\"Quick check by file size...\")\nfire_active_by_size = quick_fire_check_by_size(viirs_data)\nprint(f\"Found {len(fire_active_by_size)} potentially fire-active files\")\n\n# Sample check to validate\nprint(\"Sampling to validate...\")\nfire_rate = sample_check(viirs_data[:100])  # Check first 100 files\n\n\nQuick check by file size...\nFound 0 potentially fire-active files\nSampling to validate...\nEstimated fire activity rate: 0.00%\n\n\n\n\nMostrar código\n# import earthaccess\n# import h5py\n# import numpy as np\n# import dask.array as da\n# from dask.delayed import delayed\n# from dask.diagnostics import ProgressBar\n\n# # 1. Check current cache settings\n# files = earthaccess.open([viirs_data[0]], show_progress=False)\n# file_handler = files[0]\n# print(\"Current cache settings:\")\n# print(file_handler.f.cache)\n\n# # 2. Try optimized cache settings for HDF5\n# # Based on docs: align block size with HDF5 chunk size\n# optimized_open_kwargs = {\n#     'block_size': 16 * 1024 * 1024,  # 16MB blocks (for large files)\n#     'cache_type': 'blockcache'  # Use blockcache instead of readahead\n# }\n\n# files_optimized = earthaccess.open([viirs_data[0]], \n#                                  open_kwargs=optimized_open_kwargs, \n#                                  show_progress=False)\n# file_handler_opt = files_optimized[0]\n# print(\"\\nOptimized cache settings:\")\n# print(file_handler_opt.f.cache)\n\n# # 3. Test different batch sizes\n# def test_batch_performance(batch_size):\n#     print(f\"\\nTesting batch size: {batch_size}\")\n    \n#     @delayed\n#     def process_batch(granules_batch):\n#         results = []\n#         files = earthaccess.open(granules_batch, \n#                                open_kwargs=optimized_open_kwargs,\n#                                show_progress=False)\n        \n#         for file_path in files:\n#             try:\n#                 with h5py.File(file_path, 'r') as f:\n#                     fire_mask = f['HDFEOS/GRIDS/VIIRS_Grid_Daily_Fire/Data Fields/FireMask'][y_indices, :][:, x_indices]\n#                     results.append((fire_mask &gt;= 7).astype(np.int8))\n#             except Exception as e:\n#                 print(f\"Error: {e}\")\n#                 results.append(None)\n        \n#         return results\n    \n#     # Test with first batch_size granules\n#     test_granules = viirs_data[:batch_size]\n#     batch_results = process_batch(test_granules)\n    \n#     return batch_results\n\n# # 4. Test different batch sizes\n# batch_sizes = [1, 5, 10, 20]\n# for batch_size in batch_sizes:\n#     if batch_size &lt;= len(viirs_data):\n#         result = test_batch_performance(batch_size)\n#         print(f\"Batch size {batch_size}: {result}\")\n\n# # 5. Check if files are cloud-optimized\n# def check_file_optimization(file_handler):\n#     print(f\"\\nFile optimization check:\")\n#     cache = file_handler.f.cache\n    \n#     # Different cache types have different attributes\n#     if hasattr(cache, 'block_size'):\n#         print(f\"Block size: {cache.block_size}\")\n#     elif hasattr(cache, 'blocksize'):\n#         print(f\"Block size: {cache.blocksize}\")\n#     else:\n#         print(f\"Block size: Not available\")\n    \n#     print(f\"Cache type: {type(cache).__name__}\")\n#     print(f\"Cache info: {cache}\")\n    \n#     # Test metadata access speed\n#     import time\n#     start = time.time()\n#     with h5py.File(file_handler, 'r') as f:\n#         # Try to access metadata\n#         attrs = f.attrs\n#         groups = list(f.keys())\n#     end = time.time()\n#     print(f\"Metadata access time: {end - start:.2f} seconds\")\n    \n#     return end - start\n\n# # Check optimization\n# metadata_time = check_file_optimization(file_handler_opt)\n\n# # 6. Try different cache configurations\n# cache_configs = [\n#     {'block_size': 4 * 1024 * 1024, 'cache_type': 'blockcache'},   # 4MB\n#     {'block_size': 8 * 1024 * 1024, 'cache_type': 'blockcache'},   # 8MB  \n#     {'block_size': 16 * 1024 * 1024, 'cache_type': 'blockcache'},  # 16MB\n#     {'block_size': 32 * 1024 * 1024, 'cache_type': 'blockcache'}, # 32MB\n# ]\n\n# print(\"\\nTesting different cache configurations:\")\n# for i, config in enumerate(cache_configs):\n#     print(f\"\\nConfig {i+1}: {config}\")\n#     files_test = earthaccess.open([viirs_data[0]], \n#                                 open_kwargs=config, \n#                                 show_progress=False)\n#     file_test = files_test[0]\n#     print(f\"Cache: {file_test.f.cache}\")\n\n\n\n            \n            \n\n\n\n\nMostrar código\nimport earthaccess\nimport h5py\nimport numpy as np\nimport dask.array as da\nfrom dask.delayed import delayed\nfrom dask.diagnostics import ProgressBar\n\n# Extract individual bounding box values\nbbox = aoi.to_crs(4326).bounds.iloc[0]\nminx, miny, maxx, maxy = bbox\n\n# Search for VIIRS data\nviirs_data = earthaccess.search_data(\n    short_name=\"VNP14A1\",\n    bounding_box=(minx, miny, maxx, maxy),\n    cloud_hosted=True,\n    temporal=(\"2020-01\", \"2021-01\"),\n)\n\nprint(f\"Found {len(viirs_data)} granules\")\n\n# Get coordinate system and find exact pixel bounds\nfiles = earthaccess.open([viirs_data[0]], show_progress=False)\nfile_path = files[0]\n\nwith h5py.File(file_path, 'r') as f:\n    xdim = f['HDFEOS/GRIDS/VIIRS_Grid_Daily_Fire/XDim'][:]\n    ydim = f['HDFEOS/GRIDS/VIIRS_Grid_Daily_Fire/YDim'][:]\n\n# Transform AOI to sinusoidal projection\naoi_sinusoidal = aoi.to_crs(\"EPSG:4326\").to_crs(\"+proj=sinu +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs\")\naoi_bounds = aoi_sinusoidal.bounds.iloc[0]\n\n# Find exact pixel indices for your AOI\nx_indices = np.where((xdim &gt;= aoi_bounds.iloc[0]) & (xdim &lt;= aoi_bounds.iloc[2]))[0]\ny_indices = np.where((ydim &gt;= aoi_bounds.iloc[1]) & (ydim &lt;= aoi_bounds.iloc[3]))[0]\n\nprint(f\"Cropping to {len(y_indices)} x {len(x_indices)} pixels instead of full {len(ydim)} x {len(xdim)}\")\n\n# Efficient lazy function that only loads the cropped area\n@delayed\ndef process_granule_cropped(granule):\n    try:\n        files = earthaccess.open([granule], show_progress=False)\n        file_path = files[0]\n        \n        with h5py.File(file_path, 'r') as f:\n            # Use advanced indexing to load only the pixels we need\n            fire_mask = f['HDFEOS/GRIDS/VIIRS_Grid_Daily_Fire/Data Fields/FireMask'][y_indices, :][:, x_indices]\n            return (fire_mask &gt;= 7).astype(np.int8)\n    except Exception as e:\n        print(f\"Error processing granule: {e}\")\n        return None\n\n# Create lazy arrays for cropped data only\nprint(f\"Creating lazy arrays for {len(viirs_data)} granules...\")\nlazy_arrays = [process_granule_cropped(granule) for granule in viirs_data]\n\n# Stack into dask array with correct cropped dimensions\nfire_stack = da.stack([da.from_delayed(arr, dtype=np.int8, shape=(len(y_indices), len(x_indices))) \n                      for arr in lazy_arrays if arr is not None])\n\n# Sum across time dimension\nfire_count_map = da.sum(fire_stack, axis=0)\n\n# Compute with progress bar\nprint(\"Computing fire count map...\")\nwith ProgressBar():\n    fire_count_result = fire_count_map.compute()  # Fixed: was fire_count_result.compute()\n\n# Plot directly (no need to crop again)\nplt.figure(figsize=(12, 8))\nim = plt.imshow(fire_count_result, cmap='Reds', \n               extent=[xdim[x_indices].min(), xdim[x_indices].max(), \n                      ydim[y_indices].min(), ydim[y_indices].max()])\n\naoi_sinusoidal.boundary.plot(ax=plt.gca(), color='black', linewidth=2)\nplt.title(f'Fire Observation Count ({len(viirs_data)} days)')\nplt.xlabel('X (meters)')\nplt.ylabel('Y (meters)')\n\ncbar = plt.colorbar(im)\ncbar.set_label('Number of Fire Observations')\nplt.show()\n\nprint(f\"Maximum fire observations: {fire_count_result.max()}\")\n\n\n\n\nMostrar código\n# import earthaccess\n# import h5py\n# import numpy as np\n# import dask.array as da\n# from dask.delayed import delayed\n# from dask.diagnostics import ProgressBar\n\n# # Extract individual bounding box values\n# bbox = aoi.to_crs(4326).bounds.iloc[0]\n# minx, miny, maxx, maxy = bbox\n\n# # Search for VIIRS data\n# viirs_data = earthaccess.search_data(\n#     short_name=\"VNP14A1\",\n#     bounding_box=(minx, miny, maxx, maxy),\n#     cloud_hosted=True,\n#     temporal=(\"2001-01\", \"2021-01\"),\n# )\n\n# print(f\"Found {len(viirs_data)} granules\")\n\n# # Get coordinate system and find exact pixel bounds\n# files = earthaccess.open([viirs_data[0]], show_progress=False)\n# file_path = files[0]\n\n# with h5py.File(file_path, 'r') as f:\n#     xdim = f['HDFEOS/GRIDS/VIIRS_Grid_Daily_Fire/XDim'][:]\n#     ydim = f['HDFEOS/GRIDS/VIIRS_Grid_Daily_Fire/YDim'][:]\n\n# # Transform AOI to sinusoidal projection\n# aoi_sinusoidal = aoi.to_crs(\"EPSG:4326\").to_crs(\"+proj=sinu +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs\")\n# aoi_bounds = aoi_sinusoidal.bounds.iloc[0]\n\n# # Find exact pixel indices for your AOI\n# x_indices = np.where((xdim &gt;= aoi_bounds.iloc[0]) & (xdim &lt;= aoi_bounds.iloc[2]))[0]\n# y_indices = np.where((ydim &gt;= aoi_bounds.iloc[1]) & (ydim &lt;= aoi_bounds.iloc[3]))[0]\n\n# print(f\"Cropping to {len(y_indices)} x {len(x_indices)} pixels instead of full {len(ydim)} x {len(xdim)}\")\n\n# # Efficient lazy function that only loads the cropped area\n# @delayed\n# def process_granule_cropped(granule):\n#     try:\n#         files = earthaccess.open([granule], show_progress=False)\n#         file_path = files[0]\n        \n#         with h5py.File(file_path, 'r') as f:\n#             # Use advanced indexing to load only the pixels we need\n#             fire_mask = f['HDFEOS/GRIDS/VIIRS_Grid_Daily_Fire/Data Fields/FireMask'][y_indices, :][:, x_indices]\n#             return (fire_mask &gt;= 7).astype(np.int8)\n#     except Exception as e:\n#         print(f\"Error processing granule: {e}\")\n#         return None\n\n# # Create lazy arrays for cropped data only\n# print(f\"Creating lazy arrays for {len(viirs_data)} granules...\")\n# lazy_arrays = [process_granule_cropped(granule) for granule in viirs_data]\n\n# # Stack into dask array with correct cropped dimensions\n# fire_stack = da.stack([da.from_delayed(arr, dtype=np.int8, shape=(len(y_indices), len(x_indices))) \n#                       for arr in lazy_arrays if arr is not None])\n\n# # Sum across time dimension\n# fire_count_map = da.sum(fire_stack, axis=0)\n\n# # Compute with progress bar\n# print(\"Computing fire count map...\")\n# with ProgressBar():\n#     fire_count_result = fire_count_map.compute()  # Fixed: was fire_count_result.compute()\n\n# # Plot directly (no need to crop again)\n# plt.figure(figsize=(12, 8))\n# im = plt.imshow(fire_count_result, cmap='Reds', \n#                extent=[xdim[x_indices].min(), xdim[x_indices].max(), \n#                       ydim[y_indices].min(), ydim[y_indices].max()])\n\n# aoi_sinusoidal.boundary.plot(ax=plt.gca(), color='black', linewidth=2)\n# plt.title(f'Fire Observation Count ({len(viirs_data)} days)')\n# plt.xlabel('X (meters)')\n# plt.ylabel('Y (meters)')\n\n# cbar = plt.colorbar(im)\n# cbar.set_label('Number of Fire Observations')\n# plt.show()\n\n# print(f\"Maximum fire observations: {fire_count_result.max()}\")\n\n\n\n            \n            \n\n\n\n\nMostrar código\n# import dask.array as da\n# import h5py\n# import numpy as np\n# import matplotlib.pyplot as plt\n# import geopandas as gpd\n# from dask.delayed import delayed\n# import warnings\n\n# # Use context manager to ensure no progress bars\n# from dask.diagnostics import ProgressBar\n# import dask\n\n# # Suppress warnings\n# warnings.filterwarnings('ignore', category=FutureWarning)\n\n\n# @delayed\n# def process_granule_lazy(granule):\n#     \"\"\"Lazy processing of a single granule\"\"\"\n#     try:\n#         files = earthaccess.open([granule])\n#         file_path = files[0]\n        \n#         with h5py.File(file_path, 'r') as f:\n#             fire_mask = f['HDFEOS/GRIDS/VIIRS_Grid_Daily_Fire/Data Fields/FireMask'][:]\n#             return (fire_mask &gt;= 7).astype(np.int8)\n#     except Exception as e:\n#         print(f\"Error processing granule: {e}\")\n#         return None\n\n# # Create lazy arrays for all granules\n# print(f\"Creating lazy arrays for {len(viirs_data)} granules...\")\n# lazy_arrays = [process_granule_lazy(granule) for granule in viirs_data]\n\n# # Stack into a single dask array (lazy - no computation yet)\n# print(\"Stacking lazy arrays...\")\n# fire_stack = da.stack([da.from_delayed(arr, dtype=np.int8, shape=(1200, 1200)) \n#                       for arr in lazy_arrays if arr is not None])\n\n# # Sum across time dimension (still lazy!)\n# print(\"Computing fire count map (lazy)...\")\n# fire_count_map = da.sum(fire_stack, axis=0)\n\n# # Get coordinate info from first granule\n# files = earthaccess.open([viirs_data[0]])\n# file_path = files[0]\n# with h5py.File(file_path, 'r') as f:\n#     xdim = f['HDFEOS/GRIDS/VIIRS_Grid_Daily_Fire/XDim'][:]\n#     ydim = f['HDFEOS/GRIDS/VIIRS_Grid_Daily_Fire/YDim'][:]\n\n# # Transform AOI and crop\n# aoi_sinusoidal = aoi.to_crs(\"EPSG:4326\").to_crs(\"+proj=sinu +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs\")\n# aoi_bounds = aoi_sinusoidal.bounds.iloc[0]\n# x_mask = (xdim &gt;= aoi_bounds.iloc[0]) & (xdim &lt;= aoi_bounds.iloc[2])\n# y_mask = (ydim &gt;= aoi_bounds.iloc[1]) & (ydim &lt;= aoi_bounds.iloc[3])\n\n# # Crop the lazy array\n# fire_count_cropped = fire_count_map[y_mask][:, x_mask]\n\n# # Now compute the result with NO progress bars\n# print(\"Computing final result...\")\n\n\n\n# # Temporarily disable all callbacks\n# original_callbacks = dask.callbacks.Callback.active.copy()\n# dask.callbacks.Callback.active.clear()\n\n# try:\n#     fire_count_result = fire_count_cropped.compute()\n# finally:\n#     # Restore original callbacks\n#     dask.callbacks.Callback.active.update(original_callbacks)\n\n# # Plot\n# plt.figure(figsize=(12, 8))\n# im = plt.imshow(fire_count_result, cmap='Reds', \n#                extent=[xdim[x_mask].min(), xdim[x_mask].max(), \n#                       ydim[y_mask].min(), ydim[y_mask].max()])\n\n# aoi_sinusoidal.boundary.plot(ax=plt.gca(), color='black', linewidth=2)\n# plt.title(f'Fire Observation Count ({len(viirs_data)} days)')\n# plt.xlabel('X (meters)')\n# plt.ylabel('Y (meters)')\n\n# cbar = plt.colorbar(im)\n# cbar.set_label('Number of Fire Observations')\n# plt.show()\n\n# print(f\"Maximum fire observations: {fire_count_result.max()}\")",
    "crumbs": [
      "Cookbooks",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Exposición y vulnerabilidad</span>"
    ]
  },
  {
    "objectID": "cookbooks/villa-del-rosario.html#cobertura-del-suelo",
    "href": "cookbooks/villa-del-rosario.html#cobertura-del-suelo",
    "title": "14  Exposición y vulnerabilidad",
    "section": "14.3 Cobertura del suelo",
    "text": "14.3 Cobertura del suelo\n\n\nMostrar código\nimport rioxarray as rio\n\n\n\n            \n            \n\n\n\n\nMostrar código\n# Load the cloud GeoTIFF clipped to your GeoDataFrame\nsuelo_2022_ruta = \"https://storage.googleapis.com/mapbiomas-public/initiatives/argentina/collection-1/coverage/argentina_coverage_2022.tif\"\n\nsuelo_2022 = rio.open_rasterio(\n    suelo_2022_ruta,\n    chunks={\"x\": 1024, \"y\": 1024},\n)\n\n\n\n            \n            \n\n\n\n\nMostrar código\n# Clip with from_disk=True for memory efficiency\nsuelo_2022 = suelo_2022.rio.clip(\n    aoi.geometry.values, \n    # aoi.buffer(1000 * 20).geometry.values, # clip to 200km buffer: \n    aoi.crs,\n    from_disk=True,\n)\n\n\n\n            \n            \n\n\n\n\nMostrar código\nsuelo_2022.plot()\n\n\n\n            \n            \n\n\n\n\n\n\n\n\n\n\n\nMostrar código\n# suelo_2022.rio.to_raster(\"/home/nissim/Documents/dev/fulbright/ciut-riesgo/data/villa_del_rosario/suelo_2022.tif\")\n\n\n\n            \n            \n\n\n\n\nMostrar código\n# Define the detailed categories and colors\ncategories_detailed = {\n    'Leñosa cerrada': {'ids': [3], 'color': '#1f8d49'},\n    'Leñosa abierta': {'ids': [4], 'color': '#7dc975'},\n    'Leñosa dispersa': {'ids': [45], 'color': '#807a40'},\n    'Leñosa inundable': {'ids': [6], 'color': '#026975'},\n    'Vegetación no leñosa inundable': {'ids': [11], 'color': '#519799'},\n    'Pastizal': {'ids': [12], 'color': '#d6bc74'},\n    'Estepa': {'ids': [63], 'color': '#ebf8b5'},\n    'Pastura': {'ids': [15], 'color': '#edde8e'},\n    'Agricultura': {'ids': [18], 'color': '#e974ed'},\n    'Plantación forestal': {'ids': [9], 'color': '#7a5900'},\n    'Cultivo arbustivo': {'ids': [36], 'color': '#d082de'},\n    'Mosaico agropecuario': {'ids': [21], 'color': '#ffefc3'},\n    'Área sin vegetación': {'ids': [22], 'color': '#d4271e'},\n    'Río, lago u océano': {'ids': [33], 'color': '#2532e4'},\n    'Hielo y nieve en superficie': {'ids': [34], 'color': '#93dfe6'},\n    'No observado': {'ids': [27], 'color': '#ffffff'}\n}\n\n# You can also create grouped categories for broader analysis\ncategories_grouped = {\n    'Vegetación leñosa': {\n        'ids': [3, 4, 45, 6], \n        'color': '#1f8d49',\n        'subcategories': ['Leñosa cerrada', 'Leñosa abierta', 'Leñosa dispersa', 'Leñosa inundable']\n    },\n    'Vegetación no leñosa': {\n        'ids': [11, 12, 63], \n        'color': '#d6bc74',\n        'subcategories': ['Vegetación no leñosa inundable', 'Pastizal', 'Estepa']\n    },\n    'Área agropecuaria': {\n        'ids': [15, 18, 9, 36, 21], \n        'color': '#ffefc3',\n        'subcategories': ['Pastura', 'Agricultura', 'Plantación forestal', 'Cultivo arbustivo', 'Mosaico agropecuario']\n    },\n    'Área sin vegetación': {\n        'ids': [22], \n        'color': '#d4271e',\n        'subcategories': ['Área sin vegetación']\n    },\n    'Cuerpo de agua': {\n        'ids': [33, 34], \n        'color': '#2532e3',\n        'subcategories': ['Río, lago u océano', 'Hielo y nieve en superficie']\n    },\n    'No observado': {\n        'ids': [27], \n        'color': '#ffffff',\n        'subcategories': ['No observado']\n    }\n}\n\n# Function to categorize pixels\ndef categorize_pixel_detailed(value, categories):\n    \"\"\"Convert pixel value to detailed category name\"\"\"\n    for category, info in categories.items():\n        if value in info['ids']:\n            return category\n    return 'Other'\n\ndef categorize_pixel_grouped(value, categories):\n    \"\"\"Convert pixel value to grouped category name\"\"\"\n    for category, info in categories.items():\n        if value in info['ids']:\n            return category\n    return 'Other'\n\n\n\n            \n            \n\n\n\n\nMostrar código\nimport matplotlib.pyplot as plt\nimport matplotlib.colors as mcolors\nimport numpy as np\n\n# Create colormap from detailed categories\ncolors = {}\nfor category, info in categories_detailed.items():\n    for pixel_id in info['ids']:\n        colors[pixel_id] = info['color']\n\ncmap = mcolors.ListedColormap([colors[i] for i in sorted(colors.keys())])\nbounds = sorted(colors.keys())\nnorm = mcolors.BoundaryNorm(bounds, cmap.N)\n\n# Plot\nfig, ax = plt.subplots(figsize=(20, 20))\n\n# Plot the raster\nim = suelo_2022.plot(\n    ax=ax,\n    cmap=cmap,\n    norm=norm,\n    add_colorbar=False\n)\n\n# Create custom legend from detailed categories\nlegend_labels = {}\nfor category, info in categories_detailed.items():\n    legend_labels[info['color']] = category\n\n# Add legend below the map\nlegend_elements = [plt.Rectangle((0,0),1,1, facecolor=color, label=label) \n                  for color, label in legend_labels.items()]\nax.legend(handles=legend_elements, loc='lower center', bbox_to_anchor=(0.5, -0.1), \n          ncol=3, frameon=False)\n\nplt.title('Cobertura del Suelo - MapBiomas 2022')\nplt.tight_layout()\nplt.show()\n\n\n\n            \n            \n\n\n\n\n\n\n\n\n\n\n\nMostrar código\nimport pandas as pd\n\n\n\n            \n            \n\n\n\n\nMostrar código\n# Calculate pixel counts for each category\nunique_values, counts = np.unique(suelo_2022.values[0], return_counts=True)\n\n# Create a mapping from pixel IDs to category names\nid_to_category = {}\nfor category, info in categories_detailed.items():\n    for pixel_id in info['ids']:\n        id_to_category[pixel_id] = category\n\n# Calculate total pixels excluding no-data (ID 0)\nvalid_pixels = counts[unique_values != 0]\nvalid_values = unique_values[unique_values != 0]\ntotal_pixels = np.sum(valid_pixels)\npixel_area_hectares = 0.09  # 30m x 30m = 900 m² = 0.09 hectares\n\n# Create results list\nresults = []\nfor pixel_id, count in zip(valid_values, valid_pixels):\n    if pixel_id in id_to_category:\n        category = id_to_category[pixel_id]\n        area_hectares = count * pixel_area_hectares\n        percentage = (count / total_pixels) * 100\n        results.append({\n            'Categoría': category,\n            'ID': pixel_id,\n            'Área (hectáreas)': f\"{area_hectares:,.1f}\",\n            'Porcentaje (%)': f\"{percentage:.1f}\"\n        })\n\n# Sort by area (descending)\nresults.sort(key=lambda x: float(x['Área (hectáreas)'].replace(',', '')), reverse=True)\n\n# Create DataFrame and display\ndf = pd.DataFrame(results)\nprint(\"Cobertura del Suelo - MapBiomas 2022\")\nprint(\"=\" * 50)\nprint(df.to_string(index=False))\nprint(f\"\\nTotal área: {total_pixels * pixel_area_hectares:,.1f} hectáreas\")\n\n\n\n            \n            \n\n\nCobertura del Suelo - MapBiomas 2022\n==================================================\n                     Categoría  ID Área (hectáreas) Porcentaje (%)\n                   Agricultura  18         54,481.7           77.6\n                       Pastura  15          8,458.7           12.1\n                      Pastizal  12          2,922.2            4.2\n                Leñosa cerrada   3          1,473.0            2.1\n                Leñosa abierta   4          1,430.6            2.0\n           Área sin vegetación  22            865.5            1.2\nVegetación no leñosa inundable  11            513.1            0.7\n           Plantación forestal   9             32.4            0.0\n            Río, lago u océano  33             18.6            0.0\n\nTotal área: 70,195.9 hectáreas\n\n\n\n\nMostrar código\nimport rioxarray as rio\nimport pandas as pd\nimport numpy as np\nfrom tqdm import tqdm\n\n# Process data for all years\nyears = range(2000, 2023)\nyearly_data = []\n\nprint(\"Processing MapBiomas data for all years...\")\n\nfor year in tqdm(years):\n    try:\n        # Load the cloud GeoTIFF for the year\n        suelo_ruta = f\"https://storage.googleapis.com/mapbiomas-public/initiatives/argentina/collection-1/coverage/argentina_coverage_{year}.tif\"\n        \n        suelo = rio.open_rasterio(\n            suelo_ruta,\n            chunks={\"x\": 1024, \"y\": 1024},\n        )\n        \n        # Clip with from_disk=True for memory efficiency\n        suelo_clipped = suelo.rio.clip(\n            aoi.geometry.values,\n            aoi.crs,\n            from_disk=True,\n        )\n        \n        # Get unique values and their counts\n        values, counts = np.unique(suelo_clipped.values.flatten(), return_counts=True)\n        \n        # Exclude no-data values (pixel ID 0)\n        valid_mask = values != 0\n        valid_values = values[valid_mask]\n        valid_counts = counts[valid_mask]\n        \n        # Create a mapping from pixel value to category\n        value_to_category = {}\n        for value in valid_values:\n            if not np.isnan(value):\n                value_to_category[int(value)] = categorize_pixel_grouped(int(value), categories_grouped)\n        \n        # Calculate percentages for each category (excluding no-data)\n        total_pixels = valid_counts.sum()\n        year_percentages = {}\n        \n        for category in categories_grouped.keys():\n            category_pixels = 0\n            for value, count in zip(valid_values, valid_counts):\n                if not np.isnan(value) and value_to_category.get(int(value)) == category:\n                    category_pixels += count\n            year_percentages[category] = (category_pixels / total_pixels) * 100\n        \n        year_percentages['year'] = year\n        yearly_data.append(year_percentages)\n        \n        # Clean up memory\n        del suelo, suelo_clipped\n        \n    except Exception as e:\n        print(f\"Error processing year {year}: {e}\")\n        continue\n\n# Convert to DataFrame\ndf_yearly = pd.DataFrame(yearly_data)\ndf_yearly = df_yearly.set_index('year')\n\nprint(\"Data processing complete!\")\nprint(f\"Processed {len(df_yearly)} years\")\nprint(\"\\nSample data:\")\nprint(df_yearly.head())\n\n\n\n            \n            \n\n\nProcessing MapBiomas data for all years...\n\n\n100%|██████████| 23/23 [01:33&lt;00:00,  4.05s/it]\n\n\nData processing complete!\nProcessed 23 years\n\nSample data:\n      Vegetación leñosa  Vegetación no leñosa  Área agropecuaria  \\\nyear                                                               \n2000           6.144970              5.184145          88.022258   \n2001           5.985345              5.017213          88.323685   \n2002           5.655198              5.393388          88.296248   \n2003           6.153817              4.694373          88.553570   \n2004           4.742068              4.236526          90.387522   \n\n      Área sin vegetación  Cuerpo de agua  No observado  \nyear                                                     \n2000             0.645165        0.003462           0.0  \n2001             0.673500        0.000256           0.0  \n2002             0.654910        0.000256           0.0  \n2003             0.598240        0.000000           0.0  \n2004             0.633883        0.000000           0.0  \n\n\n\n\n\n\n\nMostrar código\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Set text as text objects, not paths\nplt.rcParams['svg.fonttype'] = 'none'\n\n# Create stacked 100% bar chart\nfig, ax = plt.subplots(figsize=(16, 4))\n\n# Filter out categories with no data and exclude bodies of water\ncategories_with_data = []\ncolors_with_data = []\n\nfor category in categories_grouped.keys():\n    if category != 'Cuerpo de agua' and df_yearly[category].sum() &gt; 0:  # Exclude bodies of water\n        categories_with_data.append(category)\n        colors_with_data.append(categories_grouped[category]['color'])\n\n# Reorder categories to put 'Área agropecuaria' on top (reverse order for stacking)\ncategory_order = ['Other', 'No observado', 'Área sin vegetación', 'Vegetación no leñosa', \n                  'Vegetación leñosa', 'Área agropecuaria']\nordered_categories = []\nordered_colors = []\n\nfor cat in category_order:\n    if cat in categories_with_data:\n        idx = categories_with_data.index(cat)\n        ordered_categories.append(cat)\n        ordered_colors.append(colors_with_data[idx])\n\n# Add any remaining categories not in the order\nfor cat in categories_with_data:\n    if cat not in ordered_categories:\n        idx = categories_with_data.index(cat)\n        ordered_categories.append(cat)\n        ordered_colors.append(colors_with_data[idx])\n\n# Create stacked bars\nbottom = np.zeros(len(df_yearly))\nbars = []\n\nfor i, category in enumerate(ordered_categories):\n    values = df_yearly[category].values\n    bars.append(ax.bar(df_yearly.index, values, bottom=bottom, \n                       color=ordered_colors[i], alpha=0.8, label=category))\n    bottom += values\n\n# Customize the plot\nax.set_xlabel('Año', fontsize=12)\nax.set_ylabel('Porcentaje (%)', fontsize=12)\nax.set_title('Evolución Temporal de Cobertura del Suelo\\nVilla del Rosario (2000-2022)', \n             fontsize=14, fontweight='bold')\n\n# Set y-axis to 100%\nax.set_ylim(0, 100)\n\n# Add legend\nax.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\n\n# Remove top and right spines for minimalist look\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set grid\nax.grid(True, alpha=0.3, linestyle='-', linewidth=0.5, axis='y')\n\nplt.tight_layout()\n\n# Save as SVG\n# plt.savefig('/home/nissim/Documents/dev/fulbright/ciut-riesgo/data/villa_del_rosario/land_cover_timeseries.svg', \n#             format='svg', dpi=300, bbox_inches='tight')\n\nplt.show()\n\n\n\n            \n            \n\n\n\n\n\n\n\n\n\n\n\nMostrar código\nimport rioxarray as rio\n\n# Load the cloud GeoTIFF clipped to your GeoDataFrame\nsuelo_2000_ruta = \"https://storage.googleapis.com/mapbiomas-public/initiatives/argentina/collection-1/coverage/argentina_coverage_2000.tif\"\n\nsuelo_2000 = rio.open_rasterio(\n    suelo_2000_ruta,\n    chunks={\"x\": 1024, \"y\": 1024},\n)\n\n# Clip with from_disk=True for memory efficiency\nsuelo_2000 = suelo_2000.rio.clip(\n    aoi.geometry.values,\n    aoi.crs,\n    from_disk=True,\n)\n\n\n\n            \n            \n\n\n\n\nMostrar código\nimport plotly.graph_objects as go\nimport numpy as np\n\n# Ensure both rasters have the same shape by clipping to the same extent\nsuelo_2000_clipped = suelo_2000.rio.clip(aoi.geometry.values, aoi.crs, from_disk=True)\nsuelo_2022_clipped = suelo_2022.rio.clip(aoi.geometry.values, aoi.crs, from_disk=True)\n\n# Convert pixel values to grouped categories for both years\nsuelo_2000_cat = np.vectorize(lambda x: categorize_pixel_grouped(x, categories_grouped))(suelo_2000_clipped.values[0])\nsuelo_2022_cat = np.vectorize(lambda x: categorize_pixel_grouped(x, categories_grouped))(suelo_2022_clipped.values[0])\n\n# Get unique categories (excluding no-data and bodies of water)\nunique_2000 = np.unique(suelo_2000_cat)\nunique_2022 = np.unique(suelo_2022_cat)\n\n# Filter out unwanted categories\nvalid_categories = ['Área agropecuaria', 'Vegetación leñosa', 'Vegetación no leñosa', 'Área sin vegetación']\nexisting_2000 = [cat for cat in unique_2000 if cat in valid_categories]\nexisting_2022 = [cat for cat in unique_2022 if cat in valid_categories]\n\n# Calculate total pixels for percentage calculations\ntotal_2000 = np.sum([np.sum(suelo_2000_cat == cat) for cat in existing_2000])\ntotal_2022 = np.sum([np.sum(suelo_2022_cat == cat) for cat in existing_2022])\n\n# Create transition matrix\ntransition_matrix = {}\nfor cat_2000 in existing_2000:\n    transition_matrix[cat_2000] = {}\n    mask_2000 = (suelo_2000_cat == cat_2000)\n    for cat_2022 in existing_2022:\n        mask_2022 = (suelo_2022_cat == cat_2022)\n        transition_count = np.sum(mask_2000 & mask_2022)\n        if transition_count &gt; 0:\n            transition_matrix[cat_2000][cat_2022] = transition_count\n\n# Prepare Sankey data\nsource = []\ntarget = []\nvalue = []\nnode_labels = []\nnode_colors = []\nlink_colors = []\n\n# Add 2000 nodes with percentages\nfor i, cat in enumerate(existing_2000):\n    count = np.sum(suelo_2000_cat == cat)\n    percentage = (count / total_2000) * 100\n    node_labels.append(f\"{cat}&lt;br&gt;2000&lt;br&gt;({percentage:.1f}%)\")\n    node_colors.append(categories_grouped[cat]['color'])\n\n# Add 2022 nodes with percentages\nfor i, cat in enumerate(existing_2022):\n    count = np.sum(suelo_2022_cat == cat)\n    percentage = (count / total_2022) * 100\n    node_labels.append(f\"{cat}&lt;br&gt;2022&lt;br&gt;({percentage:.1f}%)\")\n    node_colors.append(categories_grouped[cat]['color'])\n\n# Create links based on actual transitions\nfor cat_2000, transitions in transition_matrix.items():\n    source_idx = existing_2000.index(cat_2000)\n    for cat_2022, count in transitions.items():\n        target_idx = len(existing_2000) + existing_2022.index(cat_2022)\n        \n        source.append(source_idx)\n        target.append(target_idx)\n        value.append(count)\n        link_colors.append(categories_grouped[cat_2000]['color'])\n\n# Create Sankey diagram\nfig = go.Figure(data=[go.Sankey(\n    node=dict(\n        pad=15,\n        thickness=20,\n        line=dict(color=\"black\", width=0.5),\n        label=node_labels,\n        color=node_colors\n    ),\n    link=dict(\n        source=source,\n        target=target,\n        value=value,\n        color=link_colors\n    )\n)])\n\nfig.update_layout(\n    title_text=\"Transiciones Reales de Cobertura del Suelo (2000 → 2022)\",\n    font_size=12,\n    width=800,\n    height=800\n)\n\n# Try to save as PDF\n# try:\n#     fig.write_image('/home/nissim/Documents/dev/fulbright/ciut-riesgo/data/villa_del_rosario/sankey_transitions.pdf', \n#                     format='pdf', width=800, height=800)\n#     print(\"PDF saved successfully!\")\n# except Exception as e:\n#     print(f\"PDF export failed: {e}\")\n#     # Try SVG as fallback\n#     try:\n#         fig.write_image('/home/nissim/Documents/dev/fulbright/ciut-riesgo/data/villa_del_rosario/sankey_transitions.svg', \n#                         format='svg', width=800, height=800)\n#         print(\"SVG saved successfully!\")\n#     except Exception as e2:\n#         print(f\"SVG also failed: {e2}\")\n\nfig.show()\n\n\n\n            \n            \n\n\n/home/nissim/Documents/dev/fulbright/ciut-riesgo/.venv/lib/python3.12/site-packages/xarray/core/duck_array_ops.py:237: RuntimeWarning: invalid value encountered in cast\n  return data.astype(dtype, **kwargs)\n/home/nissim/Documents/dev/fulbright/ciut-riesgo/.venv/lib/python3.12/site-packages/xarray/core/duck_array_ops.py:237: RuntimeWarning: invalid value encountered in cast\n  return data.astype(dtype, **kwargs)\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n\nMostrar código\n# Calculate total hectares for each major class\npixel_area_hectares = 0.09  # 30m x 30m = 900 m² = 0.09 hectares\n\nprint(\"TOTAL HECTARES POR CLASE PRINCIPAL\")\nprint(\"=\" * 50)\n\nprint(\"\\n2000:\")\nfor cat in existing_2000:\n    count = np.sum(suelo_2000_cat == cat)\n    hectares = count * pixel_area_hectares\n    percentage = (count / total_2000) * 100\n    print(f\"{cat}: {hectares:,.1f} ha ({percentage:.1f}%)\")\n\nprint(\"\\n2022:\")\nfor cat in existing_2022:\n    count = np.sum(suelo_2022_cat == cat)\n    hectares = count * pixel_area_hectares\n    percentage = (count / total_2022) * 100\n    print(f\"{cat}: {hectares:,.1f} ha ({percentage:.1f}%)\")\n\n# Calculate total area\ntotal_hectares_2000 = total_2000 * pixel_area_hectares\ntotal_hectares_2022 = total_2022 * pixel_area_hectares\n\nprint(f\"\\nTOTAL ÁREA:\")\nprint(f\"2000: {total_hectares_2000:,.1f} ha\")\nprint(f\"2022: {total_hectares_2022:,.1f} ha\")\n\n\n\n            \n            \n\n\nTOTAL HECTARES POR CLASE PRINCIPAL\n==================================================\n\n2000:\nVegetación leñosa: 4,313.5 ha (6.1%)\nVegetación no leñosa: 3,639.1 ha (5.2%)\nÁrea agropecuaria: 61,788.1 ha (88.0%)\nÁrea sin vegetación: 452.9 ha (0.6%)\n\n2022:\nVegetación leñosa: 2,903.7 ha (4.1%)\nVegetación no leñosa: 3,435.3 ha (4.9%)\nÁrea agropecuaria: 62,972.8 ha (89.7%)\nÁrea sin vegetación: 865.5 ha (1.2%)\n\nTOTAL ÁREA:\n2000: 70,193.5 ha\n2022: 70,177.3 ha\n\n\n\n\nMostrar código\nimport matplotlib.pyplot as plt\nimport matplotlib.colors as mcolors\nimport numpy as np\n\n# Create colormap from detailed categories\ncolors = {}\nfor category, info in categories_detailed.items():\n    for pixel_id in info['ids']:\n        colors[pixel_id] = info['color']\n\ncmap = mcolors.ListedColormap([colors[i] for i in sorted(colors.keys())])\nbounds = sorted(colors.keys())\nnorm = mcolors.BoundaryNorm(bounds, cmap.N)\n\n# Plot\nfig, ax = plt.subplots(figsize=(20, 20))\n\n# Plot the raster\nim = suelo_2000.plot(\n    ax=ax,\n    cmap=cmap,\n    norm=norm,\n    add_colorbar=False\n)\n\n# Create custom legend from detailed categories\nlegend_labels = {}\nfor category, info in categories_detailed.items():\n    legend_labels[info['color']] = category\n\n# Add legend below the map\nlegend_elements = [plt.Rectangle((0,0),1,1, facecolor=color, label=label) \n                  for color, label in legend_labels.items()]\nax.legend(handles=legend_elements, loc='lower center', bbox_to_anchor=(0.5, -0.1), \n          ncol=3, frameon=False)\n\nplt.title('Cobertura del Suelo - MapBiomas 2000')\nplt.tight_layout()\nplt.show()\n\n\n\n\nMostrar código\nimport pandas as pd\nimport numpy as np\n\n# Calculate pixel counts for each category\nunique_values, counts = np.unique(suelo_2000.values[0], return_counts=True)\n\n# Create a mapping from pixel IDs to category names\nid_to_category = {}\nfor category, info in categories_detailed.items():\n    for pixel_id in info['ids']:\n        id_to_category[pixel_id] = category\n\n# Calculate total pixels and area per pixel (assuming 100m resolution)\ntotal_pixels = np.sum(counts)\npixel_area_hectares = 0.01  # 100m x 100m = 1 hectare\n\n# Create results list\nresults = []\nfor pixel_id, count in zip(unique_values, counts):\n    if pixel_id in id_to_category:\n        category = id_to_category[pixel_id]\n        area_hectares = count * pixel_area_hectares\n        percentage = (count / total_pixels) * 100\n        results.append({\n            'Categoría': category,\n            'ID': pixel_id,\n            'Área (hectáreas)': f\"{area_hectares:,.1f}\",\n            'Porcentaje (%)': f\"{percentage:.1f}\"\n        })\n\n# Sort by area (descending)\nresults.sort(key=lambda x: float(x['Área (hectáreas)'].replace(',', '')), reverse=True)\n\n# Create DataFrame and display\ndf = pd.DataFrame(results)\nprint(\"Cobertura del Suelo - MapBiomas 2000\")\nprint(\"=\" * 50)\nprint(df.to_string(index=False))\nprint(f\"\\nTotal área: {total_pixels * pixel_area_hectares:,.1f} hectáreas\")\n\n\n\n\nMostrar código\nimport matplotlib.pyplot as plt\nimport matplotlib.colors as mcolors\nimport numpy as np\n\ndef categorize_pixel_grouped(value, categories):\n    \"\"\"Convert pixel value to grouped category name\"\"\"\n    for category, info in categories.items():\n        if value in info['ids']:\n            return category\n    return 'Other'\n\n# Get the raw pixel values\nsuelo_2000_values = suelo_2000.values[0]\nsuelo_2022_values = suelo_2022.values[0]\n\n# Convert to grouped categories\nsuelo_2000_cat = np.vectorize(lambda x: categorize_pixel_grouped(x, categories_grouped))(suelo_2000_values)\nsuelo_2022_cat = np.vectorize(lambda x: categorize_pixel_grouped(x, categories_grouped))(suelo_2022_values)\n\n# Create transition map\ntransition_map = np.zeros_like(suelo_2000_cat, dtype=int)\n\n# Only process pixels that actually changed\nchanged_mask = (suelo_2000_values != suelo_2022_values)\n\n# Transition 1: Agriculture/non-vegetated → Forest/natural (natural regrowth)\nmask1 = changed_mask & ((suelo_2000_cat == 'Área agropecuaria') | \n                       (suelo_2000_cat == 'Área sin vegetación')) & \\\n        ((suelo_2022_cat == 'Vegetación leñosa') | \n         (suelo_2022_cat == 'Vegetación no leñosa'))\ntransition_map[mask1] = 1\n\n# Transition 2: Forest/natural → Agriculture/non-vegetated\nmask2 = changed_mask & ((suelo_2000_cat == 'Vegetación leñosa') | \n                       (suelo_2000_cat == 'Vegetación no leñosa')) & \\\n        ((suelo_2022_cat == 'Área agropecuaria') | \n         (suelo_2022_cat == 'Área sin vegetación'))\ntransition_map[mask2] = 2\n\n# Transition 3: Water gain\nmask3 = changed_mask & (suelo_2000_cat != 'Cuerpo de agua') & (suelo_2022_cat == 'Cuerpo de agua')\ntransition_map[mask3] = 3\n\n# Transition 4: Water loss\nmask4 = changed_mask & (suelo_2000_cat == 'Cuerpo de agua') & (suelo_2022_cat != 'Cuerpo de agua')\ntransition_map[mask4] = 4\n\n# Transition 5: Forest plantation gain (only specific plantation types)\nmask5 = changed_mask & (suelo_2000_cat == 'Área agropecuaria') & (suelo_2022_cat == 'Vegetación leñosa') & (suelo_2022_values == 9)\ntransition_map[mask5] = 5\n\n# Transition 6: Other changes (catch-all for remaining changed pixels)\nmask6 = changed_mask & (transition_map == 0)\ntransition_map[mask6] = 6\n\n# Transition 7: No change\ntransition_map[~changed_mask] = 7\n\n# Colors\ncolors = {\n    0: '#cccccc',  # Unclassified\n    1: '#06ff00',  # Agriculture → Forest/natural (regeneration)\n    2: '#ff0000',  # Forest/natural → Agriculture\n    3: '#0066cc',  # Water gain\n    4: '#ff6600',  # Water loss\n    5: '#8a2be2',  # Forest plantation gain\n    6: '#ffa500',  # Other changes\n    7: '#aaa9a9'   # No change\n}\n\nlabels = {\n    0: 'No clasificado',\n    1: 'Agricultura → Forestal/natural',\n    2: 'Forestal/natural → Agricultura',\n    3: 'Ganancia de agua',\n    4: 'Pérdida de agua',\n    5: 'Ganancia plantación forestal',\n    6: 'Otros cambios',\n    7: 'Sin cambio'\n}\n\n# Create colormap\ncmap = mcolors.ListedColormap([colors[i] for i in sorted(colors.keys())])\nbounds = sorted(colors.keys())\nnorm = mcolors.BoundaryNorm(bounds, cmap.N)\n\n# Plot\nfig, ax = plt.subplots(figsize=(15, 15))\nim = ax.imshow(transition_map, cmap=cmap, norm=norm)\n\n# Legend\nlegend_elements = [plt.Rectangle((0,0),1,1, facecolor=colors[i], label=labels[i]) \n                  for i in sorted(colors.keys())]\nax.legend(handles=legend_elements, loc='lower center', bbox_to_anchor=(0.5, -0.1), \n          ncol=2, frameon=False)\n\nplt.title('Transiciones de Cobertura del Suelo (2000-2022)')\nplt.tight_layout()\nplt.show()\n\n\n\n\nMostrar código\nimport plotly.graph_objects as go\nimport numpy as np\n\ndef categorize_pixel_grouped(value, categories):\n    \"\"\"Convert pixel value to grouped category name\"\"\"\n    for category, info in categories.items():\n        if value in info['ids']:\n            return category\n    return 'Other'\n\n# Convert pixel values to grouped categories\nsuelo_2000_cat = np.vectorize(lambda x: categorize_pixel_grouped(x, categories_grouped))(suelo_2000.values[0])\nsuelo_2022_cat = np.vectorize(lambda x: categorize_pixel_grouped(x, categories_grouped))(suelo_2022.values[0])\n\n# Calculate pixel counts for each category\nunique_2000, counts_2000 = np.unique(suelo_2000_cat, return_counts=True)\nunique_2022, counts_2022 = np.unique(suelo_2022_cat, return_counts=True)\n\n# Filter out 'Other' and get only categories that exist\nexisting_2000 = unique_2000[unique_2000 != 'Other']\nexisting_2022 = unique_2022[unique_2022 != 'Other']\n\n# Calculate total pixels\ntotal_2000 = sum(counts_2000[unique_2000 != 'Other'])\ntotal_2022 = sum(counts_2022[unique_2022 != 'Other'])\n\n# Create transition matrix\ntransition_matrix = {}\nfor cat_2000 in existing_2000:\n    transition_matrix[cat_2000] = {}\n    mask_2000 = (suelo_2000_cat == cat_2000)\n    for cat_2022 in existing_2022:\n        mask_2022 = (suelo_2022_cat == cat_2022)\n        transition_count = np.sum(mask_2000 & mask_2022)\n        if transition_count &gt; 0:\n            transition_matrix[cat_2000][cat_2022] = transition_count\n\n# Prepare data for Sankey diagram\nsource = []\ntarget = []\nvalue = []\nnode_labels = []\nnode_colors = []\n\n# Add 2000 categories\nfor cat in existing_2000:\n    count = counts_2000[unique_2000 == cat][0]\n    percentage = (count / total_2000) * 100\n    node_labels.append(f\"{cat}&lt;br&gt;({percentage:.1f}%)\")\n    node_colors.append(categories_grouped[cat]['color'])\n\n# Add 2022 categories\nfor cat in existing_2022:\n    count = counts_2022[unique_2022 == cat][0]\n    percentage = (count / total_2022) * 100\n    node_labels.append(f\"{cat}&lt;br&gt;({percentage:.1f}%)\")\n    node_colors.append(categories_grouped[cat]['color'])\n\n# Create links\nlink_colors = []\nfor cat_2000, transitions in transition_matrix.items():\n    for cat_2022, count in transitions.items():\n        source_idx = node_labels.index(f\"{cat_2000}&lt;br&gt;({(counts_2000[unique_2000 == cat_2000][0] / total_2000) * 100:.1f}%)\")\n        target_idx = node_labels.index(f\"{cat_2022}&lt;br&gt;({(counts_2022[unique_2022 == cat_2022][0] / total_2022) * 100:.1f}%)\")\n        \n        source.append(source_idx)\n        target.append(target_idx)\n        value.append(count)\n        link_colors.append(categories_grouped[cat_2000]['color'])\n\n# Create Sankey diagram\nfig = go.Figure(data=[go.Sankey(\n    node=dict(\n        pad=15,\n        thickness=20,\n        line=dict(color=\"black\", width=0.5),\n        label=node_labels,\n        color=node_colors\n    ),\n    link=dict(\n        source=source,\n        target=target,\n        value=value,\n        color=link_colors\n    )\n)])\n\nfig.update_layout(\n    title_text=\"Transiciones de Cobertura del Suelo (2000-2022)\",\n    font_size=12,\n    width=1000,\n    height=600\n)\n\nfig.show()",
    "crumbs": [
      "Cookbooks",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Exposición y vulnerabilidad</span>"
    ]
  },
  {
    "objectID": "cookbooks/villa-del-rosario.html#loss-to-fire",
    "href": "cookbooks/villa-del-rosario.html#loss-to-fire",
    "title": "14  Exposición y vulnerabilidad",
    "section": "14.4 Loss to fire",
    "text": "14.4 Loss to fire\n\n\nMostrar código\nimport rioxarray as rio\n\n# Load the cloud GeoTIFF clipped to your GeoDataFrame\nperdida_a_fuego_ruta = \"https://glad.umd.edu/users/Alexandra/Fire_GFL_data/2001-24/LAM_fire_forest_loss_2001-24.tif\"\n\nperdida_a_fuego = rio.open_rasterio(\n    perdida_a_fuego_ruta,\n    chunks={\"x\": 1024, \"y\": 1024},\n)\n\n# Clip with from_disk=True for memory efficiency\nperdida_a_fuego = perdida_a_fuego.rio.clip(\n    aoi.buffer(1000 * 20).geometry.values,\n    aoi.crs,\n    from_disk=True,\n)\n\n\n\n            \n            \n\n\n\n\nMostrar código\nperdida_a_fuego.rio.to_raster(\"/home/nissim/Documents/dev/fulbright/ciut-riesgo/data/villa_del_rosario/datos/bosque_perdido_a_fuego_2001-24.tif\")\n\n\n\n            \n            \n\n\n\n\nMostrar código\nperdida_a_fuego\n\n\n\n            \n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray (band: 1, y: 979, x: 1845)&gt; Size: 2MB\narray([[[0, 0, 0, ..., 0, 0, 0],\n        [0, 0, 0, ..., 0, 0, 0],\n        [0, 0, 0, ..., 0, 0, 0],\n        ...,\n        [0, 0, 0, ..., 0, 0, 0],\n        [0, 0, 0, ..., 0, 0, 0],\n        [0, 0, 0, ..., 0, 0, 0]]], shape=(1, 979, 1845), dtype=uint8)\nCoordinates:\n  * x            (x) float64 15kB -63.7 -63.7 -63.7 ... -63.24 -63.24 -63.24\n  * y            (y) float64 8kB -31.45 -31.45 -31.45 ... -31.7 -31.7 -31.7\n  * band         (band) int64 8B 1\n    spatial_ref  int64 8B 0\nAttributes:\n    AREA_OR_POINT:  Area\n    LAYER_TYPE:     athematic\n    scale_factor:   1.0\n    add_offset:     0.0\n    long_name:      Layer_1xarray.DataArrayband: 1y: 979x: 18450 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ... 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0array([[[0, 0, 0, ..., 0, 0, 0],\n        [0, 0, 0, ..., 0, 0, 0],\n        [0, 0, 0, ..., 0, 0, 0],\n        ...,\n        [0, 0, 0, ..., 0, 0, 0],\n        [0, 0, 0, ..., 0, 0, 0],\n        [0, 0, 0, ..., 0, 0, 0]]], shape=(1, 979, 1845), dtype=uint8)Coordinates: (4)x(x)float64-63.7 -63.7 -63.7 ... -63.24 -63.24axis :Xlong_name :longitudestandard_name :longitudeunits :degrees_eastarray([-63.701875, -63.701625, -63.701375, ..., -63.241375, -63.241125,\n       -63.240875], shape=(1845,))y(y)float64-31.45 -31.45 ... -31.7 -31.7axis :Ylong_name :latitudestandard_name :latitudeunits :degrees_northarray([-31.454375, -31.454625, -31.454875, ..., -31.698375, -31.698625,\n       -31.698875], shape=(979,))band(band)int641array([1])spatial_ref()int640crs_wkt :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984grid_mapping_name :latitude_longitudespatial_ref :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]GeoTransform :-63.702 0.0002499999999999992 0.0 -31.454250000000002 0.0 -0.0002499999999999986array(0)Indexes: (3)xPandasIndexPandasIndex(Index([         -63.701875,          -63.701625,          -63.701375,\n       -63.701125000000005,          -63.700875,          -63.700625,\n                -63.700375,          -63.700125,          -63.699875,\n       -63.699625000000005,\n       ...\n                -63.243125,          -63.242875, -63.242625000000004,\n                -63.242375,          -63.242125,          -63.241875,\n                -63.241625,          -63.241375, -63.241125000000004,\n                -63.240875],\n      dtype='float64', name='x', length=1845))yPandasIndexPandasIndex(Index([-31.454375000000002, -31.454625000000004,          -31.454875,\n       -31.455125000000002, -31.455375000000004,          -31.455625,\n       -31.455875000000002, -31.456125000000004,          -31.456375,\n       -31.456625000000003,\n       ...\n                -31.696625, -31.696875000000002, -31.697125000000003,\n                -31.697375, -31.697625000000002, -31.697875000000003,\n                -31.698125, -31.698375000000002, -31.698625000000003,\n                -31.698875],\n      dtype='float64', name='y', length=979))bandPandasIndexPandasIndex(Index([1], dtype='int64', name='band'))Attributes: (5)AREA_OR_POINT :AreaLAYER_TYPE :athematicscale_factor :1.0add_offset :0.0long_name :Layer_1\n\n\n\n\nMostrar código\nperdida_a_fuego.band.values\n\n\n\n            \n            \n\n\narray([1])\n\n\n\n\nMostrar código\nnp.unique(perdida_a_fuego)\n\n\n\n            \n            \n\n\narray([0, 1, 2, 3, 4], dtype=uint8)\n\n\n\n\nMostrar código\nperdida_a_fuego.plot()\n\n\n\n            \n            \n\n\n\n\n\n\n\n\n\n\n\nMostrar código\nimport matplotlib.pyplot as plt\nimport matplotlib.colors as mcolors\n\n# Define the color map and labels based on the classification\ncolors = ['white', 'lightgray', 'yellow', 'orange', 'red', 'darkred']\nlabels = [\n    'No forest loss (0)',\n    'Forest loss - other drivers (1)', \n    'Fire loss - low certainty (2)',\n    'Fire loss - medium certainty (3)',\n    'Fire loss - high certainty (4)',\n    'Fire loss - Africa (5)'\n]\n\n# Create custom colormap\ncmap = mcolors.ListedColormap(colors)\nbounds = [0, 1, 2, 3, 4, 5, 6]\nnorm = mcolors.BoundaryNorm(bounds, cmap.N)\n\n# Plot the data\nfig, ax = plt.subplots(figsize=(12, 8))\nim = perdida_a_fuego.plot(ax=ax, cmap=cmap, norm=norm, add_colorbar=False)\n\n# Add colorbar with custom labels\ncbar = plt.colorbar(im, ax=ax, ticks=[0.5, 1.5, 2.5, 3.5, 4.5, 5.5])\ncbar.set_ticklabels(labels)\ncbar.set_label('Forest Loss Classification', rotation=270, labelpad=20)\n\n# Add title\nplt.title('Forest Loss Due to Fire vs Other Drivers\\n(Hansen et al. 2013, 2001-2024)')\n\nplt.tight_layout()\nplt.show()\n\n\n\n            \n            \n\n\n\n\n\n\n\n\n\n\n\nMostrar código\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Calculate pixel counts for each category\nunique_values, counts = np.unique(perdida_a_fuego, return_counts=True)\n\n# Calculate areas (assuming 30m resolution from Hansen data)\npixel_area = 30 * 30  # 30m x 30m = 900 m²\nareas_hectares = counts * pixel_area / 10000  # Convert to hectares\n\n# Group into fire vs non-fire categories (ONLY actual forest loss)\nfire_categories = [2, 3, 4, 5]  # Low, medium, high certainty fire, Africa fire\nnon_fire_categories = [1]       # Other drivers (excluding no loss = 0)\n\nfire_area = sum(areas_hectares[i] for i, val in enumerate(unique_values) if val in fire_categories)\nnon_fire_area = sum(areas_hectares[i] for i, val in enumerate(unique_values) if val in non_fire_categories)\n\n# Create labels in Spanish\ncategory_labels = ['Pérdida por fuego', 'Otras causas']\nareas = [fire_area, non_fire_area]\ncolors = ['#d4271e', '#808080']  # Red for fire, gray for other\n\n# Create the bar plot\nfig, ax = plt.subplots(figsize=(8, 6))\nbars = ax.bar(category_labels, areas, color=colors, edgecolor='black', linewidth=0.5)\n\n# Add value labels on top of bars\nfor bar, area in zip(bars, areas):\n    height = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2., height + max(areas)*0.01,\n            f'{area:.0f} ha', ha='center', va='bottom', fontweight='bold')\n\n# Customize the plot\nax.set_ylabel('Área (hectáreas)')\nax.set_title('Pérdida de Bosque, 2001-2024')\nax.grid(axis='y', alpha=0.3)\n\nplt.tight_layout()\nplt.savefig('/home/nissim/Documents/dev/fulbright/ciut-riesgo/data/villa_del_rosario/mapas/forest_loss_fire_vs_other.svg', \n            format='svg', dpi=300, bbox_inches='tight')\n\nplt.show()\n\n# Print summary statistics\nprint(\"Resumen de Pérdida de Bosque:\")\nprint(\"=\" * 35)\nprint(f\"{'Pérdida por fuego':25}: {fire_area:8.0f} ha\")\nprint(f\"{'Otras causas':25}: {non_fire_area:8.0f} ha\")\ntotal_loss = fire_area + non_fire_area\nprint(f\"{'Total pérdida':25}: {total_loss:8.0f} ha\")\n\n\n\n            \n            \n\n\n\n\n\n\n\n\n\nResumen de Pérdida de Bosque:\n===================================\nPérdida por fuego        :       13 ha\nOtras causas             :      867 ha\nTotal pérdida            :      880 ha\n\n\n\n\nMostrar código\n\n\n\n\n            \n            \n\n\n&lt;Figure size 640x480 with 0 Axes&gt;\n\n\n\n\nMostrar código\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Calculate urban area (Área sin vegetación) for both years\nurban_2000 = np.sum(suelo_2000_cat == 'Área sin vegetación') * pixel_area_hectares\nurban_2022 = np.sum(suelo_2022_cat == 'Área sin vegetación') * pixel_area_hectares\n\n# Calculate change\nurban_change = urban_2022 - urban_2000\npercent_change = (urban_change / urban_2000) * 100 if urban_2000 &gt; 0 else 0\n\n# Create the bar chart\nfig, ax = plt.subplots(figsize=(8, 6))\n\nyears = ['2000', '2022']\nurban_areas = [urban_2000, urban_2022]\ncolors = ['#d4271e', '#d4271e']  # Same color for both bars\n\nbars = ax.bar(years, urban_areas, color=colors, alpha=0.7, edgecolor='black', linewidth=1)\n\n# Add value labels on top of bars\nfor bar, area in zip(bars, urban_areas):\n    height = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2., height + max(urban_areas)*0.01,\n            f'{area:,.1f} ha', ha='center', va='bottom', fontweight='bold', fontsize=12)\n\n# Add change annotation\nax.annotate(f'Change: {urban_change:+,.1f} ha\\n({percent_change:+.1f}%)', \n            xy=(0.5, max(urban_areas)*0.7), xytext=(0.5, max(urban_areas)*0.9),\n            ha='center', va='center', fontsize=12, fontweight='bold',\n            bbox=dict(boxstyle='round,pad=0.3', facecolor='lightgray', alpha=0.7),\n            arrowprops=dict(arrowstyle='-&gt;', connectionstyle='arc3,rad=0'))\n\n# Customize the plot\nax.set_ylabel('Urban Area (hectares)', fontsize=12)\nax.set_title('Urban Area Change in AOI\\n(2000 vs 2022)', fontsize=14, fontweight='bold')\nax.grid(axis='y', alpha=0.3)\n\n# Format y-axis to show thousands separator\nax.yaxis.set_major_formatter(plt.FuncFormatter(lambda x, p: f'{x:,.0f}'))\n\nplt.tight_layout()\n\nplt.savefig('/home/nissim/Documents/dev/fulbright/ciut-riesgo/data/villa_del_rosario/mapas/urban_expansion.svg', \n            format='svg', dpi=300, bbox_inches='tight')\n\nplt.show()\n\n# Print summary\nprint(\"URBAN AREA CHANGE SUMMARY\")\nprint(\"=\" * 30)\nprint(f\"2000: {urban_2000:,.1f} ha\")\nprint(f\"2022: {urban_2022:,.1f} ha\")\nprint(f\"Change: {urban_change:+,.1f} ha ({percent_change:+.1f}%)\")\n\n\n\n            \n            \n\n\n\n\n\n\n\n\n\nURBAN AREA CHANGE SUMMARY\n==============================\n2000: 452.9 ha\n2022: 865.5 ha\nChange: +412.6 ha (+91.1%)",
    "crumbs": [
      "Cookbooks",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Exposición y vulnerabilidad</span>"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Datos a escala humana",
    "section": "",
    "text": "Introducción\n🚧 Estado del Proyecto: Este libro se encuentra actualmente en las primeras etapas de desarrollo. Esperamos completar un producto mínimo viable para finales de 2025. Consulta la hoja de ruta para más información.\nEste libro se basa en gran parte en el curso Datos Abiertos para Ciudades Resilientes que el autor enseña en la Facultad de Arquitectura y Urbanismo de la Universidad Nacional de La Plata durante el cuatrimestre final de 2025.",
    "crumbs": [
      "Introducción"
    ]
  },
  {
    "objectID": "index.html#sobre-este-libro",
    "href": "index.html#sobre-este-libro",
    "title": "Datos a escala humana",
    "section": "Sobre este libro",
    "text": "Sobre este libro\nDatos a escala humana enseña cómo aprovechar datos globales mediante computación geoespacial nativa de la nube para mitigar el riesgo climático en ciudades.\nDirigido principalmente a urbanistas, funcionarios municipales, arquitectos y técnicos en entornos con recursos limitados donde los datos locales de alta calidad son escasos o de calidad insuficiente. No asume conocimientos avanzados de SIG. Curso intensivo, no exhaustivo. Proporcionamos recursos para profundizar. La acción y los flujos de trabajo simples y replicables son el enfoque.\nDocumento en evolución, actualmente en fase de producto mínimo viable. No es la palabra final y reconocemos que se volverá obsoleto sin desarrollo continuo.\nUsa tecnología geoespacial nativa de la nube. Aunque relativamente nueva, no es difícil y hace las cosas más fáciles. No profundizamos en teoría sino en aplicaciones. Para aprender más, consulta el Cloud-Native Geospatial Forum.\nEscrito primero en español porque casi no existen recursos en español sobre estos temas. El autor no es hablante nativo y ha usado modelos de lenguaje para apoyar la traducción. Si encuentras errores, abre un ticket o contribuye.",
    "crumbs": [
      "Introducción"
    ]
  },
  {
    "objectID": "index.html#filosofía-práctica-sobre-teoría",
    "href": "index.html#filosofía-práctica-sobre-teoría",
    "title": "Datos a escala humana",
    "section": "Filosofía: práctica sobre teoría",
    "text": "Filosofía: práctica sobre teoría\nPriorizamos la práctica sobre la teoría. Equilibramos la explicación de conceptos espaciales con su implementación. Habrá casos donde no profundizaremos en por qué hacemos algo de cierta manera. Te dejamos explorar con modelos de lenguaje o consultar la documentación. Nos enfocamos en hacer.\nTambién priorizamos conceptos sobre técnicas. Regresamos deliberadamente a técnicas centrales: verás agregación espacial y estadísticas zonales repetidamente. No profundizaremos en estadística espacial avanzada. Mostramos los conceptos y los repetimos para que se fijen. El objetivo no es crear analistas geoespaciales completamente formados, sino proporcionar flujos de trabajo replicables que entiendas lo suficientemente bien para aplicarlos en tu propio contexto.",
    "crumbs": [
      "Introducción"
    ]
  },
  {
    "objectID": "index.html#organización",
    "href": "index.html#organización",
    "title": "Datos a escala humana",
    "section": "Organización",
    "text": "Organización\nEl libro está organizado en cuatro secciones principales:\nCapítulo 1: Curso intensivo de SIG y Python. Cubre los fundamentos de trabajar con datos geoespaciales en Python, tanto vectoriales como ráster, y un resumen de las operaciones espaciales básicas que usamos en este libro. También proporcionamos recursos para aprender más sobre Python y SIG.\nCapítulo 2: Datos abiertos. Explora qué son las mejores fuentes de datos abiertos, diferentes formas de acceder a estos datos y por qué estas herramientas son importantes. Profundiza un poco en formatos de datos nativos de la nube y las diferentes formas de acceder a estos conjuntos de datos, además de evaluar su calidad e idoneidad. Trata tanto cuestiones de epistemología como de programación.\nCapítulo 3: Riesgo climático. Definimos qué es el riesgo climático, riesgos climáticos comunes para ciudades y las mejores fuentes de datos disponibles. Hablamos sobre cómo calcular el riesgo climático y algunas limitaciones al calcularlo, dados los conjuntos de datos disponibles.\nCapítulo 4: Datos en acción. Aborda cómo tomar estos conjuntos de datos y vincularlos a políticas concretas y decisiones de infraestructura para proteger a las personas del clima. Abordamos cuestiones de gobernanza, certeza, idoneidad para el propósito, heurísticas, etc.\nCookbooks. Los capítulos 1 a 4 están diseñados para ser más pedagógicos, enfocados en la práctica y el aprendizaje de herramientas y conceptos. La sección de Cookbooks presenta ejemplos del mundo real de estudios de caso que el autor llevó a cabo en Argentina durante su beca Fulbright con gobiernos municipales reales, utilizando datos reales para tomar decisiones reales. Estos ejemplos demuestran lo que es posible con las herramientas que exploramos en este libro. Aceptamos contribuciones de ejemplos adicionales de otros contextos.",
    "crumbs": [
      "Introducción"
    ]
  },
  {
    "objectID": "index.html#autores",
    "href": "index.html#autores",
    "title": "Datos a escala humana",
    "section": "Autor(es)",
    "text": "Autor(es)\n[Sección por completar]",
    "crumbs": [
      "Introducción"
    ]
  },
  {
    "objectID": "index.html#agradecimientos",
    "href": "index.html#agradecimientos",
    "title": "Datos a escala humana",
    "section": "Agradecimientos",
    "text": "Agradecimientos\n[Sección por completar]",
    "crumbs": [
      "Introducción"
    ]
  },
  {
    "objectID": "index.html#patrocinadores-del-proyecto",
    "href": "index.html#patrocinadores-del-proyecto",
    "title": "Datos a escala humana",
    "section": "Patrocinadores del proyecto",
    "text": "Patrocinadores del proyecto\n\n\n\nCentro de Investigaciones Urbanas y Territoriales\n\n\n\n\n\nFacultad de Arquitectura y Urbanismo",
    "crumbs": [
      "Introducción"
    ]
  },
  {
    "objectID": "python-geoespacial/fundamentos.html",
    "href": "python-geoespacial/fundamentos.html",
    "title": "1  Python Geoespacial",
    "section": "",
    "text": "1.1 ¿Por qué Python GIS?",
    "crumbs": [
      "Python Geoespacial",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Python Geoespacial</span>"
    ]
  },
  {
    "objectID": "python-geoespacial/fundamentos.html#por-qué-python-gis",
    "href": "python-geoespacial/fundamentos.html#por-qué-python-gis",
    "title": "1  Python Geoespacial",
    "section": "",
    "text": "1.1.1 Ventajas sobre el Software de Punto y Clic",
    "crumbs": [
      "Python Geoespacial",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Python Geoespacial</span>"
    ]
  },
  {
    "objectID": "python-geoespacial/fundamentos.html#entradasalida-de-datos-es",
    "href": "python-geoespacial/fundamentos.html#entradasalida-de-datos-es",
    "title": "1  Python Geoespacial",
    "section": "1.2 Entrada/Salida de Datos (E/S)",
    "text": "1.2 Entrada/Salida de Datos (E/S)",
    "crumbs": [
      "Python Geoespacial",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Python Geoespacial</span>"
    ]
  },
  {
    "objectID": "python-geoespacial/fundamentos.html#sistemas-de-referencia-de-coordenadas",
    "href": "python-geoespacial/fundamentos.html#sistemas-de-referencia-de-coordenadas",
    "title": "1  Python Geoespacial",
    "section": "1.3 Sistemas de Referencia de Coordenadas",
    "text": "1.3 Sistemas de Referencia de Coordenadas",
    "crumbs": [
      "Python Geoespacial",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Python Geoespacial</span>"
    ]
  },
  {
    "objectID": "python-geoespacial/fundamentos.html#software-y-bibliotecas-geoespaciales",
    "href": "python-geoespacial/fundamentos.html#software-y-bibliotecas-geoespaciales",
    "title": "1  Python Geoespacial",
    "section": "1.4 Software y Bibliotecas Geoespaciales",
    "text": "1.4 Software y Bibliotecas Geoespaciales",
    "crumbs": [
      "Python Geoespacial",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Python Geoespacial</span>"
    ]
  },
  {
    "objectID": "python-geoespacial/analisis-espacial.html",
    "href": "python-geoespacial/analisis-espacial.html",
    "title": "4  Análisis espacial",
    "section": "",
    "text": "4.1 Operaciones Espaciales Básicas",
    "crumbs": [
      "Python Geoespacial",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Análisis espacial</span>"
    ]
  },
  {
    "objectID": "python-geoespacial/analisis-espacial.html#operaciones-espaciales-básicas",
    "href": "python-geoespacial/analisis-espacial.html#operaciones-espaciales-básicas",
    "title": "4  Análisis espacial",
    "section": "",
    "text": "4.1.1 Reproyecciones\n\n\n4.1.2 Operaciones de Recorte\n\n\n4.1.3 Superposiciones Espaciales\n\n\n4.1.4 Estadísticas Zonales\n\n\n4.1.5 Agregaciones Espaciales Básicas\n\n\n4.1.6 Extracción de Raster",
    "crumbs": [
      "Python Geoespacial",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Análisis espacial</span>"
    ]
  },
  {
    "objectID": "python-geoespacial/analisis-espacial.html#recursos-adicionales-y-aprendizaje-avanzado",
    "href": "python-geoespacial/analisis-espacial.html#recursos-adicionales-y-aprendizaje-avanzado",
    "title": "4  Análisis espacial",
    "section": "4.2 Recursos Adicionales y Aprendizaje Avanzado",
    "text": "4.2 Recursos Adicionales y Aprendizaje Avanzado",
    "crumbs": [
      "Python Geoespacial",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Análisis espacial</span>"
    ]
  },
  {
    "objectID": "riesgo-climatico/fundamentos.html",
    "href": "riesgo-climatico/fundamentos.html",
    "title": "6  Riesgo Climático para Ciudades",
    "section": "",
    "text": "6.1 ¿Qué es el Riesgo Climático?",
    "crumbs": [
      "Riesgo Climático para Ciudades",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Riesgo Climático para Ciudades</span>"
    ]
  },
  {
    "objectID": "riesgo-climatico/riesgo.html",
    "href": "riesgo-climatico/riesgo.html",
    "title": "10  Riesgo",
    "section": "",
    "text": "10.0.1 Combinando Factores para Obtener Impacto",
    "crumbs": [
      "Riesgo Climático para Ciudades",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Riesgo</span>"
    ]
  },
  {
    "objectID": "riesgo-climatico/riesgo.html#cambio-climático-y-riesgo-de-desastres",
    "href": "riesgo-climatico/riesgo.html#cambio-climático-y-riesgo-de-desastres",
    "title": "10  Riesgo",
    "section": "10.1 Cambio Climático y Riesgo de Desastres",
    "text": "10.1 Cambio Climático y Riesgo de Desastres",
    "crumbs": [
      "Riesgo Climático para Ciudades",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Riesgo</span>"
    ]
  },
  {
    "objectID": "riesgo-climatico/riesgo.html#efectos-específicos-en-ciudades",
    "href": "riesgo-climatico/riesgo.html#efectos-específicos-en-ciudades",
    "title": "10  Riesgo",
    "section": "10.2 Efectos Específicos en Ciudades",
    "text": "10.2 Efectos Específicos en Ciudades\n\n10.2.1 Características Urbanas que Aumentan el Riesgo\n\n\n10.2.2 Infraestructura Crítica",
    "crumbs": [
      "Riesgo Climático para Ciudades",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Riesgo</span>"
    ]
  },
  {
    "objectID": "riesgo-climatico/riesgo.html#tipos-comunes-de-peligros-para-ciudades",
    "href": "riesgo-climatico/riesgo.html#tipos-comunes-de-peligros-para-ciudades",
    "title": "10  Riesgo",
    "section": "10.3 Tipos Comunes de Peligros para Ciudades",
    "text": "10.3 Tipos Comunes de Peligros para Ciudades\n\n10.3.1 Inundaciones Urbanas\n\n\n10.3.2 Olas de Calor\n\n\n10.3.3 Tormentas Intensas\n\n\n10.3.4 Elevación del Nivel del Mar",
    "crumbs": [
      "Riesgo Climático para Ciudades",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Riesgo</span>"
    ]
  },
  {
    "objectID": "datos-abiertos/datos-abiertos.html",
    "href": "datos-abiertos/datos-abiertos.html",
    "title": "11  Datos Abiertos",
    "section": "",
    "text": "11.1 Qué son los Datos Abiertos",
    "crumbs": [
      "Datos Abiertos",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Datos Abiertos</span>"
    ]
  },
  {
    "objectID": "datos-abiertos/datos-abiertos.html#fuentes-comunes-de-datos-abiertos",
    "href": "datos-abiertos/datos-abiertos.html#fuentes-comunes-de-datos-abiertos",
    "title": "11  Datos Abiertos",
    "section": "11.2 Fuentes Comunes de Datos Abiertos",
    "text": "11.2 Fuentes Comunes de Datos Abiertos",
    "crumbs": [
      "Datos Abiertos",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Datos Abiertos</span>"
    ]
  },
  {
    "objectID": "datos-abiertos/datos-abiertos.html#cómo-encontrar-datos-abiertos",
    "href": "datos-abiertos/datos-abiertos.html#cómo-encontrar-datos-abiertos",
    "title": "11  Datos Abiertos",
    "section": "11.3 Cómo Encontrar Datos Abiertos",
    "text": "11.3 Cómo Encontrar Datos Abiertos",
    "crumbs": [
      "Datos Abiertos",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Datos Abiertos</span>"
    ]
  },
  {
    "objectID": "datos-abiertos/datos-abiertos.html#cómo-entender-los-datos-abiertos",
    "href": "datos-abiertos/datos-abiertos.html#cómo-entender-los-datos-abiertos",
    "title": "11  Datos Abiertos",
    "section": "11.4 Cómo Entender los Datos Abiertos",
    "text": "11.4 Cómo Entender los Datos Abiertos",
    "crumbs": [
      "Datos Abiertos",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Datos Abiertos</span>"
    ]
  },
  {
    "objectID": "datos-abiertos/datos-abiertos.html#qué-se-puede-y-no-se-puede-hacer-con-los-datos-abiertos",
    "href": "datos-abiertos/datos-abiertos.html#qué-se-puede-y-no-se-puede-hacer-con-los-datos-abiertos",
    "title": "11  Datos Abiertos",
    "section": "11.5 Qué se Puede y No se Puede Hacer con los Datos Abiertos",
    "text": "11.5 Qué se Puede y No se Puede Hacer con los Datos Abiertos",
    "crumbs": [
      "Datos Abiertos",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Datos Abiertos</span>"
    ]
  },
  {
    "objectID": "datos-abiertos/datos-abiertos.html#cómo-evaluar-la-calidad-de-los-datos-abiertos",
    "href": "datos-abiertos/datos-abiertos.html#cómo-evaluar-la-calidad-de-los-datos-abiertos",
    "title": "11  Datos Abiertos",
    "section": "11.6 Cómo Evaluar la Calidad de los Datos Abiertos",
    "text": "11.6 Cómo Evaluar la Calidad de los Datos Abiertos",
    "crumbs": [
      "Datos Abiertos",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Datos Abiertos</span>"
    ]
  },
  {
    "objectID": "datos-accion/datos-accion.html",
    "href": "datos-accion/datos-accion.html",
    "title": "12  Datos a la Acción",
    "section": "",
    "text": "12.1 Estudio de Caso: Escape from Model Land",
    "crumbs": [
      "Datos a la Acción",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Datos a la Acción</span>"
    ]
  },
  {
    "objectID": "datos-accion/datos-accion.html#comprensión-de-modelos",
    "href": "datos-accion/datos-accion.html#comprensión-de-modelos",
    "title": "12  Datos a la Acción",
    "section": "12.2 Comprensión de Modelos",
    "text": "12.2 Comprensión de Modelos\n\n12.2.1 Modeladores y Usuarios\n\n\n12.2.2 Importancia de la Comunicación de Modelos",
    "crumbs": [
      "Datos a la Acción",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Datos a la Acción</span>"
    ]
  },
  {
    "objectID": "datos-accion/datos-accion.html#toma-de-decisiones-robusta",
    "href": "datos-accion/datos-accion.html#toma-de-decisiones-robusta",
    "title": "12  Datos a la Acción",
    "section": "12.3 Toma de Decisiones Robusta",
    "text": "12.3 Toma de Decisiones Robusta",
    "crumbs": [
      "Datos a la Acción",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Datos a la Acción</span>"
    ]
  },
  {
    "objectID": "datos-accion/datos-accion.html#evaluación-de-riesgos",
    "href": "datos-accion/datos-accion.html#evaluación-de-riesgos",
    "title": "12  Datos a la Acción",
    "section": "12.4 Evaluación de Riesgos",
    "text": "12.4 Evaluación de Riesgos",
    "crumbs": [
      "Datos a la Acción",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Datos a la Acción</span>"
    ]
  },
  {
    "objectID": "datos-accion/datos-accion.html#límites-de-los-modelos",
    "href": "datos-accion/datos-accion.html#límites-de-los-modelos",
    "title": "12  Datos a la Acción",
    "section": "12.5 Límites de los Modelos",
    "text": "12.5 Límites de los Modelos",
    "crumbs": [
      "Datos a la Acción",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Datos a la Acción</span>"
    ]
  },
  {
    "objectID": "datos-accion/datos-accion.html#objetividad-en-el-análisis",
    "href": "datos-accion/datos-accion.html#objetividad-en-el-análisis",
    "title": "12  Datos a la Acción",
    "section": "12.6 Objetividad en el Análisis",
    "text": "12.6 Objetividad en el Análisis",
    "crumbs": [
      "Datos a la Acción",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Datos a la Acción</span>"
    ]
  },
  {
    "objectID": "datos-accion/datos-accion.html#precisión-y-exactitud-de-modelos",
    "href": "datos-accion/datos-accion.html#precisión-y-exactitud-de-modelos",
    "title": "12  Datos a la Acción",
    "section": "12.7 Precisión y Exactitud de Modelos",
    "text": "12.7 Precisión y Exactitud de Modelos",
    "crumbs": [
      "Datos a la Acción",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Datos a la Acción</span>"
    ]
  },
  {
    "objectID": "datos-accion/datos-accion.html#cuándo-los-datos-son-suficientemente-buenos",
    "href": "datos-accion/datos-accion.html#cuándo-los-datos-son-suficientemente-buenos",
    "title": "12  Datos a la Acción",
    "section": "12.8 Cuándo los Datos son Suficientemente Buenos",
    "text": "12.8 Cuándo los Datos son Suficientemente Buenos",
    "crumbs": [
      "Datos a la Acción",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Datos a la Acción</span>"
    ]
  },
  {
    "objectID": "datos-accion/datos-accion.html#transparencia-en-el-proceso",
    "href": "datos-accion/datos-accion.html#transparencia-en-el-proceso",
    "title": "12  Datos a la Acción",
    "section": "12.9 Transparencia en el Proceso",
    "text": "12.9 Transparencia en el Proceso",
    "crumbs": [
      "Datos a la Acción",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Datos a la Acción</span>"
    ]
  },
  {
    "objectID": "datos-accion/datos-accion.html#mejores-prácticas-para-decisiones-robustas",
    "href": "datos-accion/datos-accion.html#mejores-prácticas-para-decisiones-robustas",
    "title": "12  Datos a la Acción",
    "section": "12.10 Mejores Prácticas para Decisiones Robustas",
    "text": "12.10 Mejores Prácticas para Decisiones Robustas\n\n12.10.1 Con Modelos Imperfectos\n\n\n12.10.2 Con Datos Imperfectos",
    "crumbs": [
      "Datos a la Acción",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Datos a la Acción</span>"
    ]
  },
  {
    "objectID": "datos-accion/datos-accion.html#comunicación-en-el-contexto-municipal",
    "href": "datos-accion/datos-accion.html#comunicación-en-el-contexto-municipal",
    "title": "12  Datos a la Acción",
    "section": "12.11 Comunicación en el Contexto Municipal",
    "text": "12.11 Comunicación en el Contexto Municipal",
    "crumbs": [
      "Datos a la Acción",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Datos a la Acción</span>"
    ]
  },
  {
    "objectID": "datos-accion/datos-accion.html#de-datos-a-acción",
    "href": "datos-accion/datos-accion.html#de-datos-a-acción",
    "title": "12  Datos a la Acción",
    "section": "12.12 De Datos a Acción",
    "text": "12.12 De Datos a Acción\n\n12.12.1 Cómo se Usan (o No se Usan) los Datos en el Mundo Real\n\n\n12.12.2 Implicaciones para los Practicantes",
    "crumbs": [
      "Datos a la Acción",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Datos a la Acción</span>"
    ]
  },
  {
    "objectID": "conclusion.html",
    "href": "conclusion.html",
    "title": "Conclusión",
    "section": "",
    "text": "In summary, this book has no content whatsoever.",
    "crumbs": [
      "Conclusión"
    ]
  }
]